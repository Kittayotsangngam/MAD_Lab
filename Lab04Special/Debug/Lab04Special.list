
Lab04Special.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e10  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004084  08004084  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  0800408c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000030  080040bc  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080040bc  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad4b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfd  00000000  00000000  0002adec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000629  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263cf  00000000  00000000  0002d821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cae4  00000000  00000000  00053bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed711  00000000  00000000  000606d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ee4  00000000  00000000  0014dde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014fccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000030 	.word	0x20000030
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ff0 	.word	0x08003ff0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000034 	.word	0x20000034
 8000234:	08003ff0 	.word	0x08003ff0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_GPIO_Init+0x2c>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <MX_GPIO_Init+0x2c>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_GPIO_Init+0x2c>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc5b 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8de 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f7ff ffe0 	bl	8000544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 fb1a 	bl	8000bbc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000588:	f000 fb48 	bl	8000c1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,(uint8_t*) &ch1,1);
 800058c:	2201      	movs	r2, #1
 800058e:	495d      	ldr	r1, [pc, #372]	; (8000704 <main+0x190>)
 8000590:	485d      	ldr	r0, [pc, #372]	; (8000708 <main+0x194>)
 8000592:	f002 fac0 	bl	8002b16 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3,(uint8_t*) helloMsg, strlen(helloMsg),1000);
 8000596:	485d      	ldr	r0, [pc, #372]	; (800070c <main+0x198>)
 8000598:	f7ff fe4e 	bl	8000238 <strlen>
 800059c:	4603      	mov	r3, r0
 800059e:	b29a      	uxth	r2, r3
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	4959      	ldr	r1, [pc, #356]	; (800070c <main+0x198>)
 80005a6:	4858      	ldr	r0, [pc, #352]	; (8000708 <main+0x194>)
 80005a8:	f002 f96e 	bl	8002888 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(state==0&&isSend==1&&sendName==0){
 80005ac:	4b58      	ldr	r3, [pc, #352]	; (8000710 <main+0x19c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d119      	bne.n	80005e8 <main+0x74>
 80005b4:	4b57      	ldr	r3, [pc, #348]	; (8000714 <main+0x1a0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d115      	bne.n	80005e8 <main+0x74>
 80005bc:	4b56      	ldr	r3, [pc, #344]	; (8000718 <main+0x1a4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d111      	bne.n	80005e8 <main+0x74>
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80005c4:	bf00      	nop
 80005c6:	4b50      	ldr	r3, [pc, #320]	; (8000708 <main+0x194>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d0:	2b40      	cmp	r3, #64	; 0x40
 80005d2:	d1f8      	bne.n	80005c6 <main+0x52>
		  HAL_UART_Transmit(&huart3,(uint8_t*) "Name: ", strlen("Name: "),1000);
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	2206      	movs	r2, #6
 80005da:	4950      	ldr	r1, [pc, #320]	; (800071c <main+0x1a8>)
 80005dc:	484a      	ldr	r0, [pc, #296]	; (8000708 <main+0x194>)
 80005de:	f002 f953 	bl	8002888 <HAL_UART_Transmit>
		  sendName=1;
 80005e2:	4b4d      	ldr	r3, [pc, #308]	; (8000718 <main+0x1a4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
	  }
	  if(isSend==0){
 80005e8:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <main+0x1a0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f040 8084 	bne.w	80006fa <main+0x186>
		  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE)==RESET){}
 80005f2:	bf00      	nop
 80005f4:	4b4a      	ldr	r3, [pc, #296]	; (8000720 <main+0x1ac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	2b20      	cmp	r3, #32
 8000600:	d1f8      	bne.n	80005f4 <main+0x80>
		  HAL_UART_Receive(&huart2,(uint8_t*) revBuffer, 100,1000);
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	4946      	ldr	r1, [pc, #280]	; (8000724 <main+0x1b0>)
 800060a:	4845      	ldr	r0, [pc, #276]	; (8000720 <main+0x1ac>)
 800060c:	f002 f9bf 	bl	800298e <HAL_UART_Receive>
		  if(revBuffer[0]=='q'&&strlen(revBuffer)==1){
 8000610:	4b44      	ldr	r3, [pc, #272]	; (8000724 <main+0x1b0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b71      	cmp	r3, #113	; 0x71
 8000616:	d118      	bne.n	800064a <main+0xd6>
 8000618:	4842      	ldr	r0, [pc, #264]	; (8000724 <main+0x1b0>)
 800061a:	f7ff fe0d 	bl	8000238 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d112      	bne.n	800064a <main+0xd6>
		  state=2;
 8000624:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <main+0x19c>)
 8000626:	2202      	movs	r2, #2
 8000628:	601a      	str	r2, [r3, #0]
		  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800062a:	bf00      	nop
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <main+0x194>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000636:	2b40      	cmp	r3, #64	; 0x40
 8000638:	d1f8      	bne.n	800062c <main+0xb8>
		  HAL_UART_Transmit(&huart3,(uint8_t*) "Program ended from U.A.R.T.1", strlen("Program ended from U.A.R.T.1"),1000);
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	221c      	movs	r2, #28
 8000640:	4939      	ldr	r1, [pc, #228]	; (8000728 <main+0x1b4>)
 8000642:	4831      	ldr	r0, [pc, #196]	; (8000708 <main+0x194>)
 8000644:	f002 f920 	bl	8002888 <HAL_UART_Transmit>
 8000648:	e057      	b.n	80006fa <main+0x186>
		  }
		  else{
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800064a:	bf00      	nop
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <main+0x194>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000656:	2b40      	cmp	r3, #64	; 0x40
 8000658:	d1f8      	bne.n	800064c <main+0xd8>
			  HAL_UART_Transmit(&huart3,(uint8_t*) revBuffer, strlen(revBuffer),1000);
 800065a:	4832      	ldr	r0, [pc, #200]	; (8000724 <main+0x1b0>)
 800065c:	f7ff fdec 	bl	8000238 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	492e      	ldr	r1, [pc, #184]	; (8000724 <main+0x1b0>)
 800066a:	4827      	ldr	r0, [pc, #156]	; (8000708 <main+0x194>)
 800066c:	f002 f90c 	bl	8002888 <HAL_UART_Transmit>
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000670:	bf00      	nop
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <main+0x194>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067c:	2b40      	cmp	r3, #64	; 0x40
 800067e:	d1f8      	bne.n	8000672 <main+0xfe>
			  HAL_UART_Transmit(&huart3,(uint8_t*) "\t", 1,1000);
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2201      	movs	r2, #1
 8000686:	4929      	ldr	r1, [pc, #164]	; (800072c <main+0x1b8>)
 8000688:	481f      	ldr	r0, [pc, #124]	; (8000708 <main+0x194>)
 800068a:	f002 f8fd 	bl	8002888 <HAL_UART_Transmit>
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800068e:	bf00      	nop
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <main+0x194>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069a:	2b40      	cmp	r3, #64	; 0x40
 800069c:	d1f8      	bne.n	8000690 <main+0x11c>
			  HAL_UART_Transmit(&huart3,(uint8_t*) name, strlen(name),1000);
 800069e:	4824      	ldr	r0, [pc, #144]	; (8000730 <main+0x1bc>)
 80006a0:	f7ff fdca 	bl	8000238 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	4920      	ldr	r1, [pc, #128]	; (8000730 <main+0x1bc>)
 80006ae:	4816      	ldr	r0, [pc, #88]	; (8000708 <main+0x194>)
 80006b0:	f002 f8ea 	bl	8002888 <HAL_UART_Transmit>
			  if(checkRecv==0){
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <main+0x1c0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d103      	bne.n	80006c4 <main+0x150>
			      checkRecv=1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <main+0x1c0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e00e      	b.n	80006e2 <main+0x16e>
			  }
			  else{
			   while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006c4:	bf00      	nop
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <main+0x194>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d0:	2b40      	cmp	r3, #64	; 0x40
 80006d2:	d1f8      	bne.n	80006c6 <main+0x152>
			   HAL_UART_Transmit(&huart3,(uint8_t*) " => ", strlen(" => "),1000);
 80006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d8:	2204      	movs	r2, #4
 80006da:	4917      	ldr	r1, [pc, #92]	; (8000738 <main+0x1c4>)
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <main+0x194>)
 80006de:	f002 f8d3 	bl	8002888 <HAL_UART_Transmit>
			     }
			    isSend=1;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <main+0x1a0>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	601a      	str	r2, [r3, #0]
			     memset(revBuffer,0,strlen(revBuffer));
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <main+0x1b0>)
 80006ea:	f7ff fda5 	bl	8000238 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	461a      	mov	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x1b0>)
 80006f6:	f003 fc4f 	bl	8003f98 <memset>
		  }
	  }
	  HAL_Delay(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fe:	f000 fbf5 	bl	8000eec <HAL_Delay>
	  if(state==0&&isSend==1&&sendName==0){
 8000702:	e753      	b.n	80005ac <main+0x38>
 8000704:	2000004c 	.word	0x2000004c
 8000708:	2000021c 	.word	0x2000021c
 800070c:	20000000 	.word	0x20000000
 8000710:	2000017c 	.word	0x2000017c
 8000714:	20000180 	.word	0x20000180
 8000718:	20000184 	.word	0x20000184
 800071c:	08004008 	.word	0x08004008
 8000720:	20000194 	.word	0x20000194
 8000724:	20000118 	.word	0x20000118
 8000728:	08004010 	.word	0x08004010
 800072c:	08004030 	.word	0x08004030
 8000730:	20000050 	.word	0x20000050
 8000734:	20000190 	.word	0x20000190
 8000738:	08004034 	.word	0x08004034

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fc24 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <SystemClock_Config+0xd4>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xd4>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	4b26      	ldr	r3, [pc, #152]	; (8000814 <SystemClock_Config+0xd8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a25      	ldr	r2, [pc, #148]	; (8000814 <SystemClock_Config+0xd8>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007a8:	23d8      	movs	r3, #216	; 0xd8
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff59 	bl	8001674 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007c8:	f000 f97e 	bl	8000ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007cc:	f000 ff02 	bl	80015d4 <HAL_PWREx_EnableOverDrive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007d6:	f000 f977 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2107      	movs	r1, #7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 f9e9 	bl	8001bd0 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000804:	f000 f960 	bl	8000ac8 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3750      	adds	r7, #80	; 0x50
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(huart==&huart3){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a99      	ldr	r2, [pc, #612]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000824:	4293      	cmp	r3, r2
 8000826:	f040 812b 	bne.w	8000a80 <HAL_UART_RxCpltCallback+0x268>
	  HAL_UART_Receive_IT(&huart3,(uint8_t*) &ch1,1);
 800082a:	2201      	movs	r2, #1
 800082c:	4997      	ldr	r1, [pc, #604]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 800082e:	4896      	ldr	r0, [pc, #600]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000830:	f002 f971 	bl	8002b16 <HAL_UART_Receive_IT>
	  if(isSend==1)
 8000834:	4b96      	ldr	r3, [pc, #600]	; (8000a90 <HAL_UART_RxCpltCallback+0x278>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	f040 8121 	bne.w	8000a80 <HAL_UART_RxCpltCallback+0x268>
	  {
		  if(state==0){
 800083e:	4b95      	ldr	r3, [pc, #596]	; (8000a94 <HAL_UART_RxCpltCallback+0x27c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d166      	bne.n	8000914 <HAL_UART_RxCpltCallback+0xfc>
			  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000846:	bf00      	nop
 8000848:	4b8f      	ldr	r3, [pc, #572]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	2b40      	cmp	r3, #64	; 0x40
 8000854:	d1f8      	bne.n	8000848 <HAL_UART_RxCpltCallback+0x30>
			  HAL_UART_Transmit(&huart3,(uint8_t*) &ch1, 1,1000);
 8000856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085a:	2201      	movs	r2, #1
 800085c:	498b      	ldr	r1, [pc, #556]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000860:	f002 f812 	bl	8002888 <HAL_UART_Transmit>
			  if(ch1==13){
 8000864:	4b89      	ldr	r3, [pc, #548]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b0d      	cmp	r3, #13
 800086a:	d149      	bne.n	8000900 <HAL_UART_RxCpltCallback+0xe8>
				 while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800086c:	bf00      	nop
 800086e:	4b86      	ldr	r3, [pc, #536]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d1f8      	bne.n	800086e <HAL_UART_RxCpltCallback+0x56>
				 HAL_UART_Transmit(&huart3,(uint8_t*) "\r\n", strlen("\r\n"),1000);
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	2202      	movs	r2, #2
 8000882:	4985      	ldr	r1, [pc, #532]	; (8000a98 <HAL_UART_RxCpltCallback+0x280>)
 8000884:	4880      	ldr	r0, [pc, #512]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000886:	f001 ffff 	bl	8002888 <HAL_UART_Transmit>
				 while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 800088a:	bf00      	nop
 800088c:	4b83      	ldr	r3, [pc, #524]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	2b40      	cmp	r3, #64	; 0x40
 8000898:	d1f8      	bne.n	800088c <HAL_UART_RxCpltCallback+0x74>
				 HAL_UART_Transmit(&huart2,(uint8_t*) "\t", 1,1000);
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	2201      	movs	r2, #1
 80008a0:	497f      	ldr	r1, [pc, #508]	; (8000aa0 <HAL_UART_RxCpltCallback+0x288>)
 80008a2:	487e      	ldr	r0, [pc, #504]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80008a4:	f001 fff0 	bl	8002888 <HAL_UART_Transmit>
				 while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008a8:	bf00      	nop
 80008aa:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b4:	2b40      	cmp	r3, #64	; 0x40
 80008b6:	d1f8      	bne.n	80008aa <HAL_UART_RxCpltCallback+0x92>
				 HAL_UART_Transmit(&huart2,(uint8_t*) name, strlen(name),1000);
 80008b8:	487a      	ldr	r0, [pc, #488]	; (8000aa4 <HAL_UART_RxCpltCallback+0x28c>)
 80008ba:	f7ff fcbd 	bl	8000238 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	4977      	ldr	r1, [pc, #476]	; (8000aa4 <HAL_UART_RxCpltCallback+0x28c>)
 80008c8:	4874      	ldr	r0, [pc, #464]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80008ca:	f001 ffdd 	bl	8002888 <HAL_UART_Transmit>
				 while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80008ce:	bf00      	nop
 80008d0:	4b72      	ldr	r3, [pc, #456]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	2b40      	cmp	r3, #64	; 0x40
 80008dc:	d1f8      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0xb8>
				 HAL_UART_Transmit(&huart2,(uint8_t*) " is ready\r\n", strlen(" is ready\r\n"),1000);
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	220b      	movs	r2, #11
 80008e4:	4970      	ldr	r1, [pc, #448]	; (8000aa8 <HAL_UART_RxCpltCallback+0x290>)
 80008e6:	486d      	ldr	r0, [pc, #436]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80008e8:	f001 ffce 	bl	8002888 <HAL_UART_Transmit>
				 isSend=0;
 80008ec:	4b68      	ldr	r3, [pc, #416]	; (8000a90 <HAL_UART_RxCpltCallback+0x278>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
				 state=1;
 80008f2:	4b68      	ldr	r3, [pc, #416]	; (8000a94 <HAL_UART_RxCpltCallback+0x27c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
				 sendName=0;
 80008f8:	4b6c      	ldr	r3, [pc, #432]	; (8000aac <HAL_UART_RxCpltCallback+0x294>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]

	  }
	  }

  }
}
 80008fe:	e0bf      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x268>
				  name[indexName++]=ch1;
 8000900:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <HAL_UART_RxCpltCallback+0x298>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	496a      	ldr	r1, [pc, #424]	; (8000ab0 <HAL_UART_RxCpltCallback+0x298>)
 8000908:	600a      	str	r2, [r1, #0]
 800090a:	4a60      	ldr	r2, [pc, #384]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 800090c:	7811      	ldrb	r1, [r2, #0]
 800090e:	4a65      	ldr	r2, [pc, #404]	; (8000aa4 <HAL_UART_RxCpltCallback+0x28c>)
 8000910:	54d1      	strb	r1, [r2, r3]
}
 8000912:	e0b5      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x268>
		  else if(state==1){
 8000914:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <HAL_UART_RxCpltCallback+0x27c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	f040 80b1 	bne.w	8000a80 <HAL_UART_RxCpltCallback+0x268>
			  HAL_UART_Transmit(&huart3,(uint8_t*) &ch1, 1,1000);
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	2201      	movs	r2, #1
 8000924:	4959      	ldr	r1, [pc, #356]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 8000926:	4858      	ldr	r0, [pc, #352]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000928:	f001 ffae 	bl	8002888 <HAL_UART_Transmit>
			  if(ch1==13){
 800092c:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b0d      	cmp	r3, #13
 8000932:	f040 809c 	bne.w	8000a6e <HAL_UART_RxCpltCallback+0x256>
				  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000936:	bf00      	nop
 8000938:	4b53      	ldr	r3, [pc, #332]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	2b40      	cmp	r3, #64	; 0x40
 8000944:	d1f8      	bne.n	8000938 <HAL_UART_RxCpltCallback+0x120>
				  HAL_UART_Transmit(&huart3,(uint8_t*) "\r\n", strlen("\r\n"),1000);
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	2202      	movs	r2, #2
 800094c:	4952      	ldr	r1, [pc, #328]	; (8000a98 <HAL_UART_RxCpltCallback+0x280>)
 800094e:	484e      	ldr	r0, [pc, #312]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000950:	f001 ff9a 	bl	8002888 <HAL_UART_Transmit>
				  if(sendBuffer[0]=='q'&&indexBuffer==1){
 8000954:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b71      	cmp	r3, #113	; 0x71
 800095a:	d125      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0x190>
 800095c:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_UART_RxCpltCallback+0x2a0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d121      	bne.n	80009a8 <HAL_UART_RxCpltCallback+0x190>
					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000964:	bf00      	nop
 8000966:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000970:	2b40      	cmp	r3, #64	; 0x40
 8000972:	d1f8      	bne.n	8000966 <HAL_UART_RxCpltCallback+0x14e>
					  HAL_UART_Transmit(&huart3,(uint8_t*) "Program ended", strlen("Program ended"),1000);
 8000974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000978:	220d      	movs	r2, #13
 800097a:	4950      	ldr	r1, [pc, #320]	; (8000abc <HAL_UART_RxCpltCallback+0x2a4>)
 800097c:	4842      	ldr	r0, [pc, #264]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 800097e:	f001 ff83 	bl	8002888 <HAL_UART_Transmit>
					  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000982:	bf00      	nop
 8000984:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <HAL_UART_RxCpltCallback+0x270>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098e:	2b40      	cmp	r3, #64	; 0x40
 8000990:	d1f8      	bne.n	8000984 <HAL_UART_RxCpltCallback+0x16c>
					  HAL_UART_Transmit(&huart2,(uint8_t*) "q", 1,1000);
 8000992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000996:	2201      	movs	r2, #1
 8000998:	4949      	ldr	r1, [pc, #292]	; (8000ac0 <HAL_UART_RxCpltCallback+0x2a8>)
 800099a:	4840      	ldr	r0, [pc, #256]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 800099c:	f001 ff74 	bl	8002888 <HAL_UART_Transmit>
					  state=2;
 80009a0:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <HAL_UART_RxCpltCallback+0x27c>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	e06b      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x268>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80009a8:	bf00      	nop
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b4:	2b40      	cmp	r3, #64	; 0x40
 80009b6:	d1f8      	bne.n	80009aa <HAL_UART_RxCpltCallback+0x192>
					  HAL_UART_Transmit(&huart2,(uint8_t*) "\t", 1,1000);
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	2201      	movs	r2, #1
 80009be:	4938      	ldr	r1, [pc, #224]	; (8000aa0 <HAL_UART_RxCpltCallback+0x288>)
 80009c0:	4836      	ldr	r0, [pc, #216]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80009c2:	f001 ff61 	bl	8002888 <HAL_UART_Transmit>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80009c6:	bf00      	nop
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d2:	2b40      	cmp	r3, #64	; 0x40
 80009d4:	d1f8      	bne.n	80009c8 <HAL_UART_RxCpltCallback+0x1b0>
					  HAL_UART_Transmit(&huart2,(uint8_t*) name, strlen(name),1000);
 80009d6:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <HAL_UART_RxCpltCallback+0x28c>)
 80009d8:	f7ff fc2e 	bl	8000238 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	492f      	ldr	r1, [pc, #188]	; (8000aa4 <HAL_UART_RxCpltCallback+0x28c>)
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80009e8:	f001 ff4e 	bl	8002888 <HAL_UART_Transmit>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 80009ec:	bf00      	nop
 80009ee:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f8:	2b40      	cmp	r3, #64	; 0x40
 80009fa:	d1f8      	bne.n	80009ee <HAL_UART_RxCpltCallback+0x1d6>
					  HAL_UART_Transmit(&huart2,(uint8_t*) " : ", strlen(" : "),1000);
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	2203      	movs	r2, #3
 8000a02:	4930      	ldr	r1, [pc, #192]	; (8000ac4 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 8000a06:	f001 ff3f 	bl	8002888 <HAL_UART_Transmit>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000a0a:	bf00      	nop
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a16:	2b40      	cmp	r3, #64	; 0x40
 8000a18:	d1f8      	bne.n	8000a0c <HAL_UART_RxCpltCallback+0x1f4>
					  HAL_UART_Transmit(&huart2,(uint8_t*) sendBuffer, strlen(sendBuffer),1000);
 8000a1a:	4826      	ldr	r0, [pc, #152]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000a1c:	f7ff fc0c 	bl	8000238 <strlen>
 8000a20:	4603      	mov	r3, r0
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a28:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000a2a:	481c      	ldr	r0, [pc, #112]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 8000a2c:	f001 ff2c 	bl	8002888 <HAL_UART_Transmit>
					  while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TC)==RESET){}
 8000a30:	bf00      	nop
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	2b40      	cmp	r3, #64	; 0x40
 8000a3e:	d1f8      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0x21a>
					  HAL_UART_Transmit(&huart2,(uint8_t*) "\r\n", strlen("\r\n"),1000);
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	2202      	movs	r2, #2
 8000a46:	4914      	ldr	r1, [pc, #80]	; (8000a98 <HAL_UART_RxCpltCallback+0x280>)
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <HAL_UART_RxCpltCallback+0x284>)
 8000a4a:	f001 ff1d 	bl	8002888 <HAL_UART_Transmit>
					  indexBuffer=0;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
					  memset(sendBuffer,0,strlen(sendBuffer));
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000a56:	f7ff fbef 	bl	8000238 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000a62:	f003 fa99 	bl	8003f98 <memset>
					  isSend=0;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_UART_RxCpltCallback+0x278>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	e008      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x268>
				  sendBuffer[indexBuffer++]=ch1;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	4910      	ldr	r1, [pc, #64]	; (8000ab8 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a76:	600a      	str	r2, [r1, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_UART_RxCpltCallback+0x274>)
 8000a7a:	7811      	ldrb	r1, [r2, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_UART_RxCpltCallback+0x29c>)
 8000a7e:	54d1      	strb	r1, [r2, r3]
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000021c 	.word	0x2000021c
 8000a8c:	2000004c 	.word	0x2000004c
 8000a90:	20000180 	.word	0x20000180
 8000a94:	2000017c 	.word	0x2000017c
 8000a98:	0800403c 	.word	0x0800403c
 8000a9c:	20000194 	.word	0x20000194
 8000aa0:	08004030 	.word	0x08004030
 8000aa4:	20000050 	.word	0x20000050
 8000aa8:	08004040 	.word	0x08004040
 8000aac:	20000184 	.word	0x20000184
 8000ab0:	20000188 	.word	0x20000188
 8000ab4:	200000b4 	.word	0x200000b4
 8000ab8:	2000018c 	.word	0x2000018c
 8000abc:	0800404c 	.word	0x0800404c
 8000ac0:	0800405c 	.word	0x0800405c
 8000ac4:	08004060 	.word	0x08004060

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f9a0 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART2_IRQHandler+0x10>)
 8000b76:	f002 f813 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000194 	.word	0x20000194

08000b84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <USART3_IRQHandler+0x10>)
 8000b8a:	f002 f809 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000021c 	.word	0x2000021c

08000b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART2_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000c00:	f001 fdf4 	bl	80027ec <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f7ff ff5d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000194 	.word	0x20000194
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MX_USART3_UART_Init+0x5c>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART3_UART_Init+0x58>)
 8000c60:	f001 fdc4 	bl	80027ec <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c6a:	f7ff ff2d 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000021c 	.word	0x2000021c
 8000c78:	40004800 	.word	0x40004800

08000c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0b0      	sub	sp, #192	; 0xc0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2290      	movs	r2, #144	; 0x90
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 f97b 	bl	8003f98 <memset>
  if(uartHandle->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	; (8000dd0 <HAL_UART_MspInit+0x154>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d143      	bne.n	8000d34 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f96f 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc4:	f7ff ff00 	bl	8000ac8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc8:	4b42      	ldr	r3, [pc, #264]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	61bb      	str	r3, [r7, #24]
 8000cde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce0:	4b3c      	ldr	r3, [pc, #240]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a3b      	ldr	r2, [pc, #236]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cf8:	2360      	movs	r3, #96	; 0x60
 8000cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <HAL_UART_MspInit+0x15c>)
 8000d1e:	f000 faad 	bl	800127c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 f9df 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2026      	movs	r0, #38	; 0x26
 8000d2e:	f000 f9f8 	bl	8001122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d32:	e049      	b.n	8000dc8 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <HAL_UART_MspInit+0x160>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d144      	bne.n	8000dc8 <HAL_UART_MspInit+0x14c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f925 	bl	8001f9c <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000d58:	f7ff feb6 	bl	8000ac8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_UART_MspInit+0x158>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da6:	2307      	movs	r3, #7
 8000da8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000db0:	4619      	mov	r1, r3
 8000db2:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_UART_MspInit+0x15c>)
 8000db4:	f000 fa62 	bl	800127c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2027      	movs	r0, #39	; 0x27
 8000dbe:	f000 f994 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dc2:	2027      	movs	r0, #39	; 0x27
 8000dc4:	f000 f9ad 	bl	8001122 <HAL_NVIC_EnableIRQ>
}
 8000dc8:	bf00      	nop
 8000dca:	37c0      	adds	r7, #192	; 0xc0
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40004400 	.word	0x40004400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020c00 	.word	0x40020c00
 8000ddc:	40004800 	.word	0x40004800

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff fec5 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 f8cb 	bl	8003fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fbaf 	bl	8000574 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000e24:	0800408c 	.word	0x0800408c
  ldr r2, =_sbss
 8000e28:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000e2c:	200002a8 	.word	0x200002a8

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>

08000e32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f94c 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	f000 f805 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e42:	f7ff fe47 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f967 	bl	800113e <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92f 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000024 	.word	0x20000024
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	20000028 	.word	0x20000028

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000002c 	.word	0x2000002c
 8000ed0:	200002a4 	.word	0x200002a4

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200002a4 	.word	0x200002a4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000002c 	.word	0x2000002c

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x40>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	05fa0000 	.word	0x05fa0000

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4907      	ldr	r1, [pc, #28]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff29 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff3e 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff31 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff feb6 	bl	8000ed4 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d008      	beq.n	8001188 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e052      	b.n	800122e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0216 	bic.w	r2, r2, #22
 8001196:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d103      	bne.n	80011b8 <HAL_DMA_Abort+0x62>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0208 	bic.w	r2, r2, #8
 80011c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011d8:	e013      	b.n	8001202 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011da:	f7ff fe7b 	bl	8000ed4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d90c      	bls.n	8001202 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2220      	movs	r2, #32
 80011ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e015      	b.n	800122e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e4      	bne.n	80011da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	223f      	movs	r2, #63	; 0x3f
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d004      	beq.n	8001254 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e00c      	b.n	800126e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2205      	movs	r2, #5
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e175      	b.n	8001588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8164 	bne.w	8001582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x56>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80be 	beq.w	8001582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_GPIO_Init+0x324>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_GPIO_Init+0x324>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800141e:	4a61      	ldr	r2, [pc, #388]	; (80015a4 <HAL_GPIO_Init+0x328>)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_GPIO_Init+0x32c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d037      	beq.n	80014ba <HAL_GPIO_Init+0x23e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a57      	ldr	r2, [pc, #348]	; (80015ac <HAL_GPIO_Init+0x330>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d031      	beq.n	80014b6 <HAL_GPIO_Init+0x23a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_GPIO_Init+0x334>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x236>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a55      	ldr	r2, [pc, #340]	; (80015b4 <HAL_GPIO_Init+0x338>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x232>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a54      	ldr	r2, [pc, #336]	; (80015b8 <HAL_GPIO_Init+0x33c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x22e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a53      	ldr	r2, [pc, #332]	; (80015bc <HAL_GPIO_Init+0x340>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x22a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x344>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x348>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x34c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x350>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x21a>
 8001492:	2309      	movs	r3, #9
 8001494:	e012      	b.n	80014bc <HAL_GPIO_Init+0x240>
 8001496:	230a      	movs	r3, #10
 8001498:	e010      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149a:	2308      	movs	r3, #8
 800149c:	e00e      	b.n	80014bc <HAL_GPIO_Init+0x240>
 800149e:	2307      	movs	r3, #7
 80014a0:	e00c      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a2:	2306      	movs	r3, #6
 80014a4:	e00a      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014a6:	2305      	movs	r3, #5
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014aa:	2304      	movs	r3, #4
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x240>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x328>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_GPIO_Init+0x354>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014fe:	4a34      	ldr	r2, [pc, #208]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <HAL_GPIO_Init+0x354>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_GPIO_Init+0x354>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f ae86 	bls.w	800129c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40021c00 	.word	0x40021c00
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_PWREx_EnableOverDrive+0x98>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a22      	ldr	r2, [pc, #136]	; (800166c <HAL_PWREx_EnableOverDrive+0x98>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_PWREx_EnableOverDrive+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001602:	f7ff fc67 	bl	8000ed4 <HAL_GetTick>
 8001606:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001608:	e009      	b.n	800161e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800160a:	f7ff fc63 	bl	8000ed4 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001618:	d901      	bls.n	800161e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e022      	b.n	8001664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162a:	d1ee      	bne.n	800160a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001636:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fc4c 	bl	8000ed4 <HAL_GetTick>
 800163c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800163e:	e009      	b.n	8001654 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001640:	f7ff fc48 	bl	8000ed4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164e:	d901      	bls.n	8001654 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e007      	b.n	8001664 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001660:	d1ee      	bne.n	8001640 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e29b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8087 	beq.w	80017a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	4b96      	ldr	r3, [pc, #600]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d00c      	beq.n	80016be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016a4:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d112      	bne.n	80016d6 <HAL_RCC_OscConfig+0x62>
 80016b0:	4b90      	ldr	r3, [pc, #576]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016bc:	d10b      	bne.n	80016d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016be:	4b8d      	ldr	r3, [pc, #564]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x130>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d168      	bne.n	80017a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e275      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x7a>
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e02e      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x9c>
 80016f6:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a7e      	ldr	r2, [pc, #504]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7b      	ldr	r2, [pc, #492]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e01d      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0xc0>
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a72      	ldr	r2, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0xd8>
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b6c      	ldr	r3, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6b      	ldr	r2, [pc, #428]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fbbe 	bl	8000ed4 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fbba 	bl	8000ed4 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e229      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0xe8>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fbaa 	bl	8000ed4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fba6 	bl	8000ed4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e215      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x110>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d069      	beq.n	8001886 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d11c      	bne.n	8001804 <HAL_RCC_OscConfig+0x190>
 80017ca:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d116      	bne.n	8001804 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x17a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e1e9      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	493d      	ldr	r1, [pc, #244]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	e040      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a38      	ldr	r2, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fb5c 	bl	8000ed4 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fb58 	bl	8000ed4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1c7      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4929      	ldr	r1, [pc, #164]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	e018      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fb38 	bl	8000ed4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fb34 	bl	8000ed4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1a3      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d038      	beq.n	8001904 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 800189c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fb15 	bl	8000ed4 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb11 	bl	8000ed4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e180      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x23a>
 80018cc:	e01a      	b.n	8001904 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x280>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fafb 	bl	8000ed4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff faf7 	bl	8000ed4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d903      	bls.n	80018f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e166      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
 80018f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1ee      	bne.n	80018e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 80a4 	beq.w	8001a5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10d      	bne.n	800193a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a88      	ldr	r2, [pc, #544]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4b83      	ldr	r3, [pc, #524]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d118      	bne.n	8001978 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001946:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001952:	f7ff fabf 	bl	8000ed4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fabb 	bl	8000ed4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b64      	cmp	r3, #100	; 0x64
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e12a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196c:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x4d4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x31a>
 8001980:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a6f      	ldr	r2, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e02d      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x33c>
 8001996:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	e01c      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d10c      	bne.n	80019d2 <HAL_RCC_OscConfig+0x35e>
 80019b8:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a61      	ldr	r2, [pc, #388]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019be:	f043 0304 	orr.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a5e      	ldr	r2, [pc, #376]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e00b      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
 80019d2:	4b5c      	ldr	r3, [pc, #368]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a5b      	ldr	r2, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d015      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fa6f 	bl	8000ed4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fa6b 	bl	8000ed4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0d8      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ee      	beq.n	80019fa <HAL_RCC_OscConfig+0x386>
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fa59 	bl	8000ed4 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fa55 	bl	8000ed4 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0c2      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80ae 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a64:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d06d      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d14b      	bne.n	8001b10 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa26 	bl	8000ed4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff fa22 	bl	8000ed4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e091      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	071b      	lsls	r3, r3, #28
 8001ad6:	491b      	ldr	r1, [pc, #108]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f9f4 	bl	8000ed4 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f9f0 	bl	8000ed4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e05f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x47c>
 8001b0e:	e057      	b.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9da 	bl	8000ed4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f9d6 	bl	8000ed4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e045      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4b0>
 8001b42:	e03d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_OscConfig+0x558>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d030      	beq.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d129      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d122      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d119      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	085b      	lsrs	r3, r3, #1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d10f      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0d0      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b8      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a58      	ldr	r2, [pc, #352]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494d      	ldr	r1, [pc, #308]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07f      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e073      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e06b      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4936      	ldr	r1, [pc, #216]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7ff f906 	bl	8000ed4 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f902 	bl	8000ed4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e053      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 020f 	bic.w	r2, r3, #15
 8001d0a:	4922      	ldr	r1, [pc, #136]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e032      	b.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4916      	ldr	r1, [pc, #88]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f821 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	490a      	ldr	r1, [pc, #40]	; (8001d9c <HAL_RCC_ClockConfig+0x1cc>)
 8001d74:	5ccb      	ldrb	r3, [r1, r3]
 8001d76:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7a:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1d0>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1d4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f862 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08004064 	.word	0x08004064
 8001da0:	20000024 	.word	0x20000024
 8001da4:	20000028 	.word	0x20000028

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b090      	sub	sp, #64	; 0x40
 8001dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	2300      	movs	r3, #0
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d00d      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x40>
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	f200 80a1 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x34>
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dda:	e09b      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ddc:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de0:	e09b      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001de4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de6:	e098      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de8:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d028      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	2200      	movs	r2, #0
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	627a      	str	r2, [r7, #36]	; 0x24
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e10:	2100      	movs	r1, #0
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e14:	fb03 f201 	mul.w	r2, r3, r1
 8001e18:	2300      	movs	r3, #0
 8001e1a:	fb00 f303 	mul.w	r3, r0, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a43      	ldr	r2, [pc, #268]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e22:	fba0 1202 	umull	r1, r2, r0, r2
 8001e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e28:	460a      	mov	r2, r1
 8001e2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2e:	4413      	add	r3, r2
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	2200      	movs	r2, #0
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	61fa      	str	r2, [r7, #28]
 8001e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e42:	f7fe fa01 	bl	8000248 <__aeabi_uldivmod>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4e:	e053      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	2200      	movs	r2, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	617a      	str	r2, [r7, #20]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e62:	f04f 0b00 	mov.w	fp, #0
 8001e66:	4652      	mov	r2, sl
 8001e68:	465b      	mov	r3, fp
 8001e6a:	f04f 0000 	mov.w	r0, #0
 8001e6e:	f04f 0100 	mov.w	r1, #0
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e78:	0150      	lsls	r0, r2, #5
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001e82:	eb63 090b 	sbc.w	r9, r3, fp
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001e9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	00eb      	lsls	r3, r5, #3
 8001eac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eb0:	00e2      	lsls	r2, r4, #3
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	eb14 030a 	adds.w	r3, r4, sl
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	eb45 030b 	adc.w	r3, r5, fp
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	028b      	lsls	r3, r1, #10
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed8:	4621      	mov	r1, r4
 8001eda:	028a      	lsls	r2, r1, #10
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	60fa      	str	r2, [r7, #12]
 8001ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eec:	f7fe f9ac 	bl	8000248 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3740      	adds	r7, #64	; 0x40
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	017d7840 	.word	0x017d7840

08001f34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000024 	.word	0x20000024

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08004074 	.word	0x08004074

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08004074 	.word	0x08004074

08001f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc4:	4b69      	ldr	r3, [pc, #420]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a68      	ldr	r2, [pc, #416]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fce:	6093      	str	r3, [r2, #8]
 8001fd0:	4b66      	ldr	r3, [pc, #408]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	4964      	ldr	r1, [pc, #400]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d017      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	4959      	ldr	r1, [pc, #356]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002014:	d101      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002022:	2301      	movs	r3, #1
 8002024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d017      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002032:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	494a      	ldr	r1, [pc, #296]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002050:	d101      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 808b 	beq.w	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002080:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a39      	ldr	r2, [pc, #228]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
 800208c:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002098:	4b35      	ldr	r3, [pc, #212]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a4:	f7fe ff16 	bl	8000ed4 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe ff12 	bl	8000ed4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e38f      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d035      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d02e      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800210a:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d114      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe feda 	bl	8000ed4 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fed6 	bl	8000ed4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e351      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002152:	d111      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002162:	400b      	ands	r3, r1
 8002164:	4901      	ldr	r1, [pc, #4]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
 800216a:	e00b      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000
 8002174:	0ffffcff 	.word	0x0ffffcff
 8002178:	4bac      	ldr	r3, [pc, #688]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4aab      	ldr	r2, [pc, #684]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002182:	6093      	str	r3, [r2, #8]
 8002184:	4ba9      	ldr	r3, [pc, #676]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	49a6      	ldr	r1, [pc, #664]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002192:	4313      	orrs	r3, r2
 8002194:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021a2:	4ba2      	ldr	r3, [pc, #648]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a8:	4aa0      	ldr	r2, [pc, #640]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021b2:	4b9e      	ldr	r3, [pc, #632]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	499b      	ldr	r1, [pc, #620]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d0:	4b96      	ldr	r3, [pc, #600]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021de:	4993      	ldr	r1, [pc, #588]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f2:	4b8e      	ldr	r3, [pc, #568]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002200:	498a      	ldr	r1, [pc, #552]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002214:	4b85      	ldr	r3, [pc, #532]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002222:	4982      	ldr	r1, [pc, #520]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4979      	ldr	r1, [pc, #484]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4971      	ldr	r1, [pc, #452]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800227a:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	f023 020c 	bic.w	r2, r3, #12
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	4968      	ldr	r1, [pc, #416]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800229c:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4960      	ldr	r1, [pc, #384]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022be:	4b5b      	ldr	r3, [pc, #364]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	4957      	ldr	r1, [pc, #348]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022e0:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	494f      	ldr	r1, [pc, #316]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4946      	ldr	r1, [pc, #280]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002324:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	493e      	ldr	r1, [pc, #248]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d011      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002398:	4924      	ldr	r1, [pc, #144]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a8:	d101      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	4914      	ldr	r1, [pc, #80]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00f      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002420:	4902      	ldr	r1, [pc, #8]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002428:	e002      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800243c:	4b8a      	ldr	r3, [pc, #552]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002442:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	4986      	ldr	r1, [pc, #536]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002466:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	497d      	ldr	r1, [pc, #500]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d006      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80d6 	beq.w	8002638 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800248c:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002492:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe fd1c 	bl	8000ed4 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024a0:	f7fe fd18 	bl	8000ed4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e195      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024d2:	4b65      	ldr	r3, [pc, #404]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e6:	0e1b      	lsrs	r3, r3, #24
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	019a      	lsls	r2, r3, #6
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	071b      	lsls	r3, r3, #28
 8002506:	4958      	ldr	r1, [pc, #352]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02e      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002538:	d129      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002548:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0f1b      	lsrs	r3, r3, #28
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	019a      	lsls	r2, r3, #6
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	431a      	orrs	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	071b      	lsls	r3, r3, #28
 800256e:	493e      	ldr	r1, [pc, #248]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800257c:	f023 021f 	bic.w	r2, r3, #31
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	3b01      	subs	r3, #1
 8002586:	4938      	ldr	r1, [pc, #224]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01d      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a0:	0e1b      	lsrs	r3, r3, #24
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ae:	0f1b      	lsrs	r3, r3, #28
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	019a      	lsls	r2, r3, #6
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	071b      	lsls	r3, r3, #28
 80025ce:	4926      	ldr	r1, [pc, #152]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d011      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	019a      	lsls	r2, r3, #6
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	071b      	lsls	r3, r3, #28
 80025fe:	491a      	ldr	r1, [pc, #104]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002612:	f7fe fc5f 	bl	8000ed4 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800261a:	f7fe fc5b 	bl	8000ed4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0d8      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b01      	cmp	r3, #1
 800263c:	f040 80ce 	bne.w	80027dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fc42 	bl	8000ed4 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002654:	f7fe fc3e 	bl	8000ed4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d904      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e0bb      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d0ec      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12a      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026b0:	4b4d      	ldr	r3, [pc, #308]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	0f1b      	lsrs	r3, r3, #28
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	019a      	lsls	r2, r3, #6
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	041b      	lsls	r3, r3, #16
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	061b      	lsls	r3, r3, #24
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	4944      	ldr	r1, [pc, #272]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	493d      	ldr	r1, [pc, #244]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d022      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270c:	d11d      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800270e:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	0e1b      	lsrs	r3, r3, #24
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800271c:	4b32      	ldr	r3, [pc, #200]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	0f1b      	lsrs	r3, r3, #28
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	019a      	lsls	r2, r3, #6
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	431a      	orrs	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	071b      	lsls	r3, r3, #28
 8002742:	4929      	ldr	r1, [pc, #164]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d028      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	0e1b      	lsrs	r3, r3, #24
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	0c1b      	lsrs	r3, r3, #16
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	019a      	lsls	r2, r3, #6
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	4917      	ldr	r1, [pc, #92]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	4911      	ldr	r1, [pc, #68]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b4:	f7fe fb8e 	bl	8000ed4 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027bc:	f7fe fb8a 	bl	8000ed4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e007      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027da:	d1ef      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e040      	b.n	8002880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fa34 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fcca 	bl	80031c4 <UART_SetConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e022      	b.n	8002880 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 ff22 	bl	800368c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 ffa9 	bl	80037d0 <UART_CheckIdleState>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800289c:	2b20      	cmp	r3, #32
 800289e:	d171      	bne.n	8002984 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Transmit+0x24>
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e06a      	b.n	8002986 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028be:	f7fe fb09 	bl	8000ed4 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028dc:	d108      	bne.n	80028f0 <HAL_UART_Transmit+0x68>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e003      	b.n	80028f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028f8:	e02c      	b.n	8002954 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 ffb0 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e038      	b.n	8002986 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002928:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	3302      	adds	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e007      	b.n	8002942 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1cc      	bne.n	80028fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2200      	movs	r2, #0
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 ff7d 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e005      	b.n	8002986 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b08a      	sub	sp, #40	; 0x28
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	f040 80b1 	bne.w	8002b0c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_Receive+0x28>
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0a9      	b.n	8002b0e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2222      	movs	r2, #34	; 0x22
 80029c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d0:	f7fe fa80 	bl	8000ed4 <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ee:	d10e      	bne.n	8002a0e <HAL_UART_Receive+0x80>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_UART_Receive+0x76>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a02:	e02d      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a0c:	e028      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10d      	bne.n	8002a32 <HAL_UART_Receive+0xa4>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_UART_Receive+0x9a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a26:	e01b      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	227f      	movs	r2, #127	; 0x7f
 8002a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a30:	e016      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a3a:	d10d      	bne.n	8002a58 <HAL_UART_Receive+0xca>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_UART_Receive+0xc0>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	227f      	movs	r2, #127	; 0x7f
 8002a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a4c:	e008      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	223f      	movs	r2, #63	; 0x3f
 8002a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Receive+0xd2>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a70:	d108      	bne.n	8002a84 <HAL_UART_Receive+0xf6>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e003      	b.n	8002a8c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a8c:	e032      	b.n	8002af4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2120      	movs	r1, #32
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fee6 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e032      	b.n	8002b0e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	8a7b      	ldrh	r3, [r7, #18]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e00c      	b.n	8002ae2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1c6      	bne.n	8002a8e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	4613      	mov	r3, r2
 8002b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d132      	bne.n	8002b94 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_UART_Receive_IT+0x24>
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e02b      	b.n	8002b96 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	623b      	str	r3, [r7, #32]
 8002b72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e6      	bne.n	8002b52 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	461a      	mov	r2, r3
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 ff34 	bl	80039f8 <UART_Start_Receive_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	e000      	b.n	8002b96 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b0ba      	sub	sp, #232	; 0xe8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002bca:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bce:	4013      	ands	r3, r2
 8002bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d115      	bne.n	8002c08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00f      	beq.n	8002c08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 82ac 	beq.w	8003156 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	4798      	blx	r3
      }
      return;
 8002c06:	e2a6      	b.n	8003156 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8117 	beq.w	8002e40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c22:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_UART_IRQHandler+0x298>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 810a 	beq.w	8002e40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <HAL_UART_IRQHandler+0xbc>
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d011      	beq.n	8002c8c <HAL_UART_IRQHandler+0xec>
 8002c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00b      	beq.n	8002c8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c82:	f043 0204 	orr.w	r2, r3, #4
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d011      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
 8002c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cee:	f043 0208 	orr.w	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <HAL_UART_IRQHandler+0x18a>
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8212 	beq.w	800315a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d005      	beq.n	8002d82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04f      	beq.n	8002e22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fefe 	bl	8003b84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b40      	cmp	r3, #64	; 0x40
 8002d94:	d141      	bne.n	8002e1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1d9      	bne.n	8002d96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d013      	beq.n	8002e12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <HAL_UART_IRQHandler+0x29c>)
 8002df0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fa1d 	bl	8001236 <HAL_DMA_Abort_IT>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d017      	beq.n	8002e32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e00f      	b.n	8002e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9b6 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e18:	e00b      	b.n	8002e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f9b2 	bl	8003184 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	e007      	b.n	8002e32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f9ae 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e30:	e193      	b.n	800315a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e32:	bf00      	nop
    return;
 8002e34:	e191      	b.n	800315a <HAL_UART_IRQHandler+0x5ba>
 8002e36:	bf00      	nop
 8002e38:	04000120 	.word	0x04000120
 8002e3c:	08003c4d 	.word	0x08003c4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	f040 814c 	bne.w	80030e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8145 	beq.w	80030e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 813e 	beq.w	80030e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	f040 80b6 	bne.w	8002fea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8165 	beq.w	800315e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	f080 815d 	bcs.w	800315e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	f000 8086 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ee6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1da      	bne.n	8002ebc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e1      	bne.n	8002f06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f6e:	e841 2300 	strex	r3, r2, [r1]
 8002f72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e3      	bne.n	8002f42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	f023 0310 	bic.w	r3, r3, #16
 8002f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e4      	bne.n	8002f88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f8c7 	bl	8001156 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8d8 	bl	8003198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fe8:	e0b9      	b.n	800315e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80ab 	beq.w	8003162 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800300c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a6 	beq.w	8003162 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	e853 3f00 	ldrex	r3, [r3]
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003026:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800302a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
 800303a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800303e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003040:	e841 2300 	strex	r3, r2, [r1]
 8003044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e4      	bne.n	8003016 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	623b      	str	r3, [r7, #32]
   return(result);
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3308      	adds	r3, #8
 800306c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003070:	633a      	str	r2, [r7, #48]	; 0x30
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e3      	bne.n	800304c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f023 0310 	bic.w	r3, r3, #16
 80030ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	617b      	str	r3, [r7, #20]
   return(result);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e4      	bne.n	8003098 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f85c 	bl	8003198 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030e0:	e03f      	b.n	8003162 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <HAL_UART_IRQHandler+0x56c>
 80030ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003102:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f853 	bl	80031b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800310a:	e02d      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800310c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00e      	beq.n	8003136 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
    }
    return;
 8003134:	e017      	b.n	8003166 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <HAL_UART_IRQHandler+0x5c8>
 8003142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fd92 	bl	8003c78 <UART_EndTransmit_IT>
    return;
 8003154:	e008      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003156:	bf00      	nop
 8003158:	e006      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
    return;
 800315a:	bf00      	nop
 800315c:	e004      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
      return;
 800315e:	bf00      	nop
 8003160:	e002      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003166:	bf00      	nop
  }

}
 8003168:	37e8      	adds	r7, #232	; 0xe8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop

08003170 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4ba6      	ldr	r3, [pc, #664]	; (8003488 <UART_SetConfig+0x2c4>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a94      	ldr	r2, [pc, #592]	; (800348c <UART_SetConfig+0x2c8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d120      	bne.n	8003282 <UART_SetConfig+0xbe>
 8003240:	4b93      	ldr	r3, [pc, #588]	; (8003490 <UART_SetConfig+0x2cc>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b03      	cmp	r3, #3
 800324c:	d816      	bhi.n	800327c <UART_SetConfig+0xb8>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x90>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003265 	.word	0x08003265
 8003258:	08003271 	.word	0x08003271
 800325c:	0800326b 	.word	0x0800326b
 8003260:	08003277 	.word	0x08003277
 8003264:	2301      	movs	r3, #1
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e150      	b.n	800350c <UART_SetConfig+0x348>
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e14d      	b.n	800350c <UART_SetConfig+0x348>
 8003270:	2304      	movs	r3, #4
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e14a      	b.n	800350c <UART_SetConfig+0x348>
 8003276:	2308      	movs	r3, #8
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e147      	b.n	800350c <UART_SetConfig+0x348>
 800327c:	2310      	movs	r3, #16
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e144      	b.n	800350c <UART_SetConfig+0x348>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a83      	ldr	r2, [pc, #524]	; (8003494 <UART_SetConfig+0x2d0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d132      	bne.n	80032f2 <UART_SetConfig+0x12e>
 800328c:	4b80      	ldr	r3, [pc, #512]	; (8003490 <UART_SetConfig+0x2cc>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d828      	bhi.n	80032ec <UART_SetConfig+0x128>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0xdc>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032d5 	.word	0x080032d5
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032ed 	.word	0x080032ed
 80032ac:	080032ed 	.word	0x080032ed
 80032b0:	080032e1 	.word	0x080032e1
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	080032ed 	.word	0x080032ed
 80032c0:	080032db 	.word	0x080032db
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	080032ed 	.word	0x080032ed
 80032d0:	080032e7 	.word	0x080032e7
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e118      	b.n	800350c <UART_SetConfig+0x348>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e115      	b.n	800350c <UART_SetConfig+0x348>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e112      	b.n	800350c <UART_SetConfig+0x348>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e10f      	b.n	800350c <UART_SetConfig+0x348>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e10c      	b.n	800350c <UART_SetConfig+0x348>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a68      	ldr	r2, [pc, #416]	; (8003498 <UART_SetConfig+0x2d4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d120      	bne.n	800333e <UART_SetConfig+0x17a>
 80032fc:	4b64      	ldr	r3, [pc, #400]	; (8003490 <UART_SetConfig+0x2cc>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003306:	2b30      	cmp	r3, #48	; 0x30
 8003308:	d013      	beq.n	8003332 <UART_SetConfig+0x16e>
 800330a:	2b30      	cmp	r3, #48	; 0x30
 800330c:	d814      	bhi.n	8003338 <UART_SetConfig+0x174>
 800330e:	2b20      	cmp	r3, #32
 8003310:	d009      	beq.n	8003326 <UART_SetConfig+0x162>
 8003312:	2b20      	cmp	r3, #32
 8003314:	d810      	bhi.n	8003338 <UART_SetConfig+0x174>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <UART_SetConfig+0x15c>
 800331a:	2b10      	cmp	r3, #16
 800331c:	d006      	beq.n	800332c <UART_SetConfig+0x168>
 800331e:	e00b      	b.n	8003338 <UART_SetConfig+0x174>
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0f2      	b.n	800350c <UART_SetConfig+0x348>
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0ef      	b.n	800350c <UART_SetConfig+0x348>
 800332c:	2304      	movs	r3, #4
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0ec      	b.n	800350c <UART_SetConfig+0x348>
 8003332:	2308      	movs	r3, #8
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e0e9      	b.n	800350c <UART_SetConfig+0x348>
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e0e6      	b.n	800350c <UART_SetConfig+0x348>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a56      	ldr	r2, [pc, #344]	; (800349c <UART_SetConfig+0x2d8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d120      	bne.n	800338a <UART_SetConfig+0x1c6>
 8003348:	4b51      	ldr	r3, [pc, #324]	; (8003490 <UART_SetConfig+0x2cc>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003352:	2bc0      	cmp	r3, #192	; 0xc0
 8003354:	d013      	beq.n	800337e <UART_SetConfig+0x1ba>
 8003356:	2bc0      	cmp	r3, #192	; 0xc0
 8003358:	d814      	bhi.n	8003384 <UART_SetConfig+0x1c0>
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d009      	beq.n	8003372 <UART_SetConfig+0x1ae>
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d810      	bhi.n	8003384 <UART_SetConfig+0x1c0>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <UART_SetConfig+0x1a8>
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d006      	beq.n	8003378 <UART_SetConfig+0x1b4>
 800336a:	e00b      	b.n	8003384 <UART_SetConfig+0x1c0>
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e0cc      	b.n	800350c <UART_SetConfig+0x348>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e0c9      	b.n	800350c <UART_SetConfig+0x348>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e0c6      	b.n	800350c <UART_SetConfig+0x348>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e0c3      	b.n	800350c <UART_SetConfig+0x348>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e0c0      	b.n	800350c <UART_SetConfig+0x348>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a44      	ldr	r2, [pc, #272]	; (80034a0 <UART_SetConfig+0x2dc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d125      	bne.n	80033e0 <UART_SetConfig+0x21c>
 8003394:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <UART_SetConfig+0x2cc>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a2:	d017      	beq.n	80033d4 <UART_SetConfig+0x210>
 80033a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a8:	d817      	bhi.n	80033da <UART_SetConfig+0x216>
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ae:	d00b      	beq.n	80033c8 <UART_SetConfig+0x204>
 80033b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b4:	d811      	bhi.n	80033da <UART_SetConfig+0x216>
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <UART_SetConfig+0x1fe>
 80033ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033be:	d006      	beq.n	80033ce <UART_SetConfig+0x20a>
 80033c0:	e00b      	b.n	80033da <UART_SetConfig+0x216>
 80033c2:	2300      	movs	r3, #0
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e0a1      	b.n	800350c <UART_SetConfig+0x348>
 80033c8:	2302      	movs	r3, #2
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e09e      	b.n	800350c <UART_SetConfig+0x348>
 80033ce:	2304      	movs	r3, #4
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e09b      	b.n	800350c <UART_SetConfig+0x348>
 80033d4:	2308      	movs	r3, #8
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e098      	b.n	800350c <UART_SetConfig+0x348>
 80033da:	2310      	movs	r3, #16
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e095      	b.n	800350c <UART_SetConfig+0x348>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2f      	ldr	r2, [pc, #188]	; (80034a4 <UART_SetConfig+0x2e0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d125      	bne.n	8003436 <UART_SetConfig+0x272>
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <UART_SetConfig+0x2cc>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f8:	d017      	beq.n	800342a <UART_SetConfig+0x266>
 80033fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x26c>
 8003400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003404:	d00b      	beq.n	800341e <UART_SetConfig+0x25a>
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x26c>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x254>
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x260>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x26c>
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e076      	b.n	800350c <UART_SetConfig+0x348>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e073      	b.n	800350c <UART_SetConfig+0x348>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e070      	b.n	800350c <UART_SetConfig+0x348>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e06d      	b.n	800350c <UART_SetConfig+0x348>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e06a      	b.n	800350c <UART_SetConfig+0x348>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <UART_SetConfig+0x2e4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d138      	bne.n	80034b2 <UART_SetConfig+0x2ee>
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <UART_SetConfig+0x2cc>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800344a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800344e:	d017      	beq.n	8003480 <UART_SetConfig+0x2bc>
 8003450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003454:	d82a      	bhi.n	80034ac <UART_SetConfig+0x2e8>
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345a:	d00b      	beq.n	8003474 <UART_SetConfig+0x2b0>
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d824      	bhi.n	80034ac <UART_SetConfig+0x2e8>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <UART_SetConfig+0x2aa>
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	d006      	beq.n	800347a <UART_SetConfig+0x2b6>
 800346c:	e01e      	b.n	80034ac <UART_SetConfig+0x2e8>
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e04b      	b.n	800350c <UART_SetConfig+0x348>
 8003474:	2302      	movs	r3, #2
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e048      	b.n	800350c <UART_SetConfig+0x348>
 800347a:	2304      	movs	r3, #4
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e045      	b.n	800350c <UART_SetConfig+0x348>
 8003480:	2308      	movs	r3, #8
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e042      	b.n	800350c <UART_SetConfig+0x348>
 8003486:	bf00      	nop
 8003488:	efff69f3 	.word	0xefff69f3
 800348c:	40011000 	.word	0x40011000
 8003490:	40023800 	.word	0x40023800
 8003494:	40004400 	.word	0x40004400
 8003498:	40004800 	.word	0x40004800
 800349c:	40004c00 	.word	0x40004c00
 80034a0:	40005000 	.word	0x40005000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40007800 	.word	0x40007800
 80034ac:	2310      	movs	r3, #16
 80034ae:	77fb      	strb	r3, [r7, #31]
 80034b0:	e02c      	b.n	800350c <UART_SetConfig+0x348>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a72      	ldr	r2, [pc, #456]	; (8003680 <UART_SetConfig+0x4bc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d125      	bne.n	8003508 <UART_SetConfig+0x344>
 80034bc:	4b71      	ldr	r3, [pc, #452]	; (8003684 <UART_SetConfig+0x4c0>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034ca:	d017      	beq.n	80034fc <UART_SetConfig+0x338>
 80034cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034d0:	d817      	bhi.n	8003502 <UART_SetConfig+0x33e>
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d6:	d00b      	beq.n	80034f0 <UART_SetConfig+0x32c>
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	d811      	bhi.n	8003502 <UART_SetConfig+0x33e>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <UART_SetConfig+0x326>
 80034e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e6:	d006      	beq.n	80034f6 <UART_SetConfig+0x332>
 80034e8:	e00b      	b.n	8003502 <UART_SetConfig+0x33e>
 80034ea:	2300      	movs	r3, #0
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e00d      	b.n	800350c <UART_SetConfig+0x348>
 80034f0:	2302      	movs	r3, #2
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e00a      	b.n	800350c <UART_SetConfig+0x348>
 80034f6:	2304      	movs	r3, #4
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e007      	b.n	800350c <UART_SetConfig+0x348>
 80034fc:	2308      	movs	r3, #8
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e004      	b.n	800350c <UART_SetConfig+0x348>
 8003502:	2310      	movs	r3, #16
 8003504:	77fb      	strb	r3, [r7, #31]
 8003506:	e001      	b.n	800350c <UART_SetConfig+0x348>
 8003508:	2310      	movs	r3, #16
 800350a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003514:	d15b      	bne.n	80035ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003516:	7ffb      	ldrb	r3, [r7, #31]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d828      	bhi.n	800356e <UART_SetConfig+0x3aa>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0x360>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	08003549 	.word	0x08003549
 8003528:	08003551 	.word	0x08003551
 800352c:	08003559 	.word	0x08003559
 8003530:	0800356f 	.word	0x0800356f
 8003534:	0800355f 	.word	0x0800355f
 8003538:	0800356f 	.word	0x0800356f
 800353c:	0800356f 	.word	0x0800356f
 8003540:	0800356f 	.word	0x0800356f
 8003544:	08003567 	.word	0x08003567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003548:	f7fe fd00 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 800354c:	61b8      	str	r0, [r7, #24]
        break;
 800354e:	e013      	b.n	8003578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7fe fd10 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8003554:	61b8      	str	r0, [r7, #24]
        break;
 8003556:	e00f      	b.n	8003578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <UART_SetConfig+0x4c4>)
 800355a:	61bb      	str	r3, [r7, #24]
        break;
 800355c:	e00c      	b.n	8003578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355e:	f7fe fc23 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8003562:	61b8      	str	r0, [r7, #24]
        break;
 8003564:	e008      	b.n	8003578 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356a:	61bb      	str	r3, [r7, #24]
        break;
 800356c:	e004      	b.n	8003578 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	77bb      	strb	r3, [r7, #30]
        break;
 8003576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d074      	beq.n	8003668 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	005a      	lsls	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	441a      	add	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003592:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	2b0f      	cmp	r3, #15
 8003598:	d916      	bls.n	80035c8 <UART_SetConfig+0x404>
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a0:	d212      	bcs.n	80035c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	f023 030f 	bic.w	r3, r3, #15
 80035aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	89fb      	ldrh	r3, [r7, #14]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	89fa      	ldrh	r2, [r7, #14]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	e04f      	b.n	8003668 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	77bb      	strb	r3, [r7, #30]
 80035cc:	e04c      	b.n	8003668 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d828      	bhi.n	8003626 <UART_SetConfig+0x462>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x418>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003617 	.word	0x08003617
 80035f0:	08003627 	.word	0x08003627
 80035f4:	08003627 	.word	0x08003627
 80035f8:	08003627 	.word	0x08003627
 80035fc:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fca4 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 8003604:	61b8      	str	r0, [r7, #24]
        break;
 8003606:	e013      	b.n	8003630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe fcb4 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 800360c:	61b8      	str	r0, [r7, #24]
        break;
 800360e:	e00f      	b.n	8003630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <UART_SetConfig+0x4c4>)
 8003612:	61bb      	str	r3, [r7, #24]
        break;
 8003614:	e00c      	b.n	8003630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe fbc7 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 800361a:	61b8      	str	r0, [r7, #24]
        break;
 800361c:	e008      	b.n	8003630 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e004      	b.n	8003630 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	77bb      	strb	r3, [r7, #30]
        break;
 800362e:	bf00      	nop
    }

    if (pclk != 0U)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d018      	beq.n	8003668 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	085a      	lsrs	r2, r3, #1
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	441a      	add	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b0f      	cmp	r3, #15
 800364e:	d909      	bls.n	8003664 <UART_SetConfig+0x4a0>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003656:	d205      	bcs.n	8003664 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	e001      	b.n	8003668 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003674:	7fbb      	ldrb	r3, [r7, #30]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40007c00 	.word	0x40007c00
 8003684:	40023800 	.word	0x40023800
 8003688:	00f42400 	.word	0x00f42400

0800368c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378a:	d10a      	bne.n	80037a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e0:	f7fd fb78 	bl	8000ed4 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d10e      	bne.n	8003812 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f831 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e027      	b.n	8003862 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d10e      	bne.n	800383e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f81b 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e011      	b.n	8003862 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b09c      	sub	sp, #112	; 0x70
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	e0a7      	b.n	80039cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003882:	f000 80a3 	beq.w	80039cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd fb25 	bl	8000ed4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
 8003896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13f      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038b0:	667b      	str	r3, [r7, #100]	; 0x64
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e6      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e068      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d050      	beq.n	80039cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003938:	d148      	bne.n	80039cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003942:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003958:	66fb      	str	r3, [r7, #108]	; 0x6c
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e6      	bne.n	8003944 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3308      	adds	r3, #8
 800397c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	613b      	str	r3, [r7, #16]
   return(result);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	66bb      	str	r3, [r7, #104]	; 0x68
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003996:	623a      	str	r2, [r7, #32]
 8003998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	69f9      	ldr	r1, [r7, #28]
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e5      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e010      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4013      	ands	r3, r2
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f43f af48 	beq.w	800387c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3770      	adds	r7, #112	; 0x70
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b097      	sub	sp, #92	; 0x5c
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d10e      	bne.n	8003a4a <UART_Start_Receive_IT+0x52>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <UART_Start_Receive_IT+0x48>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a3e:	e02d      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	22ff      	movs	r2, #255	; 0xff
 8003a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a48:	e028      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <UART_Start_Receive_IT+0x76>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <UART_Start_Receive_IT+0x6c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	22ff      	movs	r2, #255	; 0xff
 8003a5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a62:	e01b      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	227f      	movs	r2, #127	; 0x7f
 8003a68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a6c:	e016      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a76:	d10d      	bne.n	8003a94 <UART_Start_Receive_IT+0x9c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <UART_Start_Receive_IT+0x92>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	227f      	movs	r2, #127	; 0x7f
 8003a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a88:	e008      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	223f      	movs	r2, #63	; 0x3f
 8003a8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a92:	e003      	b.n	8003a9c <UART_Start_Receive_IT+0xa4>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2222      	movs	r2, #34	; 0x22
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003acc:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d107      	bne.n	8003afa <UART_Start_Receive_IT+0x102>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <UART_Start_Receive_IT+0x184>)
 8003af6:	669a      	str	r2, [r3, #104]	; 0x68
 8003af8:	e002      	b.n	8003b00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <UART_Start_Receive_IT+0x188>)
 8003afe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d019      	beq.n	8003b3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
 8003b28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e6      	bne.n	8003b08 <UART_Start_Receive_IT+0x110>
 8003b3a:	e018      	b.n	8003b6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f043 0320 	orr.w	r3, r3, #32
 8003b50:	653b      	str	r3, [r7, #80]	; 0x50
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e6      	bne.n	8003b3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	375c      	adds	r7, #92	; 0x5c
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	08003e33 	.word	0x08003e33
 8003b80:	08003ccd 	.word	0x08003ccd

08003b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b095      	sub	sp, #84	; 0x54
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	e853 3f00 	ldrex	r3, [r3]
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
 8003bac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e6      	bne.n	8003b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e5      	bne.n	8003bbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d118      	bne.n	8003c2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 0310 	bic.w	r3, r3, #16
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6979      	ldr	r1, [r7, #20]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	613b      	str	r3, [r7, #16]
   return(result);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e6      	bne.n	8003bfa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c40:	bf00      	nop
 8003c42:	3754      	adds	r7, #84	; 0x54
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fa8a 	bl	8003184 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6979      	ldr	r1, [r7, #20]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	613b      	str	r3, [r7, #16]
   return(result);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e6      	bne.n	8003c80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fa56 	bl	8003170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc4:	bf00      	nop
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b096      	sub	sp, #88	; 0x58
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce4:	2b22      	cmp	r3, #34	; 0x22
 8003ce6:	f040 8098 	bne.w	8003e1a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cf4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	400a      	ands	r2, r1
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17b      	bne.n	8003e2a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	647b      	str	r3, [r7, #68]	; 0x44
 8003d52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e6      	bne.n	8003d32 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3308      	adds	r3, #8
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	623b      	str	r3, [r7, #32]
   return(result);
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d84:	633a      	str	r2, [r7, #48]	; 0x30
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d12e      	bne.n	8003e12 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	e853 3f00 	ldrex	r3, [r3]
 8003dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	617b      	str	r3, [r7, #20]
   return(result);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e6      	bne.n	8003dba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d103      	bne.n	8003e02 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2210      	movs	r2, #16
 8003e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff f9c4 	bl	8003198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e10:	e00b      	b.n	8003e2a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fc fd00 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 8003e18:	e007      	b.n	8003e2a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699a      	ldr	r2, [r3, #24]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0208 	orr.w	r2, r2, #8
 8003e28:	619a      	str	r2, [r3, #24]
}
 8003e2a:	bf00      	nop
 8003e2c:	3758      	adds	r7, #88	; 0x58
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b096      	sub	sp, #88	; 0x58
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4a:	2b22      	cmp	r3, #34	; 0x22
 8003e4c:	f040 8098 	bne.w	8003f80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003e64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d17b      	bne.n	8003f90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8003eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ebe:	e841 2300 	strex	r3, r2, [r1]
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1e6      	bne.n	8003e98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3308      	adds	r3, #8
 8003ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e5      	bne.n	8003eca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d12e      	bne.n	8003f78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	647b      	str	r3, [r7, #68]	; 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6979      	ldr	r1, [r7, #20]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d103      	bne.n	8003f68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f911 	bl	8003198 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f76:	e00b      	b.n	8003f90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fc fc4d 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 8003f7e:	e007      	b.n	8003f90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]
}
 8003f90:	bf00      	nop
 8003f92:	3758      	adds	r7, #88	; 0x58
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <memset>:
 8003f98:	4402      	add	r2, r0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <__libc_init_array>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4d0d      	ldr	r5, [pc, #52]	; (8003fe0 <__libc_init_array+0x38>)
 8003fac:	4c0d      	ldr	r4, [pc, #52]	; (8003fe4 <__libc_init_array+0x3c>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	42a6      	cmp	r6, r4
 8003fb6:	d109      	bne.n	8003fcc <__libc_init_array+0x24>
 8003fb8:	4d0b      	ldr	r5, [pc, #44]	; (8003fe8 <__libc_init_array+0x40>)
 8003fba:	4c0c      	ldr	r4, [pc, #48]	; (8003fec <__libc_init_array+0x44>)
 8003fbc:	f000 f818 	bl	8003ff0 <_init>
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	42a6      	cmp	r6, r4
 8003fc8:	d105      	bne.n	8003fd6 <__libc_init_array+0x2e>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd0:	4798      	blx	r3
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7ee      	b.n	8003fb4 <__libc_init_array+0xc>
 8003fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fda:	4798      	blx	r3
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7f2      	b.n	8003fc6 <__libc_init_array+0x1e>
 8003fe0:	08004084 	.word	0x08004084
 8003fe4:	08004084 	.word	0x08004084
 8003fe8:	08004084 	.word	0x08004084
 8003fec:	08004088 	.word	0x08004088

08003ff0 <_init>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr

08003ffc <_fini>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

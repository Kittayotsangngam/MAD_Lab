
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e4  080041e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041ec  080041ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004250  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004250  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f44d  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217e  00000000  00000000  0002f51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3f  00000000  00000000  000323c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002773a  00000000  00000000  00032dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012435  00000000  00000000  0005a539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9852  00000000  00000000  0006c96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b40  00000000  00000000  001661c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00169d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004178 	.word	0x08004178

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004178 	.word	0x08004178

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x2c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fafd 	bl	8000c1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f81a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f7ff ffe0 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 800062c:	f000 f95c 	bl	80008e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000630:	f000 f9ae 	bl	8000990 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000634:	f000 fa3a 	bl	8000aac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT (&htim1);
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <main+0x38>)
 800063a:	f001 ff93 	bl	8002564 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  displayNumber(count);
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <main+0x3c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f878 	bl	8000738 <displayNumber>
	  HAL_Delay(400);
 8000648:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800064c:	f000 fb44 	bl	8000cd8 <HAL_Delay>
  {
 8000650:	e7f5      	b.n	800063e <main+0x22>
 8000652:	bf00      	nop
 8000654:	20000080 	.word	0x20000080
 8000658:	20000078 	.word	0x20000078

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 f900 	bl	8003870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <SystemClock_Config+0xd4>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xd4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SystemClock_Config+0xd8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <SystemClock_Config+0xd8>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c8:	23d8      	movs	r3, #216	; 0xd8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe2d 	bl	800133c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006e8:	f000 f848 	bl	800077c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ec:	f000 fdd6 	bl	800129c <HAL_PWREx_EnableOverDrive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f6:	f000 f841 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000712:	f107 0308 	add.w	r3, r7, #8
 8000716:	2107      	movs	r1, #7
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f8bd 	bl	8001898 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000724:	f000 f82a 	bl	800077c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <displayNumber>:

/* USER CODE BEGIN 4 */
void displayNumber(uint32_t count){
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	char Str[33];

		sprintf(Str, "%d\n\r" , count);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	490b      	ldr	r1, [pc, #44]	; (8000774 <displayNumber+0x3c>)
 8000748:	4618      	mov	r0, r3
 800074a:	f003 f871 	bl	8003830 <siprintf>

		HAL_UART_Transmit(&huart3, (uint8_t*) &Str,strlen(Str),1000);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd74 	bl	8000240 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f107 010c 	add.w	r1, r7, #12
 8000760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <displayNumber+0x40>)
 8000766:	f002 fbc5 	bl	8002ef4 <HAL_UART_Transmit>

}
 800076a:	bf00      	nop
 800076c:	3730      	adds	r7, #48	; 0x30
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	08004190 	.word	0x08004190
 8000778:	20000118 	.word	0x20000118

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007be:	2005      	movs	r0, #5
 80007c0:	f000 fb7e 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 fa3c 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800082a:	f001 ff13 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	3301      	adds	r3, #1
 8000834:	4a02      	ldr	r2, [pc, #8]	; (8000840 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000836:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000080 	.word	0x20000080
 8000840:	20000078 	.word	0x20000078

08000844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000848:	4802      	ldr	r0, [pc, #8]	; (8000854 <TIM2_IRQHandler+0x10>)
 800084a:	f001 ff03 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000cc 	.word	0x200000cc

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f002 fffa 	bl	8003880 <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20080000 	.word	0x20080000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	2000007c 	.word	0x2000007c
 80008c0:	200002f0 	.word	0x200002f0

080008c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000908:	4a20      	ldr	r2, [pc, #128]	; (800098c <MX_TIM1_Init+0xa4>)
 800090a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM1_Init+0xa0>)
 800090e:	22d7      	movs	r2, #215	; 0xd7
 8000910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_TIM1_Init+0xa0>)
 800091a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_TIM1_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000934:	f001 fdbe 	bl	80024b4 <HAL_TIM_Base_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800093e:	f7ff ff1d 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000950:	f001 ffa0 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800095a:	f7ff ff0f 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM1_Init+0xa0>)
 8000970:	f002 f9c6 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800097a:	f7ff feff 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000080 	.word	0x20000080
 800098c:	40010000 	.word	0x40010000

08000990 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009d8:	f001 fd6c 	bl	80024b4 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009e2:	f7ff fecb 	bl	800077c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_TIM2_Init+0x98>)
 80009f4:	f001 ff4e 	bl	8002894 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009fe:	f7ff febd 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_TIM2_Init+0x98>)
 8000a10:	f002 f976 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f7ff feaf 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000cc 	.word	0x200000cc

08000a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a1a      	ldr	r2, [pc, #104]	; (8000aa4 <HAL_TIM_Base_MspInit+0x78>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d114      	bne.n	8000a68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2101      	movs	r1, #1
 8000a5a:	2019      	movs	r0, #25
 8000a5c:	f000 fa3b 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a60:	2019      	movs	r0, #25
 8000a62:	f000 fa54 	bl	8000f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a66:	e018      	b.n	8000a9a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d113      	bne.n	8000a9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	201c      	movs	r0, #28
 8000a90:	f000 fa21 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a94:	201c      	movs	r0, #28
 8000a96:	f000 fa3a 	bl	8000f0e <HAL_NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	40023800 	.word	0x40023800

08000aac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_USART3_UART_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x58>)
 8000af0:	f002 f9b2 	bl	8002e58 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000afa:	f7ff fe3f 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000118 	.word	0x20000118
 8000b08:	40004800 	.word	0x40004800

08000b0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ae      	sub	sp, #184	; 0xb8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2290      	movs	r2, #144	; 0x90
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fe9f 	bl	8003870 <memset>
  if(uartHandle->Instance==USART3)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <HAL_UART_MspInit+0xb4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d13c      	bne.n	8000bb6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f88a 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b56:	f7ff fe11 	bl	800077c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0xb8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0xbc>)
 8000bb2:	f000 f9c7 	bl	8000f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	37b8      	adds	r7, #184	; 0xb8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd2:	490e      	ldr	r1, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be8:	4c0b      	ldr	r4, [pc, #44]	; (8000c18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff fe65 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 fe47 	bl	800388c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd0d 	bl	800061c <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c10:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8000c14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c18:	200002ec 	.word	0x200002ec

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>

08000c1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f94c 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f805 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2e:	f7ff fdab 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f967 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	200001a0 	.word	0x200001a0

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200001a0 	.word	0x200001a0

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	05fa0000 	.word	0x05fa0000

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e175      	b.n	8001250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8164 	bne.w	800124a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x56>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80be 	beq.w	800124a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_GPIO_Init+0x328>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d037      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x21a>
 800115a:	2309      	movs	r3, #9
 800115c:	e012      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800115e:	230a      	movs	r3, #10
 8001160:	e010      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001162:	2308      	movs	r3, #8
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001166:	2307      	movs	r3, #7
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x328>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae86 	bls.w	8000f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_PWREx_EnableOverDrive+0x98>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_PWREx_EnableOverDrive+0x98>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_PWREx_EnableOverDrive+0x98>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ca:	f7ff fcf9 	bl	8000cc0 <HAL_GetTick>
 80012ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d0:	e009      	b.n	80012e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012d2:	f7ff fcf5 	bl	8000cc0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e0:	d901      	bls.n	80012e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e022      	b.n	800132c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d1ee      	bne.n	80012d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff fcde 	bl	8000cc0 <HAL_GetTick>
 8001304:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001306:	e009      	b.n	800131c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001308:	f7ff fcda 	bl	8000cc0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001316:	d901      	bls.n	800131c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e007      	b.n	800132c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001328:	d1ee      	bne.n	8001308 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e29b      	b.n	800188a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8087 	beq.w	800146e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001360:	4b96      	ldr	r3, [pc, #600]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b04      	cmp	r3, #4
 800136a:	d00c      	beq.n	8001386 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136c:	4b93      	ldr	r3, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d112      	bne.n	800139e <HAL_RCC_OscConfig+0x62>
 8001378:	4b90      	ldr	r3, [pc, #576]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001386:	4b8d      	ldr	r3, [pc, #564]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d06c      	beq.n	800146c <HAL_RCC_OscConfig+0x130>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d168      	bne.n	800146c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e275      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x7a>
 80013a8:	4b84      	ldr	r3, [pc, #528]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a83      	ldr	r2, [pc, #524]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e02e      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x9c>
 80013be:	4b7f      	ldr	r3, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a7e      	ldr	r2, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7b      	ldr	r2, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0xc0>
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b73      	ldr	r3, [pc, #460]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a72      	ldr	r2, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xd8>
 80013fc:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6b      	ldr	r2, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fc50 	bl	8000cc0 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc4c 	bl	8000cc0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e229      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b61      	ldr	r3, [pc, #388]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc3c 	bl	8000cc0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc38 	bl	8000cc0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e215      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x110>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d069      	beq.n	800154e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x190>
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1e9      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	493d      	ldr	r1, [pc, #244]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e040      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a38      	ldr	r2, [pc, #224]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fbee 	bl	8000cc0 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fbea 	bl	8000cc0 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e1c7      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4929      	ldr	r1, [pc, #164]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
 800151a:	e018      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001522:	f023 0301 	bic.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fbca 	bl	8000cc0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001530:	f7ff fbc6 	bl	8000cc0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1a3      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d038      	beq.n	80015cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d019      	beq.n	8001596 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fba7 	bl	8000cc0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fba3 	bl	8000cc0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e180      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x23a>
 8001594:	e01a      	b.n	80015cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 8001598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x280>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb8d 	bl	8000cc0 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb89 	bl	8000cc0 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d903      	bls.n	80015c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e166      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
 80015bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a4 	beq.w	8001722 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b8c      	ldr	r3, [pc, #560]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a88      	ldr	r2, [pc, #544]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b86      	ldr	r3, [pc, #536]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800160e:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7f      	ldr	r2, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb51 	bl	8000cc0 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fb4d 	bl	8000cc0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e12a      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b76      	ldr	r3, [pc, #472]	; (8001810 <HAL_RCC_OscConfig+0x4d4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x31a>
 8001648:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a6f      	ldr	r2, [pc, #444]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x33c>
 800165e:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a67      	ldr	r2, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x35e>
 8001680:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a61      	ldr	r2, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a5e      	ldr	r2, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
 800169a:	4b5c      	ldr	r3, [pc, #368]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb01 	bl	8000cc0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fafd 	bl	8000cc0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0d8      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x386>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff faeb 	bl	8000cc0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fae7 	bl	8000cc0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0c2      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a3c      	ldr	r2, [pc, #240]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80ae 	beq.w	8001888 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d06d      	beq.n	8001814 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d14b      	bne.n	80017d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fab8 	bl	8000cc0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fab4 	bl	8000cc0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e091      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69da      	ldr	r2, [r3, #28]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	019b      	lsls	r3, r3, #6
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	061b      	lsls	r3, r3, #24
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	071b      	lsls	r3, r3, #28
 800179e:	491b      	ldr	r1, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff fa86 	bl	8000cc0 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa82 	bl	8000cc0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e05f      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x47c>
 80017d6:	e057      	b.n	8001888 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 80017de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa6c 	bl	8000cc0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fa68 	bl	8000cc0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e045      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_RCC_OscConfig+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x4b0>
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x54c>
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_RCC_OscConfig+0x558>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d030      	beq.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d129      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d122      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184c:	4293      	cmp	r3, r2
 800184e:	d119      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d10f      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d0      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b6a      	ldr	r3, [pc, #424]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 030f 	and.w	r3, r3, #15
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d910      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 020f 	bic.w	r2, r3, #15
 80018c6:	4965      	ldr	r1, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d040      	beq.n	80019bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e073      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06b      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198c:	f7ff f998 	bl	8000cc0 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f994 	bl	8000cc0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e053      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d210      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4922      	ldr	r1, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1cc>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1d0>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1d4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f8f4 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08004198 	.word	0x08004198
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b090      	sub	sp, #64	; 0x40
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80a1 	bhi.w	8001bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e09b      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa8:	e09b      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aae:	e098      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001aba:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d028      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001adc:	fb03 f201 	mul.w	r2, r3, r1
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	fb00 f303 	mul.w	r3, r0, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a43      	ldr	r2, [pc, #268]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aea:	fba0 1202 	umull	r1, r2, r0, r2
 8001aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001af0:	460a      	mov	r2, r1
 8001af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	4413      	add	r3, r2
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afc:	2200      	movs	r2, #0
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	61fa      	str	r2, [r7, #28]
 8001b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b0a:	f7fe fbf1 	bl	80002f0 <__aeabi_uldivmod>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4613      	mov	r3, r2
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b16:	e053      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b18:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	617a      	str	r2, [r7, #20]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b2a:	f04f 0b00 	mov.w	fp, #0
 8001b2e:	4652      	mov	r2, sl
 8001b30:	465b      	mov	r3, fp
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	0159      	lsls	r1, r3, #5
 8001b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b40:	0150      	lsls	r0, r2, #5
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	ebb2 080a 	subs.w	r8, r2, sl
 8001b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b62:	ebb2 0408 	subs.w	r4, r2, r8
 8001b66:	eb63 0509 	sbc.w	r5, r3, r9
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	00eb      	lsls	r3, r5, #3
 8001b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b78:	00e2      	lsls	r2, r4, #3
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	eb14 030a 	adds.w	r3, r4, sl
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	eb45 030b 	adc.w	r3, r5, fp
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	2200      	movs	r2, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	60fa      	str	r2, [r7, #12]
 8001bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb4:	f7fe fb9c 	bl	80002f0 <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bda:	e002      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3740      	adds	r7, #64	; 0x40
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	017d7840 	.word	0x017d7840

08001bfc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a9b      	lsrs	r3, r3, #10
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	080041a8 	.word	0x080041a8

08001c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c40:	f7ff ffdc 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0b5b      	lsrs	r3, r3, #13
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	080041a8 	.word	0x080041a8

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d012      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c8c:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a68      	ldr	r2, [pc, #416]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c96:	6093      	str	r3, [r2, #8]
 8001c98:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	4964      	ldr	r1, [pc, #400]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d017      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	4959      	ldr	r1, [pc, #356]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d017      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	494a      	ldr	r1, [pc, #296]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d18:	d101      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 808b 	beq.w	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	; 0x40
 8001d54:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d6c:	f7fe ffa8 	bl	8000cc0 <HAL_GetTick>
 8001d70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7fe ffa4 	bl	8000cc0 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e38f      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d035      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d02e      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001db8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d114      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe ff6c 	bl	8000cc0 <HAL_GetTick>
 8001de8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7fe ff68 	bl	8000cc0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e351      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ee      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e1a:	d111      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	4901      	ldr	r1, [pc, #4]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	0ffffcff 	.word	0x0ffffcff
 8001e40:	4bac      	ldr	r3, [pc, #688]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4aab      	ldr	r2, [pc, #684]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e4a:	6093      	str	r3, [r2, #8]
 8001e4c:	4ba9      	ldr	r3, [pc, #676]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	49a6      	ldr	r1, [pc, #664]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e6a:	4ba2      	ldr	r3, [pc, #648]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e70:	4aa0      	ldr	r2, [pc, #640]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e7a:	4b9e      	ldr	r3, [pc, #632]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	499b      	ldr	r1, [pc, #620]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e98:	4b96      	ldr	r3, [pc, #600]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea6:	4993      	ldr	r1, [pc, #588]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eba:	4b8e      	ldr	r3, [pc, #568]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec8:	498a      	ldr	r1, [pc, #552]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001edc:	4b85      	ldr	r3, [pc, #532]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eea:	4982      	ldr	r1, [pc, #520]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001efe:	4b7d      	ldr	r3, [pc, #500]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4979      	ldr	r1, [pc, #484]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f20:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4971      	ldr	r1, [pc, #452]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f42:	4b6c      	ldr	r3, [pc, #432]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f023 020c 	bic.w	r2, r3, #12
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	4968      	ldr	r1, [pc, #416]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f64:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4960      	ldr	r1, [pc, #384]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f94:	4957      	ldr	r1, [pc, #348]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	494f      	ldr	r1, [pc, #316]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4946      	ldr	r1, [pc, #280]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fec:	4b41      	ldr	r3, [pc, #260]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	493e      	ldr	r1, [pc, #248]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800200e:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201c:	4935      	ldr	r1, [pc, #212]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800203e:	492d      	ldr	r1, [pc, #180]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d011      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002060:	4924      	ldr	r1, [pc, #144]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800206c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a0:	4914      	ldr	r1, [pc, #80]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c4:	490b      	ldr	r1, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00f      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e8:	4902      	ldr	r1, [pc, #8]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020f0:	e002      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	4986      	ldr	r1, [pc, #536]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002128:	4b81      	ldr	r3, [pc, #516]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002138:	497d      	ldr	r1, [pc, #500]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d006      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80d6 	beq.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002154:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a75      	ldr	r2, [pc, #468]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002160:	f7fe fdae 	bl	8000cc0 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002168:	f7fe fdaa 	bl	8000cc0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e195      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800217a:	4b6d      	ldr	r3, [pc, #436]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d021      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11d      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800219a:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800219c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021a8:	4b61      	ldr	r3, [pc, #388]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ae:	0e1b      	lsrs	r3, r3, #24
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	019a      	lsls	r2, r3, #6
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	071b      	lsls	r3, r3, #28
 80021ce:	4958      	ldr	r1, [pc, #352]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02e      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002200:	d129      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002202:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002216:	0f1b      	lsrs	r3, r3, #28
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	019a      	lsls	r2, r3, #6
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	493e      	ldr	r1, [pc, #248]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800223e:	4b3c      	ldr	r3, [pc, #240]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002244:	f023 021f 	bic.w	r2, r3, #31
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	3b01      	subs	r3, #1
 800224e:	4938      	ldr	r1, [pc, #224]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01d      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002262:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002276:	0f1b      	lsrs	r3, r3, #28
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	019a      	lsls	r2, r3, #6
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	041b      	lsls	r3, r3, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	431a      	orrs	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	4926      	ldr	r1, [pc, #152]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d011      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	019a      	lsls	r2, r3, #6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	071b      	lsls	r3, r3, #28
 80022c6:	491a      	ldr	r1, [pc, #104]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022da:	f7fe fcf1 	bl	8000cc0 <HAL_GetTick>
 80022de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022e2:	f7fe fced 	bl	8000cc0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0d8      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 80ce 	bne.w	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002314:	f7fe fcd4 	bl	8000cc0 <HAL_GetTick>
 8002318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800231a:	e00b      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800231c:	f7fe fcd0 	bl	8000cc0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d904      	bls.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0bb      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002334:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800233c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002340:	d0ec      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800235e:	2b00      	cmp	r3, #0
 8002360:	d02e      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d12a      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800236a:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	0f1b      	lsrs	r3, r3, #28
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	019a      	lsls	r2, r3, #6
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	041b      	lsls	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	061b      	lsls	r3, r3, #24
 8002398:	431a      	orrs	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	071b      	lsls	r3, r3, #28
 800239e:	4944      	ldr	r1, [pc, #272]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	3b01      	subs	r3, #1
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	493d      	ldr	r1, [pc, #244]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d022      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d4:	d11d      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	0e1b      	lsrs	r3, r3, #24
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	0f1b      	lsrs	r3, r3, #28
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	019a      	lsls	r2, r3, #6
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	041b      	lsls	r3, r3, #16
 80023fe:	431a      	orrs	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	061b      	lsls	r3, r3, #24
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	071b      	lsls	r3, r3, #28
 800240a:	4929      	ldr	r1, [pc, #164]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d028      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	0e1b      	lsrs	r3, r3, #24
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	019a      	lsls	r2, r3, #6
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	431a      	orrs	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	071b      	lsls	r3, r3, #28
 8002452:	4917      	ldr	r1, [pc, #92]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	4911      	ldr	r1, [pc, #68]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe fc20 	bl	8000cc0 <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002484:	f7fe fc1c 	bl	8000cc0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e007      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800249e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a2:	d1ef      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e049      	b.n	800255a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe faa6 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 faca 	bl	8002a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e054      	b.n	8002626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_TIM_Base_Start_IT+0xd0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d01d      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_TIM_Base_Start_IT+0xd4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a21      	ldr	r2, [pc, #132]	; (800263c <HAL_TIM_Base_Start_IT+0xd8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <HAL_TIM_Base_Start_IT+0xdc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <HAL_TIM_Base_Start_IT+0xe0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <HAL_TIM_Base_Start_IT+0xe4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_TIM_Base_Start_IT+0xe8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d115      	bne.n	8002610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_TIM_Base_Start_IT+0xec>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d015      	beq.n	8002622 <HAL_TIM_Base_Start_IT+0xbe>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d011      	beq.n	8002622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0201 	orr.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800260e:	e008      	b.n	8002622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e000      	b.n	8002624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40010400 	.word	0x40010400
 8002648:	40014000 	.word	0x40014000
 800264c:	40001800 	.word	0x40001800
 8002650:	00010007 	.word	0x00010007

08002654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f9da 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9cc 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f9dd 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0204 	mvn.w	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f9b0 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9a2 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f9b3 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0208 	mvn.w	r2, #8
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f986 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f978 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f989 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f95c 	bl	8002a50 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f94e 	bl	8002a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f95f 	bl	8002a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f928 	bl	8002a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fb16 	bl	8002e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002812:	d10e      	bne.n	8002832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d107      	bne.n	8002832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800282a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fb09 	bl	8002e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d10e      	bne.n	800285e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d107      	bne.n	800285e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f90d 	bl	8002a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d10e      	bne.n	800288a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	d107      	bne.n	800288a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0220 	mvn.w	r2, #32
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fac9 	bl	8002e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0b4      	b.n	8002a1a <HAL_TIM_ConfigClockSource+0x186>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_TIM_ConfigClockSource+0x190>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e8:	d03e      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0xd4>
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ee:	f200 8087 	bhi.w	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	f000 8086 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x172>
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d87f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b70      	cmp	r3, #112	; 0x70
 8002902:	d01a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xa6>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d87b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b60      	cmp	r3, #96	; 0x60
 800290a:	d050      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0x11a>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d877      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d03c      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xfa>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d873      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d058      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x13a>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d86f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d064      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d86b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d060      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d867      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05c      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b10      	cmp	r3, #16
 8002936:	d05a      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	e062      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	f000 f9b9 	bl	8002cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800295c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	609a      	str	r2, [r3, #8]
      break;
 8002966:	e04f      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	f000 f9a2 	bl	8002cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298a:	609a      	str	r2, [r3, #8]
      break;
 800298c:	e03c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800299a:	461a      	mov	r2, r3
 800299c:	f000 f916 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f96f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029ac:	e02c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 f935 	bl	8002c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2160      	movs	r1, #96	; 0x60
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f95f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029cc:	e01c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 f8f6 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f94f 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f000 f946 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	fffeff88 	.word	0xfffeff88

08002a28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d00f      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <TIM_Base_SetConfig+0x118>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00b      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <TIM_Base_SetConfig+0x11c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <TIM_Base_SetConfig+0x120>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d108      	bne.n	8002ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d027      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2c      	ldr	r2, [pc, #176]	; (8002ba4 <TIM_Base_SetConfig+0x118>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d023      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <TIM_Base_SetConfig+0x11c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d01f      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <TIM_Base_SetConfig+0x120>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d017      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <TIM_Base_SetConfig+0x128>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <TIM_Base_SetConfig+0x12c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00f      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <TIM_Base_SetConfig+0x130>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <TIM_Base_SetConfig+0x134>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a24      	ldr	r2, [pc, #144]	; (8002bc4 <TIM_Base_SetConfig+0x138>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <TIM_Base_SetConfig+0x13c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <TIM_Base_SetConfig+0x114>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <TIM_Base_SetConfig+0xf8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0c      	ldr	r2, [pc, #48]	; (8002bb0 <TIM_Base_SetConfig+0x124>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d103      	bne.n	8002b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	615a      	str	r2, [r3, #20]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	40001800 	.word	0x40001800
 8002bc4:	40001c00 	.word	0x40001c00
 8002bc8:	40002000 	.word	0x40002000

08002bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 030a 	bic.w	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0210 	bic.w	r2, r3, #16
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f043 0307 	orr.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	021a      	lsls	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e06d      	b.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d01d      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d018      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d013      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00e      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10c      	bne.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	40010000 	.word	0x40010000
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	40014000 	.word	0x40014000
 8002e18:	40001800 	.word	0x40001800

08002e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e040      	b.n	8002eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fe46 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8b0 	bl	8002ffc <UART_SetConfig>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fb08 	bl	80034c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb8f 	bl	8003608 <UART_CheckIdleState>
 8002eea:	4603      	mov	r3, r0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d171      	bne.n	8002ff0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_UART_Transmit+0x24>
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e06a      	b.n	8002ff2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2221      	movs	r2, #33	; 0x21
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f2a:	f7fd fec9 	bl	8000cc0 <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	88fa      	ldrh	r2, [r7, #6]
 8002f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d108      	bne.n	8002f5c <HAL_UART_Transmit+0x68>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e003      	b.n	8002f64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f64:	e02c      	b.n	8002fc0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fb96 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e038      	b.n	8002ff2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e007      	b.n	8002fae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1cc      	bne.n	8002f66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb63 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e005      	b.n	8002ff2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4ba6      	ldr	r3, [pc, #664]	; (80032c0 <UART_SetConfig+0x2c4>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6979      	ldr	r1, [r7, #20]
 8003030:	430b      	orrs	r3, r1
 8003032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a94      	ldr	r2, [pc, #592]	; (80032c4 <UART_SetConfig+0x2c8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d120      	bne.n	80030ba <UART_SetConfig+0xbe>
 8003078:	4b93      	ldr	r3, [pc, #588]	; (80032c8 <UART_SetConfig+0x2cc>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b03      	cmp	r3, #3
 8003084:	d816      	bhi.n	80030b4 <UART_SetConfig+0xb8>
 8003086:	a201      	add	r2, pc, #4	; (adr r2, 800308c <UART_SetConfig+0x90>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030a3 	.word	0x080030a3
 8003098:	080030af 	.word	0x080030af
 800309c:	2301      	movs	r3, #1
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e150      	b.n	8003344 <UART_SetConfig+0x348>
 80030a2:	2302      	movs	r3, #2
 80030a4:	77fb      	strb	r3, [r7, #31]
 80030a6:	e14d      	b.n	8003344 <UART_SetConfig+0x348>
 80030a8:	2304      	movs	r3, #4
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e14a      	b.n	8003344 <UART_SetConfig+0x348>
 80030ae:	2308      	movs	r3, #8
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e147      	b.n	8003344 <UART_SetConfig+0x348>
 80030b4:	2310      	movs	r3, #16
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e144      	b.n	8003344 <UART_SetConfig+0x348>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a83      	ldr	r2, [pc, #524]	; (80032cc <UART_SetConfig+0x2d0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d132      	bne.n	800312a <UART_SetConfig+0x12e>
 80030c4:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <UART_SetConfig+0x2cc>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d828      	bhi.n	8003124 <UART_SetConfig+0x128>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0xdc>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	0800310d 	.word	0x0800310d
 80030dc:	08003125 	.word	0x08003125
 80030e0:	08003125 	.word	0x08003125
 80030e4:	08003125 	.word	0x08003125
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003125 	.word	0x08003125
 80030f0:	08003125 	.word	0x08003125
 80030f4:	08003125 	.word	0x08003125
 80030f8:	08003113 	.word	0x08003113
 80030fc:	08003125 	.word	0x08003125
 8003100:	08003125 	.word	0x08003125
 8003104:	08003125 	.word	0x08003125
 8003108:	0800311f 	.word	0x0800311f
 800310c:	2300      	movs	r3, #0
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e118      	b.n	8003344 <UART_SetConfig+0x348>
 8003112:	2302      	movs	r3, #2
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e115      	b.n	8003344 <UART_SetConfig+0x348>
 8003118:	2304      	movs	r3, #4
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e112      	b.n	8003344 <UART_SetConfig+0x348>
 800311e:	2308      	movs	r3, #8
 8003120:	77fb      	strb	r3, [r7, #31]
 8003122:	e10f      	b.n	8003344 <UART_SetConfig+0x348>
 8003124:	2310      	movs	r3, #16
 8003126:	77fb      	strb	r3, [r7, #31]
 8003128:	e10c      	b.n	8003344 <UART_SetConfig+0x348>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a68      	ldr	r2, [pc, #416]	; (80032d0 <UART_SetConfig+0x2d4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d120      	bne.n	8003176 <UART_SetConfig+0x17a>
 8003134:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <UART_SetConfig+0x2cc>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800313e:	2b30      	cmp	r3, #48	; 0x30
 8003140:	d013      	beq.n	800316a <UART_SetConfig+0x16e>
 8003142:	2b30      	cmp	r3, #48	; 0x30
 8003144:	d814      	bhi.n	8003170 <UART_SetConfig+0x174>
 8003146:	2b20      	cmp	r3, #32
 8003148:	d009      	beq.n	800315e <UART_SetConfig+0x162>
 800314a:	2b20      	cmp	r3, #32
 800314c:	d810      	bhi.n	8003170 <UART_SetConfig+0x174>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <UART_SetConfig+0x15c>
 8003152:	2b10      	cmp	r3, #16
 8003154:	d006      	beq.n	8003164 <UART_SetConfig+0x168>
 8003156:	e00b      	b.n	8003170 <UART_SetConfig+0x174>
 8003158:	2300      	movs	r3, #0
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0f2      	b.n	8003344 <UART_SetConfig+0x348>
 800315e:	2302      	movs	r3, #2
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e0ef      	b.n	8003344 <UART_SetConfig+0x348>
 8003164:	2304      	movs	r3, #4
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	e0ec      	b.n	8003344 <UART_SetConfig+0x348>
 800316a:	2308      	movs	r3, #8
 800316c:	77fb      	strb	r3, [r7, #31]
 800316e:	e0e9      	b.n	8003344 <UART_SetConfig+0x348>
 8003170:	2310      	movs	r3, #16
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e0e6      	b.n	8003344 <UART_SetConfig+0x348>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <UART_SetConfig+0x2d8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d120      	bne.n	80031c2 <UART_SetConfig+0x1c6>
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <UART_SetConfig+0x2cc>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800318a:	2bc0      	cmp	r3, #192	; 0xc0
 800318c:	d013      	beq.n	80031b6 <UART_SetConfig+0x1ba>
 800318e:	2bc0      	cmp	r3, #192	; 0xc0
 8003190:	d814      	bhi.n	80031bc <UART_SetConfig+0x1c0>
 8003192:	2b80      	cmp	r3, #128	; 0x80
 8003194:	d009      	beq.n	80031aa <UART_SetConfig+0x1ae>
 8003196:	2b80      	cmp	r3, #128	; 0x80
 8003198:	d810      	bhi.n	80031bc <UART_SetConfig+0x1c0>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <UART_SetConfig+0x1a8>
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d006      	beq.n	80031b0 <UART_SetConfig+0x1b4>
 80031a2:	e00b      	b.n	80031bc <UART_SetConfig+0x1c0>
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e0cc      	b.n	8003344 <UART_SetConfig+0x348>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e0c9      	b.n	8003344 <UART_SetConfig+0x348>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e0c6      	b.n	8003344 <UART_SetConfig+0x348>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e0c3      	b.n	8003344 <UART_SetConfig+0x348>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e0c0      	b.n	8003344 <UART_SetConfig+0x348>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a44      	ldr	r2, [pc, #272]	; (80032d8 <UART_SetConfig+0x2dc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d125      	bne.n	8003218 <UART_SetConfig+0x21c>
 80031cc:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <UART_SetConfig+0x2cc>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031da:	d017      	beq.n	800320c <UART_SetConfig+0x210>
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e0:	d817      	bhi.n	8003212 <UART_SetConfig+0x216>
 80031e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e6:	d00b      	beq.n	8003200 <UART_SetConfig+0x204>
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ec:	d811      	bhi.n	8003212 <UART_SetConfig+0x216>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <UART_SetConfig+0x1fe>
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f6:	d006      	beq.n	8003206 <UART_SetConfig+0x20a>
 80031f8:	e00b      	b.n	8003212 <UART_SetConfig+0x216>
 80031fa:	2300      	movs	r3, #0
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e0a1      	b.n	8003344 <UART_SetConfig+0x348>
 8003200:	2302      	movs	r3, #2
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e09e      	b.n	8003344 <UART_SetConfig+0x348>
 8003206:	2304      	movs	r3, #4
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e09b      	b.n	8003344 <UART_SetConfig+0x348>
 800320c:	2308      	movs	r3, #8
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e098      	b.n	8003344 <UART_SetConfig+0x348>
 8003212:	2310      	movs	r3, #16
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e095      	b.n	8003344 <UART_SetConfig+0x348>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <UART_SetConfig+0x2e0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d125      	bne.n	800326e <UART_SetConfig+0x272>
 8003222:	4b29      	ldr	r3, [pc, #164]	; (80032c8 <UART_SetConfig+0x2cc>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800322c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003230:	d017      	beq.n	8003262 <UART_SetConfig+0x266>
 8003232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003236:	d817      	bhi.n	8003268 <UART_SetConfig+0x26c>
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	d00b      	beq.n	8003256 <UART_SetConfig+0x25a>
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003242:	d811      	bhi.n	8003268 <UART_SetConfig+0x26c>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <UART_SetConfig+0x254>
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d006      	beq.n	800325c <UART_SetConfig+0x260>
 800324e:	e00b      	b.n	8003268 <UART_SetConfig+0x26c>
 8003250:	2301      	movs	r3, #1
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e076      	b.n	8003344 <UART_SetConfig+0x348>
 8003256:	2302      	movs	r3, #2
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e073      	b.n	8003344 <UART_SetConfig+0x348>
 800325c:	2304      	movs	r3, #4
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e070      	b.n	8003344 <UART_SetConfig+0x348>
 8003262:	2308      	movs	r3, #8
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e06d      	b.n	8003344 <UART_SetConfig+0x348>
 8003268:	2310      	movs	r3, #16
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e06a      	b.n	8003344 <UART_SetConfig+0x348>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <UART_SetConfig+0x2e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d138      	bne.n	80032ea <UART_SetConfig+0x2ee>
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <UART_SetConfig+0x2cc>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003282:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003286:	d017      	beq.n	80032b8 <UART_SetConfig+0x2bc>
 8003288:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800328c:	d82a      	bhi.n	80032e4 <UART_SetConfig+0x2e8>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003292:	d00b      	beq.n	80032ac <UART_SetConfig+0x2b0>
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d824      	bhi.n	80032e4 <UART_SetConfig+0x2e8>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <UART_SetConfig+0x2aa>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d006      	beq.n	80032b2 <UART_SetConfig+0x2b6>
 80032a4:	e01e      	b.n	80032e4 <UART_SetConfig+0x2e8>
 80032a6:	2300      	movs	r3, #0
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e04b      	b.n	8003344 <UART_SetConfig+0x348>
 80032ac:	2302      	movs	r3, #2
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e048      	b.n	8003344 <UART_SetConfig+0x348>
 80032b2:	2304      	movs	r3, #4
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e045      	b.n	8003344 <UART_SetConfig+0x348>
 80032b8:	2308      	movs	r3, #8
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e042      	b.n	8003344 <UART_SetConfig+0x348>
 80032be:	bf00      	nop
 80032c0:	efff69f3 	.word	0xefff69f3
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40004400 	.word	0x40004400
 80032d0:	40004800 	.word	0x40004800
 80032d4:	40004c00 	.word	0x40004c00
 80032d8:	40005000 	.word	0x40005000
 80032dc:	40011400 	.word	0x40011400
 80032e0:	40007800 	.word	0x40007800
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e02c      	b.n	8003344 <UART_SetConfig+0x348>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a72      	ldr	r2, [pc, #456]	; (80034b8 <UART_SetConfig+0x4bc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x344>
 80032f4:	4b71      	ldr	r3, [pc, #452]	; (80034bc <UART_SetConfig+0x4c0>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x338>
 8003304:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x33e>
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x32c>
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x33e>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x326>
 800331a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x332>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x33e>
 8003322:	2300      	movs	r3, #0
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e00d      	b.n	8003344 <UART_SetConfig+0x348>
 8003328:	2302      	movs	r3, #2
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e00a      	b.n	8003344 <UART_SetConfig+0x348>
 800332e:	2304      	movs	r3, #4
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e007      	b.n	8003344 <UART_SetConfig+0x348>
 8003334:	2308      	movs	r3, #8
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e004      	b.n	8003344 <UART_SetConfig+0x348>
 800333a:	2310      	movs	r3, #16
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e001      	b.n	8003344 <UART_SetConfig+0x348>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800334c:	d15b      	bne.n	8003406 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800334e:	7ffb      	ldrb	r3, [r7, #31]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d828      	bhi.n	80033a6 <UART_SetConfig+0x3aa>
 8003354:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x360>)
 8003356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335a:	bf00      	nop
 800335c:	08003381 	.word	0x08003381
 8003360:	08003389 	.word	0x08003389
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a7 	.word	0x080033a7
 800336c:	08003397 	.word	0x08003397
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033a7 	.word	0x080033a7
 8003378:	080033a7 	.word	0x080033a7
 800337c:	0800339f 	.word	0x0800339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003380:	f7fe fc48 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 8003384:	61b8      	str	r0, [r7, #24]
        break;
 8003386:	e013      	b.n	80033b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7fe fc58 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 800338c:	61b8      	str	r0, [r7, #24]
        break;
 800338e:	e00f      	b.n	80033b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <UART_SetConfig+0x4c4>)
 8003392:	61bb      	str	r3, [r7, #24]
        break;
 8003394:	e00c      	b.n	80033b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7fe fb6b 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 800339a:	61b8      	str	r0, [r7, #24]
        break;
 800339c:	e008      	b.n	80033b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	61bb      	str	r3, [r7, #24]
        break;
 80033a4:	e004      	b.n	80033b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	77bb      	strb	r3, [r7, #30]
        break;
 80033ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d074      	beq.n	80034a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	005a      	lsls	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	d916      	bls.n	8003400 <UART_SetConfig+0x404>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d212      	bcs.n	8003400 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f023 030f 	bic.w	r3, r3, #15
 80033e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	89fa      	ldrh	r2, [r7, #14]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	e04f      	b.n	80034a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	77bb      	strb	r3, [r7, #30]
 8003404:	e04c      	b.n	80034a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d828      	bhi.n	800345e <UART_SetConfig+0x462>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <UART_SetConfig+0x418>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003439 	.word	0x08003439
 8003418:	08003441 	.word	0x08003441
 800341c:	08003449 	.word	0x08003449
 8003420:	0800345f 	.word	0x0800345f
 8003424:	0800344f 	.word	0x0800344f
 8003428:	0800345f 	.word	0x0800345f
 800342c:	0800345f 	.word	0x0800345f
 8003430:	0800345f 	.word	0x0800345f
 8003434:	08003457 	.word	0x08003457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003438:	f7fe fbec 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 800343c:	61b8      	str	r0, [r7, #24]
        break;
 800343e:	e013      	b.n	8003468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7fe fbfc 	bl	8001c3c <HAL_RCC_GetPCLK2Freq>
 8003444:	61b8      	str	r0, [r7, #24]
        break;
 8003446:	e00f      	b.n	8003468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <UART_SetConfig+0x4c4>)
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e00c      	b.n	8003468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7fe fb0f 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8003452:	61b8      	str	r0, [r7, #24]
        break;
 8003454:	e008      	b.n	8003468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e004      	b.n	8003468 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	77bb      	strb	r3, [r7, #30]
        break;
 8003466:	bf00      	nop
    }

    if (pclk != 0U)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	085a      	lsrs	r2, r3, #1
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d909      	bls.n	800349c <UART_SetConfig+0x4a0>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348e:	d205      	bcs.n	800349c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e001      	b.n	80034a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40007c00 	.word	0x40007c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400

080034c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c2:	d10a      	bne.n	80035da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003618:	f7fd fb52 	bl	8000cc0 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d10e      	bne.n	800364a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f831 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e027      	b.n	800369a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d10e      	bne.n	8003676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f81b 	bl	80036a2 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e011      	b.n	800369a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b09c      	sub	sp, #112	; 0x70
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b2:	e0a7      	b.n	8003804 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	f000 80a3 	beq.w	8003804 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fd faff 	bl	8000cc0 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80036ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13f      	bne.n	8003754 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e8:	667b      	str	r3, [r7, #100]	; 0x64
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e6      	bne.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3308      	adds	r3, #8
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	663b      	str	r3, [r7, #96]	; 0x60
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3308      	adds	r3, #8
 8003724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003726:	64ba      	str	r2, [r7, #72]	; 0x48
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e068      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d050      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003770:	d148      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
 800379c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e6      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3308      	adds	r3, #8
 80037b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	613b      	str	r3, [r7, #16]
   return(result);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037ce:	623a      	str	r2, [r7, #32]
 80037d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	69f9      	ldr	r1, [r7, #28]
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	61bb      	str	r3, [r7, #24]
   return(result);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e010      	b.n	8003826 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	f43f af48 	beq.w	80036b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3770      	adds	r7, #112	; 0x70
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <siprintf>:
 8003830:	b40e      	push	{r1, r2, r3}
 8003832:	b500      	push	{lr}
 8003834:	b09c      	sub	sp, #112	; 0x70
 8003836:	ab1d      	add	r3, sp, #116	; 0x74
 8003838:	9002      	str	r0, [sp, #8]
 800383a:	9006      	str	r0, [sp, #24]
 800383c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003840:	4809      	ldr	r0, [pc, #36]	; (8003868 <siprintf+0x38>)
 8003842:	9107      	str	r1, [sp, #28]
 8003844:	9104      	str	r1, [sp, #16]
 8003846:	4909      	ldr	r1, [pc, #36]	; (800386c <siprintf+0x3c>)
 8003848:	f853 2b04 	ldr.w	r2, [r3], #4
 800384c:	9105      	str	r1, [sp, #20]
 800384e:	6800      	ldr	r0, [r0, #0]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	a902      	add	r1, sp, #8
 8003854:	f000 f992 	bl	8003b7c <_svfiprintf_r>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	b01c      	add	sp, #112	; 0x70
 8003860:	f85d eb04 	ldr.w	lr, [sp], #4
 8003864:	b003      	add	sp, #12
 8003866:	4770      	bx	lr
 8003868:	20000058 	.word	0x20000058
 800386c:	ffff0208 	.word	0xffff0208

08003870 <memset>:
 8003870:	4402      	add	r2, r0
 8003872:	4603      	mov	r3, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	d100      	bne.n	800387a <memset+0xa>
 8003878:	4770      	bx	lr
 800387a:	f803 1b01 	strb.w	r1, [r3], #1
 800387e:	e7f9      	b.n	8003874 <memset+0x4>

08003880 <__errno>:
 8003880:	4b01      	ldr	r3, [pc, #4]	; (8003888 <__errno+0x8>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000058 	.word	0x20000058

0800388c <__libc_init_array>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	4d0d      	ldr	r5, [pc, #52]	; (80038c4 <__libc_init_array+0x38>)
 8003890:	4c0d      	ldr	r4, [pc, #52]	; (80038c8 <__libc_init_array+0x3c>)
 8003892:	1b64      	subs	r4, r4, r5
 8003894:	10a4      	asrs	r4, r4, #2
 8003896:	2600      	movs	r6, #0
 8003898:	42a6      	cmp	r6, r4
 800389a:	d109      	bne.n	80038b0 <__libc_init_array+0x24>
 800389c:	4d0b      	ldr	r5, [pc, #44]	; (80038cc <__libc_init_array+0x40>)
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__libc_init_array+0x44>)
 80038a0:	f000 fc6a 	bl	8004178 <_init>
 80038a4:	1b64      	subs	r4, r4, r5
 80038a6:	10a4      	asrs	r4, r4, #2
 80038a8:	2600      	movs	r6, #0
 80038aa:	42a6      	cmp	r6, r4
 80038ac:	d105      	bne.n	80038ba <__libc_init_array+0x2e>
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b4:	4798      	blx	r3
 80038b6:	3601      	adds	r6, #1
 80038b8:	e7ee      	b.n	8003898 <__libc_init_array+0xc>
 80038ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80038be:	4798      	blx	r3
 80038c0:	3601      	adds	r6, #1
 80038c2:	e7f2      	b.n	80038aa <__libc_init_array+0x1e>
 80038c4:	080041ec 	.word	0x080041ec
 80038c8:	080041ec 	.word	0x080041ec
 80038cc:	080041ec 	.word	0x080041ec
 80038d0:	080041f0 	.word	0x080041f0

080038d4 <__retarget_lock_acquire_recursive>:
 80038d4:	4770      	bx	lr

080038d6 <__retarget_lock_release_recursive>:
 80038d6:	4770      	bx	lr

080038d8 <_free_r>:
 80038d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038da:	2900      	cmp	r1, #0
 80038dc:	d044      	beq.n	8003968 <_free_r+0x90>
 80038de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e2:	9001      	str	r0, [sp, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f1a1 0404 	sub.w	r4, r1, #4
 80038ea:	bfb8      	it	lt
 80038ec:	18e4      	addlt	r4, r4, r3
 80038ee:	f000 f8df 	bl	8003ab0 <__malloc_lock>
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <_free_r+0x94>)
 80038f4:	9801      	ldr	r0, [sp, #4]
 80038f6:	6813      	ldr	r3, [r2, #0]
 80038f8:	b933      	cbnz	r3, 8003908 <_free_r+0x30>
 80038fa:	6063      	str	r3, [r4, #4]
 80038fc:	6014      	str	r4, [r2, #0]
 80038fe:	b003      	add	sp, #12
 8003900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003904:	f000 b8da 	b.w	8003abc <__malloc_unlock>
 8003908:	42a3      	cmp	r3, r4
 800390a:	d908      	bls.n	800391e <_free_r+0x46>
 800390c:	6825      	ldr	r5, [r4, #0]
 800390e:	1961      	adds	r1, r4, r5
 8003910:	428b      	cmp	r3, r1
 8003912:	bf01      	itttt	eq
 8003914:	6819      	ldreq	r1, [r3, #0]
 8003916:	685b      	ldreq	r3, [r3, #4]
 8003918:	1949      	addeq	r1, r1, r5
 800391a:	6021      	streq	r1, [r4, #0]
 800391c:	e7ed      	b.n	80038fa <_free_r+0x22>
 800391e:	461a      	mov	r2, r3
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	b10b      	cbz	r3, 8003928 <_free_r+0x50>
 8003924:	42a3      	cmp	r3, r4
 8003926:	d9fa      	bls.n	800391e <_free_r+0x46>
 8003928:	6811      	ldr	r1, [r2, #0]
 800392a:	1855      	adds	r5, r2, r1
 800392c:	42a5      	cmp	r5, r4
 800392e:	d10b      	bne.n	8003948 <_free_r+0x70>
 8003930:	6824      	ldr	r4, [r4, #0]
 8003932:	4421      	add	r1, r4
 8003934:	1854      	adds	r4, r2, r1
 8003936:	42a3      	cmp	r3, r4
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	d1e0      	bne.n	80038fe <_free_r+0x26>
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	6053      	str	r3, [r2, #4]
 8003942:	440c      	add	r4, r1
 8003944:	6014      	str	r4, [r2, #0]
 8003946:	e7da      	b.n	80038fe <_free_r+0x26>
 8003948:	d902      	bls.n	8003950 <_free_r+0x78>
 800394a:	230c      	movs	r3, #12
 800394c:	6003      	str	r3, [r0, #0]
 800394e:	e7d6      	b.n	80038fe <_free_r+0x26>
 8003950:	6825      	ldr	r5, [r4, #0]
 8003952:	1961      	adds	r1, r4, r5
 8003954:	428b      	cmp	r3, r1
 8003956:	bf04      	itt	eq
 8003958:	6819      	ldreq	r1, [r3, #0]
 800395a:	685b      	ldreq	r3, [r3, #4]
 800395c:	6063      	str	r3, [r4, #4]
 800395e:	bf04      	itt	eq
 8003960:	1949      	addeq	r1, r1, r5
 8003962:	6021      	streq	r1, [r4, #0]
 8003964:	6054      	str	r4, [r2, #4]
 8003966:	e7ca      	b.n	80038fe <_free_r+0x26>
 8003968:	b003      	add	sp, #12
 800396a:	bd30      	pop	{r4, r5, pc}
 800396c:	200002e4 	.word	0x200002e4

08003970 <sbrk_aligned>:
 8003970:	b570      	push	{r4, r5, r6, lr}
 8003972:	4e0e      	ldr	r6, [pc, #56]	; (80039ac <sbrk_aligned+0x3c>)
 8003974:	460c      	mov	r4, r1
 8003976:	6831      	ldr	r1, [r6, #0]
 8003978:	4605      	mov	r5, r0
 800397a:	b911      	cbnz	r1, 8003982 <sbrk_aligned+0x12>
 800397c:	f000 fba6 	bl	80040cc <_sbrk_r>
 8003980:	6030      	str	r0, [r6, #0]
 8003982:	4621      	mov	r1, r4
 8003984:	4628      	mov	r0, r5
 8003986:	f000 fba1 	bl	80040cc <_sbrk_r>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d00a      	beq.n	80039a4 <sbrk_aligned+0x34>
 800398e:	1cc4      	adds	r4, r0, #3
 8003990:	f024 0403 	bic.w	r4, r4, #3
 8003994:	42a0      	cmp	r0, r4
 8003996:	d007      	beq.n	80039a8 <sbrk_aligned+0x38>
 8003998:	1a21      	subs	r1, r4, r0
 800399a:	4628      	mov	r0, r5
 800399c:	f000 fb96 	bl	80040cc <_sbrk_r>
 80039a0:	3001      	adds	r0, #1
 80039a2:	d101      	bne.n	80039a8 <sbrk_aligned+0x38>
 80039a4:	f04f 34ff 	mov.w	r4, #4294967295
 80039a8:	4620      	mov	r0, r4
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	200002e8 	.word	0x200002e8

080039b0 <_malloc_r>:
 80039b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039b4:	1ccd      	adds	r5, r1, #3
 80039b6:	f025 0503 	bic.w	r5, r5, #3
 80039ba:	3508      	adds	r5, #8
 80039bc:	2d0c      	cmp	r5, #12
 80039be:	bf38      	it	cc
 80039c0:	250c      	movcc	r5, #12
 80039c2:	2d00      	cmp	r5, #0
 80039c4:	4607      	mov	r7, r0
 80039c6:	db01      	blt.n	80039cc <_malloc_r+0x1c>
 80039c8:	42a9      	cmp	r1, r5
 80039ca:	d905      	bls.n	80039d8 <_malloc_r+0x28>
 80039cc:	230c      	movs	r3, #12
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	2600      	movs	r6, #0
 80039d2:	4630      	mov	r0, r6
 80039d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003aac <_malloc_r+0xfc>
 80039dc:	f000 f868 	bl	8003ab0 <__malloc_lock>
 80039e0:	f8d8 3000 	ldr.w	r3, [r8]
 80039e4:	461c      	mov	r4, r3
 80039e6:	bb5c      	cbnz	r4, 8003a40 <_malloc_r+0x90>
 80039e8:	4629      	mov	r1, r5
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7ff ffc0 	bl	8003970 <sbrk_aligned>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	4604      	mov	r4, r0
 80039f4:	d155      	bne.n	8003aa2 <_malloc_r+0xf2>
 80039f6:	f8d8 4000 	ldr.w	r4, [r8]
 80039fa:	4626      	mov	r6, r4
 80039fc:	2e00      	cmp	r6, #0
 80039fe:	d145      	bne.n	8003a8c <_malloc_r+0xdc>
 8003a00:	2c00      	cmp	r4, #0
 8003a02:	d048      	beq.n	8003a96 <_malloc_r+0xe6>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	4631      	mov	r1, r6
 8003a08:	4638      	mov	r0, r7
 8003a0a:	eb04 0903 	add.w	r9, r4, r3
 8003a0e:	f000 fb5d 	bl	80040cc <_sbrk_r>
 8003a12:	4581      	cmp	r9, r0
 8003a14:	d13f      	bne.n	8003a96 <_malloc_r+0xe6>
 8003a16:	6821      	ldr	r1, [r4, #0]
 8003a18:	1a6d      	subs	r5, r5, r1
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f7ff ffa7 	bl	8003970 <sbrk_aligned>
 8003a22:	3001      	adds	r0, #1
 8003a24:	d037      	beq.n	8003a96 <_malloc_r+0xe6>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	442b      	add	r3, r5
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d038      	beq.n	8003aa6 <_malloc_r+0xf6>
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	42a2      	cmp	r2, r4
 8003a38:	d12b      	bne.n	8003a92 <_malloc_r+0xe2>
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	e00f      	b.n	8003a60 <_malloc_r+0xb0>
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	1b52      	subs	r2, r2, r5
 8003a44:	d41f      	bmi.n	8003a86 <_malloc_r+0xd6>
 8003a46:	2a0b      	cmp	r2, #11
 8003a48:	d917      	bls.n	8003a7a <_malloc_r+0xca>
 8003a4a:	1961      	adds	r1, r4, r5
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	6025      	str	r5, [r4, #0]
 8003a50:	bf18      	it	ne
 8003a52:	6059      	strne	r1, [r3, #4]
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	bf08      	it	eq
 8003a58:	f8c8 1000 	streq.w	r1, [r8]
 8003a5c:	5162      	str	r2, [r4, r5]
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	4638      	mov	r0, r7
 8003a62:	f104 060b 	add.w	r6, r4, #11
 8003a66:	f000 f829 	bl	8003abc <__malloc_unlock>
 8003a6a:	f026 0607 	bic.w	r6, r6, #7
 8003a6e:	1d23      	adds	r3, r4, #4
 8003a70:	1af2      	subs	r2, r6, r3
 8003a72:	d0ae      	beq.n	80039d2 <_malloc_r+0x22>
 8003a74:	1b9b      	subs	r3, r3, r6
 8003a76:	50a3      	str	r3, [r4, r2]
 8003a78:	e7ab      	b.n	80039d2 <_malloc_r+0x22>
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	6862      	ldr	r2, [r4, #4]
 8003a7e:	d1dd      	bne.n	8003a3c <_malloc_r+0x8c>
 8003a80:	f8c8 2000 	str.w	r2, [r8]
 8003a84:	e7ec      	b.n	8003a60 <_malloc_r+0xb0>
 8003a86:	4623      	mov	r3, r4
 8003a88:	6864      	ldr	r4, [r4, #4]
 8003a8a:	e7ac      	b.n	80039e6 <_malloc_r+0x36>
 8003a8c:	4634      	mov	r4, r6
 8003a8e:	6876      	ldr	r6, [r6, #4]
 8003a90:	e7b4      	b.n	80039fc <_malloc_r+0x4c>
 8003a92:	4613      	mov	r3, r2
 8003a94:	e7cc      	b.n	8003a30 <_malloc_r+0x80>
 8003a96:	230c      	movs	r3, #12
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f000 f80e 	bl	8003abc <__malloc_unlock>
 8003aa0:	e797      	b.n	80039d2 <_malloc_r+0x22>
 8003aa2:	6025      	str	r5, [r4, #0]
 8003aa4:	e7dc      	b.n	8003a60 <_malloc_r+0xb0>
 8003aa6:	605b      	str	r3, [r3, #4]
 8003aa8:	deff      	udf	#255	; 0xff
 8003aaa:	bf00      	nop
 8003aac:	200002e4 	.word	0x200002e4

08003ab0 <__malloc_lock>:
 8003ab0:	4801      	ldr	r0, [pc, #4]	; (8003ab8 <__malloc_lock+0x8>)
 8003ab2:	f7ff bf0f 	b.w	80038d4 <__retarget_lock_acquire_recursive>
 8003ab6:	bf00      	nop
 8003ab8:	200002e0 	.word	0x200002e0

08003abc <__malloc_unlock>:
 8003abc:	4801      	ldr	r0, [pc, #4]	; (8003ac4 <__malloc_unlock+0x8>)
 8003abe:	f7ff bf0a 	b.w	80038d6 <__retarget_lock_release_recursive>
 8003ac2:	bf00      	nop
 8003ac4:	200002e0 	.word	0x200002e0

08003ac8 <__ssputs_r>:
 8003ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003acc:	688e      	ldr	r6, [r1, #8]
 8003ace:	461f      	mov	r7, r3
 8003ad0:	42be      	cmp	r6, r7
 8003ad2:	680b      	ldr	r3, [r1, #0]
 8003ad4:	4682      	mov	sl, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	4690      	mov	r8, r2
 8003ada:	d82c      	bhi.n	8003b36 <__ssputs_r+0x6e>
 8003adc:	898a      	ldrh	r2, [r1, #12]
 8003ade:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ae2:	d026      	beq.n	8003b32 <__ssputs_r+0x6a>
 8003ae4:	6965      	ldr	r5, [r4, #20]
 8003ae6:	6909      	ldr	r1, [r1, #16]
 8003ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aec:	eba3 0901 	sub.w	r9, r3, r1
 8003af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003af4:	1c7b      	adds	r3, r7, #1
 8003af6:	444b      	add	r3, r9
 8003af8:	106d      	asrs	r5, r5, #1
 8003afa:	429d      	cmp	r5, r3
 8003afc:	bf38      	it	cc
 8003afe:	461d      	movcc	r5, r3
 8003b00:	0553      	lsls	r3, r2, #21
 8003b02:	d527      	bpl.n	8003b54 <__ssputs_r+0x8c>
 8003b04:	4629      	mov	r1, r5
 8003b06:	f7ff ff53 	bl	80039b0 <_malloc_r>
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	b360      	cbz	r0, 8003b68 <__ssputs_r+0xa0>
 8003b0e:	6921      	ldr	r1, [r4, #16]
 8003b10:	464a      	mov	r2, r9
 8003b12:	f000 faeb 	bl	80040ec <memcpy>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b20:	81a3      	strh	r3, [r4, #12]
 8003b22:	6126      	str	r6, [r4, #16]
 8003b24:	6165      	str	r5, [r4, #20]
 8003b26:	444e      	add	r6, r9
 8003b28:	eba5 0509 	sub.w	r5, r5, r9
 8003b2c:	6026      	str	r6, [r4, #0]
 8003b2e:	60a5      	str	r5, [r4, #8]
 8003b30:	463e      	mov	r6, r7
 8003b32:	42be      	cmp	r6, r7
 8003b34:	d900      	bls.n	8003b38 <__ssputs_r+0x70>
 8003b36:	463e      	mov	r6, r7
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	4632      	mov	r2, r6
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	f000 faab 	bl	8004098 <memmove>
 8003b42:	68a3      	ldr	r3, [r4, #8]
 8003b44:	1b9b      	subs	r3, r3, r6
 8003b46:	60a3      	str	r3, [r4, #8]
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	4433      	add	r3, r6
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	462a      	mov	r2, r5
 8003b56:	f000 fad7 	bl	8004108 <_realloc_r>
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d1e0      	bne.n	8003b22 <__ssputs_r+0x5a>
 8003b60:	6921      	ldr	r1, [r4, #16]
 8003b62:	4650      	mov	r0, sl
 8003b64:	f7ff feb8 	bl	80038d8 <_free_r>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	f8ca 3000 	str.w	r3, [sl]
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b74:	81a3      	strh	r3, [r4, #12]
 8003b76:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7a:	e7e9      	b.n	8003b50 <__ssputs_r+0x88>

08003b7c <_svfiprintf_r>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	4698      	mov	r8, r3
 8003b82:	898b      	ldrh	r3, [r1, #12]
 8003b84:	061b      	lsls	r3, r3, #24
 8003b86:	b09d      	sub	sp, #116	; 0x74
 8003b88:	4607      	mov	r7, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	d50e      	bpl.n	8003bae <_svfiprintf_r+0x32>
 8003b90:	690b      	ldr	r3, [r1, #16]
 8003b92:	b963      	cbnz	r3, 8003bae <_svfiprintf_r+0x32>
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	f7ff ff0b 	bl	80039b0 <_malloc_r>
 8003b9a:	6028      	str	r0, [r5, #0]
 8003b9c:	6128      	str	r0, [r5, #16]
 8003b9e:	b920      	cbnz	r0, 8003baa <_svfiprintf_r+0x2e>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba8:	e0d0      	b.n	8003d4c <_svfiprintf_r+0x1d0>
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	616b      	str	r3, [r5, #20]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bbc:	2330      	movs	r3, #48	; 0x30
 8003bbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d64 <_svfiprintf_r+0x1e8>
 8003bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bc6:	f04f 0901 	mov.w	r9, #1
 8003bca:	4623      	mov	r3, r4
 8003bcc:	469a      	mov	sl, r3
 8003bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bd2:	b10a      	cbz	r2, 8003bd8 <_svfiprintf_r+0x5c>
 8003bd4:	2a25      	cmp	r2, #37	; 0x25
 8003bd6:	d1f9      	bne.n	8003bcc <_svfiprintf_r+0x50>
 8003bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bdc:	d00b      	beq.n	8003bf6 <_svfiprintf_r+0x7a>
 8003bde:	465b      	mov	r3, fp
 8003be0:	4622      	mov	r2, r4
 8003be2:	4629      	mov	r1, r5
 8003be4:	4638      	mov	r0, r7
 8003be6:	f7ff ff6f 	bl	8003ac8 <__ssputs_r>
 8003bea:	3001      	adds	r0, #1
 8003bec:	f000 80a9 	beq.w	8003d42 <_svfiprintf_r+0x1c6>
 8003bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bf2:	445a      	add	r2, fp
 8003bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8003bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80a1 	beq.w	8003d42 <_svfiprintf_r+0x1c6>
 8003c00:	2300      	movs	r3, #0
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c0a:	f10a 0a01 	add.w	sl, sl, #1
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	9307      	str	r3, [sp, #28]
 8003c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c16:	931a      	str	r3, [sp, #104]	; 0x68
 8003c18:	4654      	mov	r4, sl
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c20:	4850      	ldr	r0, [pc, #320]	; (8003d64 <_svfiprintf_r+0x1e8>)
 8003c22:	f7fc fb15 	bl	8000250 <memchr>
 8003c26:	9a04      	ldr	r2, [sp, #16]
 8003c28:	b9d8      	cbnz	r0, 8003c62 <_svfiprintf_r+0xe6>
 8003c2a:	06d0      	lsls	r0, r2, #27
 8003c2c:	bf44      	itt	mi
 8003c2e:	2320      	movmi	r3, #32
 8003c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c34:	0711      	lsls	r1, r2, #28
 8003c36:	bf44      	itt	mi
 8003c38:	232b      	movmi	r3, #43	; 0x2b
 8003c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c42:	2b2a      	cmp	r3, #42	; 0x2a
 8003c44:	d015      	beq.n	8003c72 <_svfiprintf_r+0xf6>
 8003c46:	9a07      	ldr	r2, [sp, #28]
 8003c48:	4654      	mov	r4, sl
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f04f 0c0a 	mov.w	ip, #10
 8003c50:	4621      	mov	r1, r4
 8003c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c56:	3b30      	subs	r3, #48	; 0x30
 8003c58:	2b09      	cmp	r3, #9
 8003c5a:	d94d      	bls.n	8003cf8 <_svfiprintf_r+0x17c>
 8003c5c:	b1b0      	cbz	r0, 8003c8c <_svfiprintf_r+0x110>
 8003c5e:	9207      	str	r2, [sp, #28]
 8003c60:	e014      	b.n	8003c8c <_svfiprintf_r+0x110>
 8003c62:	eba0 0308 	sub.w	r3, r0, r8
 8003c66:	fa09 f303 	lsl.w	r3, r9, r3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	46a2      	mov	sl, r4
 8003c70:	e7d2      	b.n	8003c18 <_svfiprintf_r+0x9c>
 8003c72:	9b03      	ldr	r3, [sp, #12]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	9103      	str	r1, [sp, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfbb      	ittet	lt
 8003c7e:	425b      	neglt	r3, r3
 8003c80:	f042 0202 	orrlt.w	r2, r2, #2
 8003c84:	9307      	strge	r3, [sp, #28]
 8003c86:	9307      	strlt	r3, [sp, #28]
 8003c88:	bfb8      	it	lt
 8003c8a:	9204      	strlt	r2, [sp, #16]
 8003c8c:	7823      	ldrb	r3, [r4, #0]
 8003c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c90:	d10c      	bne.n	8003cac <_svfiprintf_r+0x130>
 8003c92:	7863      	ldrb	r3, [r4, #1]
 8003c94:	2b2a      	cmp	r3, #42	; 0x2a
 8003c96:	d134      	bne.n	8003d02 <_svfiprintf_r+0x186>
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	9203      	str	r2, [sp, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bfb8      	it	lt
 8003ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ca8:	3402      	adds	r4, #2
 8003caa:	9305      	str	r3, [sp, #20]
 8003cac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003d74 <_svfiprintf_r+0x1f8>
 8003cb0:	7821      	ldrb	r1, [r4, #0]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	4650      	mov	r0, sl
 8003cb6:	f7fc facb 	bl	8000250 <memchr>
 8003cba:	b138      	cbz	r0, 8003ccc <_svfiprintf_r+0x150>
 8003cbc:	9b04      	ldr	r3, [sp, #16]
 8003cbe:	eba0 000a 	sub.w	r0, r0, sl
 8003cc2:	2240      	movs	r2, #64	; 0x40
 8003cc4:	4082      	lsls	r2, r0
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	3401      	adds	r4, #1
 8003cca:	9304      	str	r3, [sp, #16]
 8003ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd0:	4825      	ldr	r0, [pc, #148]	; (8003d68 <_svfiprintf_r+0x1ec>)
 8003cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cd6:	2206      	movs	r2, #6
 8003cd8:	f7fc faba 	bl	8000250 <memchr>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d038      	beq.n	8003d52 <_svfiprintf_r+0x1d6>
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <_svfiprintf_r+0x1f0>)
 8003ce2:	bb1b      	cbnz	r3, 8003d2c <_svfiprintf_r+0x1b0>
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	3307      	adds	r3, #7
 8003ce8:	f023 0307 	bic.w	r3, r3, #7
 8003cec:	3308      	adds	r3, #8
 8003cee:	9303      	str	r3, [sp, #12]
 8003cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cf2:	4433      	add	r3, r6
 8003cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf6:	e768      	b.n	8003bca <_svfiprintf_r+0x4e>
 8003cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	2001      	movs	r0, #1
 8003d00:	e7a6      	b.n	8003c50 <_svfiprintf_r+0xd4>
 8003d02:	2300      	movs	r3, #0
 8003d04:	3401      	adds	r4, #1
 8003d06:	9305      	str	r3, [sp, #20]
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f04f 0c0a 	mov.w	ip, #10
 8003d0e:	4620      	mov	r0, r4
 8003d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d14:	3a30      	subs	r2, #48	; 0x30
 8003d16:	2a09      	cmp	r2, #9
 8003d18:	d903      	bls.n	8003d22 <_svfiprintf_r+0x1a6>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0c6      	beq.n	8003cac <_svfiprintf_r+0x130>
 8003d1e:	9105      	str	r1, [sp, #20]
 8003d20:	e7c4      	b.n	8003cac <_svfiprintf_r+0x130>
 8003d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d26:	4604      	mov	r4, r0
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e7f0      	b.n	8003d0e <_svfiprintf_r+0x192>
 8003d2c:	ab03      	add	r3, sp, #12
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	462a      	mov	r2, r5
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <_svfiprintf_r+0x1f4>)
 8003d34:	a904      	add	r1, sp, #16
 8003d36:	4638      	mov	r0, r7
 8003d38:	f3af 8000 	nop.w
 8003d3c:	1c42      	adds	r2, r0, #1
 8003d3e:	4606      	mov	r6, r0
 8003d40:	d1d6      	bne.n	8003cf0 <_svfiprintf_r+0x174>
 8003d42:	89ab      	ldrh	r3, [r5, #12]
 8003d44:	065b      	lsls	r3, r3, #25
 8003d46:	f53f af2d 	bmi.w	8003ba4 <_svfiprintf_r+0x28>
 8003d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d4c:	b01d      	add	sp, #116	; 0x74
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d52:	ab03      	add	r3, sp, #12
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	462a      	mov	r2, r5
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <_svfiprintf_r+0x1f4>)
 8003d5a:	a904      	add	r1, sp, #16
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f000 f879 	bl	8003e54 <_printf_i>
 8003d62:	e7eb      	b.n	8003d3c <_svfiprintf_r+0x1c0>
 8003d64:	080041b0 	.word	0x080041b0
 8003d68:	080041ba 	.word	0x080041ba
 8003d6c:	00000000 	.word	0x00000000
 8003d70:	08003ac9 	.word	0x08003ac9
 8003d74:	080041b6 	.word	0x080041b6

08003d78 <_printf_common>:
 8003d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d7c:	4616      	mov	r6, r2
 8003d7e:	4699      	mov	r9, r3
 8003d80:	688a      	ldr	r2, [r1, #8]
 8003d82:	690b      	ldr	r3, [r1, #16]
 8003d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	bfb8      	it	lt
 8003d8c:	4613      	movlt	r3, r2
 8003d8e:	6033      	str	r3, [r6, #0]
 8003d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d94:	4607      	mov	r7, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	b10a      	cbz	r2, 8003d9e <_printf_common+0x26>
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	6033      	str	r3, [r6, #0]
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	0699      	lsls	r1, r3, #26
 8003da2:	bf42      	ittt	mi
 8003da4:	6833      	ldrmi	r3, [r6, #0]
 8003da6:	3302      	addmi	r3, #2
 8003da8:	6033      	strmi	r3, [r6, #0]
 8003daa:	6825      	ldr	r5, [r4, #0]
 8003dac:	f015 0506 	ands.w	r5, r5, #6
 8003db0:	d106      	bne.n	8003dc0 <_printf_common+0x48>
 8003db2:	f104 0a19 	add.w	sl, r4, #25
 8003db6:	68e3      	ldr	r3, [r4, #12]
 8003db8:	6832      	ldr	r2, [r6, #0]
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	dc26      	bgt.n	8003e0e <_printf_common+0x96>
 8003dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003dc4:	1e13      	subs	r3, r2, #0
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	bf18      	it	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	0692      	lsls	r2, r2, #26
 8003dce:	d42b      	bmi.n	8003e28 <_printf_common+0xb0>
 8003dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	47c0      	blx	r8
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d01e      	beq.n	8003e1c <_printf_common+0xa4>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	6922      	ldr	r2, [r4, #16]
 8003de2:	f003 0306 	and.w	r3, r3, #6
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf02      	ittt	eq
 8003dea:	68e5      	ldreq	r5, [r4, #12]
 8003dec:	6833      	ldreq	r3, [r6, #0]
 8003dee:	1aed      	subeq	r5, r5, r3
 8003df0:	68a3      	ldr	r3, [r4, #8]
 8003df2:	bf0c      	ite	eq
 8003df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003df8:	2500      	movne	r5, #0
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bfc4      	itt	gt
 8003dfe:	1a9b      	subgt	r3, r3, r2
 8003e00:	18ed      	addgt	r5, r5, r3
 8003e02:	2600      	movs	r6, #0
 8003e04:	341a      	adds	r4, #26
 8003e06:	42b5      	cmp	r5, r6
 8003e08:	d11a      	bne.n	8003e40 <_printf_common+0xc8>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e008      	b.n	8003e20 <_printf_common+0xa8>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4652      	mov	r2, sl
 8003e12:	4649      	mov	r1, r9
 8003e14:	4638      	mov	r0, r7
 8003e16:	47c0      	blx	r8
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d103      	bne.n	8003e24 <_printf_common+0xac>
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e24:	3501      	adds	r5, #1
 8003e26:	e7c6      	b.n	8003db6 <_printf_common+0x3e>
 8003e28:	18e1      	adds	r1, r4, r3
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	2030      	movs	r0, #48	; 0x30
 8003e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e32:	4422      	add	r2, r4
 8003e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	e7c7      	b.n	8003dd0 <_printf_common+0x58>
 8003e40:	2301      	movs	r3, #1
 8003e42:	4622      	mov	r2, r4
 8003e44:	4649      	mov	r1, r9
 8003e46:	4638      	mov	r0, r7
 8003e48:	47c0      	blx	r8
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d0e6      	beq.n	8003e1c <_printf_common+0xa4>
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7d9      	b.n	8003e06 <_printf_common+0x8e>
	...

08003e54 <_printf_i>:
 8003e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	7e0f      	ldrb	r7, [r1, #24]
 8003e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e5c:	2f78      	cmp	r7, #120	; 0x78
 8003e5e:	4691      	mov	r9, r2
 8003e60:	4680      	mov	r8, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	469a      	mov	sl, r3
 8003e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e6a:	d807      	bhi.n	8003e7c <_printf_i+0x28>
 8003e6c:	2f62      	cmp	r7, #98	; 0x62
 8003e6e:	d80a      	bhi.n	8003e86 <_printf_i+0x32>
 8003e70:	2f00      	cmp	r7, #0
 8003e72:	f000 80d4 	beq.w	800401e <_printf_i+0x1ca>
 8003e76:	2f58      	cmp	r7, #88	; 0x58
 8003e78:	f000 80c0 	beq.w	8003ffc <_printf_i+0x1a8>
 8003e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e84:	e03a      	b.n	8003efc <_printf_i+0xa8>
 8003e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e8a:	2b15      	cmp	r3, #21
 8003e8c:	d8f6      	bhi.n	8003e7c <_printf_i+0x28>
 8003e8e:	a101      	add	r1, pc, #4	; (adr r1, 8003e94 <_printf_i+0x40>)
 8003e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003f01 	.word	0x08003f01
 8003e9c:	08003e7d 	.word	0x08003e7d
 8003ea0:	08003e7d 	.word	0x08003e7d
 8003ea4:	08003e7d 	.word	0x08003e7d
 8003ea8:	08003e7d 	.word	0x08003e7d
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08003e7d 	.word	0x08003e7d
 8003eb4:	08003e7d 	.word	0x08003e7d
 8003eb8:	08003e7d 	.word	0x08003e7d
 8003ebc:	08003e7d 	.word	0x08003e7d
 8003ec0:	08004005 	.word	0x08004005
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003fbf 	.word	0x08003fbf
 8003ecc:	08003e7d 	.word	0x08003e7d
 8003ed0:	08003e7d 	.word	0x08003e7d
 8003ed4:	08004027 	.word	0x08004027
 8003ed8:	08003e7d 	.word	0x08003e7d
 8003edc:	08003f2d 	.word	0x08003f2d
 8003ee0:	08003e7d 	.word	0x08003e7d
 8003ee4:	08003e7d 	.word	0x08003e7d
 8003ee8:	08003fc7 	.word	0x08003fc7
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	602a      	str	r2, [r5, #0]
 8003ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003efc:	2301      	movs	r3, #1
 8003efe:	e09f      	b.n	8004040 <_printf_i+0x1ec>
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	0607      	lsls	r7, r0, #24
 8003f06:	f103 0104 	add.w	r1, r3, #4
 8003f0a:	6029      	str	r1, [r5, #0]
 8003f0c:	d501      	bpl.n	8003f12 <_printf_i+0xbe>
 8003f0e:	681e      	ldr	r6, [r3, #0]
 8003f10:	e003      	b.n	8003f1a <_printf_i+0xc6>
 8003f12:	0646      	lsls	r6, r0, #25
 8003f14:	d5fb      	bpl.n	8003f0e <_printf_i+0xba>
 8003f16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	da03      	bge.n	8003f26 <_printf_i+0xd2>
 8003f1e:	232d      	movs	r3, #45	; 0x2d
 8003f20:	4276      	negs	r6, r6
 8003f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f26:	485a      	ldr	r0, [pc, #360]	; (8004090 <_printf_i+0x23c>)
 8003f28:	230a      	movs	r3, #10
 8003f2a:	e012      	b.n	8003f52 <_printf_i+0xfe>
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	1d19      	adds	r1, r3, #4
 8003f32:	6029      	str	r1, [r5, #0]
 8003f34:	0605      	lsls	r5, r0, #24
 8003f36:	d501      	bpl.n	8003f3c <_printf_i+0xe8>
 8003f38:	681e      	ldr	r6, [r3, #0]
 8003f3a:	e002      	b.n	8003f42 <_printf_i+0xee>
 8003f3c:	0641      	lsls	r1, r0, #25
 8003f3e:	d5fb      	bpl.n	8003f38 <_printf_i+0xe4>
 8003f40:	881e      	ldrh	r6, [r3, #0]
 8003f42:	4853      	ldr	r0, [pc, #332]	; (8004090 <_printf_i+0x23c>)
 8003f44:	2f6f      	cmp	r7, #111	; 0x6f
 8003f46:	bf0c      	ite	eq
 8003f48:	2308      	moveq	r3, #8
 8003f4a:	230a      	movne	r3, #10
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f52:	6865      	ldr	r5, [r4, #4]
 8003f54:	60a5      	str	r5, [r4, #8]
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	bfa2      	ittt	ge
 8003f5a:	6821      	ldrge	r1, [r4, #0]
 8003f5c:	f021 0104 	bicge.w	r1, r1, #4
 8003f60:	6021      	strge	r1, [r4, #0]
 8003f62:	b90e      	cbnz	r6, 8003f68 <_printf_i+0x114>
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	d04b      	beq.n	8004000 <_printf_i+0x1ac>
 8003f68:	4615      	mov	r5, r2
 8003f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f72:	5dc7      	ldrb	r7, [r0, r7]
 8003f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f78:	4637      	mov	r7, r6
 8003f7a:	42bb      	cmp	r3, r7
 8003f7c:	460e      	mov	r6, r1
 8003f7e:	d9f4      	bls.n	8003f6a <_printf_i+0x116>
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d10b      	bne.n	8003f9c <_printf_i+0x148>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	07de      	lsls	r6, r3, #31
 8003f88:	d508      	bpl.n	8003f9c <_printf_i+0x148>
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	6861      	ldr	r1, [r4, #4]
 8003f8e:	4299      	cmp	r1, r3
 8003f90:	bfde      	ittt	le
 8003f92:	2330      	movle	r3, #48	; 0x30
 8003f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f9c:	1b52      	subs	r2, r2, r5
 8003f9e:	6122      	str	r2, [r4, #16]
 8003fa0:	f8cd a000 	str.w	sl, [sp]
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	aa03      	add	r2, sp, #12
 8003fa8:	4621      	mov	r1, r4
 8003faa:	4640      	mov	r0, r8
 8003fac:	f7ff fee4 	bl	8003d78 <_printf_common>
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d14a      	bne.n	800404a <_printf_i+0x1f6>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	b004      	add	sp, #16
 8003fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	f043 0320 	orr.w	r3, r3, #32
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	4833      	ldr	r0, [pc, #204]	; (8004094 <_printf_i+0x240>)
 8003fc8:	2778      	movs	r7, #120	; 0x78
 8003fca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	6829      	ldr	r1, [r5, #0]
 8003fd2:	061f      	lsls	r7, r3, #24
 8003fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fd8:	d402      	bmi.n	8003fe0 <_printf_i+0x18c>
 8003fda:	065f      	lsls	r7, r3, #25
 8003fdc:	bf48      	it	mi
 8003fde:	b2b6      	uxthmi	r6, r6
 8003fe0:	07df      	lsls	r7, r3, #31
 8003fe2:	bf48      	it	mi
 8003fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8003fe8:	6029      	str	r1, [r5, #0]
 8003fea:	bf48      	it	mi
 8003fec:	6023      	strmi	r3, [r4, #0]
 8003fee:	b91e      	cbnz	r6, 8003ff8 <_printf_i+0x1a4>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	f023 0320 	bic.w	r3, r3, #32
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	e7a7      	b.n	8003f4c <_printf_i+0xf8>
 8003ffc:	4824      	ldr	r0, [pc, #144]	; (8004090 <_printf_i+0x23c>)
 8003ffe:	e7e4      	b.n	8003fca <_printf_i+0x176>
 8004000:	4615      	mov	r5, r2
 8004002:	e7bd      	b.n	8003f80 <_printf_i+0x12c>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	6826      	ldr	r6, [r4, #0]
 8004008:	6961      	ldr	r1, [r4, #20]
 800400a:	1d18      	adds	r0, r3, #4
 800400c:	6028      	str	r0, [r5, #0]
 800400e:	0635      	lsls	r5, r6, #24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	d501      	bpl.n	8004018 <_printf_i+0x1c4>
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	e002      	b.n	800401e <_printf_i+0x1ca>
 8004018:	0670      	lsls	r0, r6, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0x1c0>
 800401c:	8019      	strh	r1, [r3, #0]
 800401e:	2300      	movs	r3, #0
 8004020:	6123      	str	r3, [r4, #16]
 8004022:	4615      	mov	r5, r2
 8004024:	e7bc      	b.n	8003fa0 <_printf_i+0x14c>
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	1d1a      	adds	r2, r3, #4
 800402a:	602a      	str	r2, [r5, #0]
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	6862      	ldr	r2, [r4, #4]
 8004030:	2100      	movs	r1, #0
 8004032:	4628      	mov	r0, r5
 8004034:	f7fc f90c 	bl	8000250 <memchr>
 8004038:	b108      	cbz	r0, 800403e <_printf_i+0x1ea>
 800403a:	1b40      	subs	r0, r0, r5
 800403c:	6060      	str	r0, [r4, #4]
 800403e:	6863      	ldr	r3, [r4, #4]
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	2300      	movs	r3, #0
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004048:	e7aa      	b.n	8003fa0 <_printf_i+0x14c>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	462a      	mov	r2, r5
 800404e:	4649      	mov	r1, r9
 8004050:	4640      	mov	r0, r8
 8004052:	47d0      	blx	sl
 8004054:	3001      	adds	r0, #1
 8004056:	d0ad      	beq.n	8003fb4 <_printf_i+0x160>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	079b      	lsls	r3, r3, #30
 800405c:	d413      	bmi.n	8004086 <_printf_i+0x232>
 800405e:	68e0      	ldr	r0, [r4, #12]
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	4298      	cmp	r0, r3
 8004064:	bfb8      	it	lt
 8004066:	4618      	movlt	r0, r3
 8004068:	e7a6      	b.n	8003fb8 <_printf_i+0x164>
 800406a:	2301      	movs	r3, #1
 800406c:	4632      	mov	r2, r6
 800406e:	4649      	mov	r1, r9
 8004070:	4640      	mov	r0, r8
 8004072:	47d0      	blx	sl
 8004074:	3001      	adds	r0, #1
 8004076:	d09d      	beq.n	8003fb4 <_printf_i+0x160>
 8004078:	3501      	adds	r5, #1
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	9903      	ldr	r1, [sp, #12]
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	42ab      	cmp	r3, r5
 8004082:	dcf2      	bgt.n	800406a <_printf_i+0x216>
 8004084:	e7eb      	b.n	800405e <_printf_i+0x20a>
 8004086:	2500      	movs	r5, #0
 8004088:	f104 0619 	add.w	r6, r4, #25
 800408c:	e7f5      	b.n	800407a <_printf_i+0x226>
 800408e:	bf00      	nop
 8004090:	080041c1 	.word	0x080041c1
 8004094:	080041d2 	.word	0x080041d2

08004098 <memmove>:
 8004098:	4288      	cmp	r0, r1
 800409a:	b510      	push	{r4, lr}
 800409c:	eb01 0402 	add.w	r4, r1, r2
 80040a0:	d902      	bls.n	80040a8 <memmove+0x10>
 80040a2:	4284      	cmp	r4, r0
 80040a4:	4623      	mov	r3, r4
 80040a6:	d807      	bhi.n	80040b8 <memmove+0x20>
 80040a8:	1e43      	subs	r3, r0, #1
 80040aa:	42a1      	cmp	r1, r4
 80040ac:	d008      	beq.n	80040c0 <memmove+0x28>
 80040ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b6:	e7f8      	b.n	80040aa <memmove+0x12>
 80040b8:	4402      	add	r2, r0
 80040ba:	4601      	mov	r1, r0
 80040bc:	428a      	cmp	r2, r1
 80040be:	d100      	bne.n	80040c2 <memmove+0x2a>
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ca:	e7f7      	b.n	80040bc <memmove+0x24>

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4d06      	ldr	r5, [pc, #24]	; (80040e8 <_sbrk_r+0x1c>)
 80040d0:	2300      	movs	r3, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fc fbbe 	bl	8000858 <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	200002dc 	.word	0x200002dc

080040ec <memcpy>:
 80040ec:	440a      	add	r2, r1
 80040ee:	4291      	cmp	r1, r2
 80040f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040f4:	d100      	bne.n	80040f8 <memcpy+0xc>
 80040f6:	4770      	bx	lr
 80040f8:	b510      	push	{r4, lr}
 80040fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004102:	4291      	cmp	r1, r2
 8004104:	d1f9      	bne.n	80040fa <memcpy+0xe>
 8004106:	bd10      	pop	{r4, pc}

08004108 <_realloc_r>:
 8004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800410c:	4680      	mov	r8, r0
 800410e:	4614      	mov	r4, r2
 8004110:	460e      	mov	r6, r1
 8004112:	b921      	cbnz	r1, 800411e <_realloc_r+0x16>
 8004114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004118:	4611      	mov	r1, r2
 800411a:	f7ff bc49 	b.w	80039b0 <_malloc_r>
 800411e:	b92a      	cbnz	r2, 800412c <_realloc_r+0x24>
 8004120:	f7ff fbda 	bl	80038d8 <_free_r>
 8004124:	4625      	mov	r5, r4
 8004126:	4628      	mov	r0, r5
 8004128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800412c:	f000 f81b 	bl	8004166 <_malloc_usable_size_r>
 8004130:	4284      	cmp	r4, r0
 8004132:	4607      	mov	r7, r0
 8004134:	d802      	bhi.n	800413c <_realloc_r+0x34>
 8004136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800413a:	d812      	bhi.n	8004162 <_realloc_r+0x5a>
 800413c:	4621      	mov	r1, r4
 800413e:	4640      	mov	r0, r8
 8004140:	f7ff fc36 	bl	80039b0 <_malloc_r>
 8004144:	4605      	mov	r5, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	d0ed      	beq.n	8004126 <_realloc_r+0x1e>
 800414a:	42bc      	cmp	r4, r7
 800414c:	4622      	mov	r2, r4
 800414e:	4631      	mov	r1, r6
 8004150:	bf28      	it	cs
 8004152:	463a      	movcs	r2, r7
 8004154:	f7ff ffca 	bl	80040ec <memcpy>
 8004158:	4631      	mov	r1, r6
 800415a:	4640      	mov	r0, r8
 800415c:	f7ff fbbc 	bl	80038d8 <_free_r>
 8004160:	e7e1      	b.n	8004126 <_realloc_r+0x1e>
 8004162:	4635      	mov	r5, r6
 8004164:	e7df      	b.n	8004126 <_realloc_r+0x1e>

08004166 <_malloc_usable_size_r>:
 8004166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416a:	1f18      	subs	r0, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	bfbc      	itt	lt
 8004170:	580b      	ldrlt	r3, [r1, r0]
 8004172:	18c0      	addlt	r0, r0, r3
 8004174:	4770      	bx	lr
	...

08004178 <_init>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	bf00      	nop
 800417c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417e:	bc08      	pop	{r3}
 8004180:	469e      	mov	lr, r3
 8004182:	4770      	bx	lr

08004184 <_fini>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	bf00      	nop
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr

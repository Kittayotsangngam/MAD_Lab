
Lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a1c  08004a1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a24  08004a24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  2000005c  08004a88  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08004a88  00020444  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c832  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002278  00000000  00000000  0002c8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000712  00000000  00000000  0002f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274d3  00000000  00000000  0002fbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f618  00000000  00000000  000570b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c22  00000000  00000000  000666cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028f0  00000000  00000000  0015b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004950 	.word	0x08004950

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004950 	.word	0x08004950

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000600:	4a52      	ldr	r2, [pc, #328]	; (800074c <MX_ADC1_Init+0x160>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000604:	4b50      	ldr	r3, [pc, #320]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000606:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <MX_ADC1_Init+0x15c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b4b      	ldr	r3, [pc, #300]	; (8000748 <MX_ADC1_Init+0x15c>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b4a      	ldr	r3, [pc, #296]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b48      	ldr	r3, [pc, #288]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b46      	ldr	r3, [pc, #280]	; (8000748 <MX_ADC1_Init+0x15c>)
 800062e:	4a48      	ldr	r2, [pc, #288]	; (8000750 <MX_ADC1_Init+0x164>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b45      	ldr	r3, [pc, #276]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000638:	4b43      	ldr	r3, [pc, #268]	; (8000748 <MX_ADC1_Init+0x15c>)
 800063a:	2208      	movs	r2, #8
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	483e      	ldr	r0, [pc, #248]	; (8000748 <MX_ADC1_Init+0x15c>)
 800064e:	f000 fc65 	bl	8000f1c <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 fa80 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4836      	ldr	r0, [pc, #216]	; (8000748 <MX_ADC1_Init+0x15c>)
 800066e:	f000 fd9d 	bl	80011ac <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 fa70 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800067c:	2304      	movs	r3, #4
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	482f      	ldr	r0, [pc, #188]	; (8000748 <MX_ADC1_Init+0x15c>)
 800068a:	f000 fd8f 	bl	80011ac <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f000 fa62 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000698:	2305      	movs	r3, #5
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4828      	ldr	r0, [pc, #160]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006a6:	f000 fd81 	bl	80011ac <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f000 fa54 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006c2:	f000 fd73 	bl	80011ac <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f000 fa46 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d0:	2309      	movs	r3, #9
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006de:	f000 fd65 	bl	80011ac <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006e8:	f000 fa38 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006ec:	230a      	movs	r3, #10
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006f0:	2306      	movs	r3, #6
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006fa:	f000 fd57 	bl	80011ac <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000704:	f000 fa2a 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000708:	230c      	movs	r3, #12
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800070c:	2307      	movs	r3, #7
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000716:	f000 fd49 	bl	80011ac <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000720:	f000 fa1c 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000724:	230d      	movs	r3, #13
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000728:	2308      	movs	r3, #8
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000732:	f000 fd3b 	bl	80011ac <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800073c:	f000 fa0e 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000078 	.word	0x20000078
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a45      	ldr	r2, [pc, #276]	; (8000888 <HAL_ADC_MspInit+0x134>)
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 8084 	bne.w	8000880 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000778:	4b44      	ldr	r3, [pc, #272]	; (800088c <HAL_ADC_MspInit+0x138>)
 800077a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077c:	4a43      	ldr	r2, [pc, #268]	; (800088c <HAL_ADC_MspInit+0x138>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6453      	str	r3, [r2, #68]	; 0x44
 8000784:	4b41      	ldr	r3, [pc, #260]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b3e      	ldr	r3, [pc, #248]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a3d      	ldr	r2, [pc, #244]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <HAL_ADC_MspInit+0x138>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a37      	ldr	r2, [pc, #220]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a31      	ldr	r2, [pc, #196]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80007d8:	230d      	movs	r3, #13
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <HAL_ADC_MspInit+0x13c>)
 80007ec:	f001 fc3a 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007f0:	2378      	movs	r3, #120	; 0x78
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4824      	ldr	r0, [pc, #144]	; (8000894 <HAL_ADC_MspInit+0x140>)
 8000804:	f001 fc2e 	bl	8002064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <HAL_ADC_MspInit+0x144>)
 800081c:	f001 fc22 	bl	8002064 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0x14c>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_ADC_MspInit+0x148>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_ADC_MspInit+0x148>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_ADC_MspInit+0x148>)
 800084a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000866:	f001 f885 	bl	8001974 <HAL_DMA_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000870:	f000 f974 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000878:	639a      	str	r2, [r3, #56]	; 0x38
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_ADC_MspInit+0x148>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40012000 	.word	0x40012000
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400
 800089c:	200000c0 	.word	0x200000c0
 80008a0:	40026410 	.word	0x40026410

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_DMA_Init+0x38>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MX_DMA_Init+0x38>)
 80008b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_DMA_Init+0x38>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	2038      	movs	r0, #56	; 0x38
 80008c8:	f001 f81d 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008cc:	2038      	movs	r0, #56	; 0x38
 80008ce:	f001 f836 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_GPIO_Init+0xa4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <MX_GPIO_Init+0xa4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_GPIO_Init+0xa4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <MX_GPIO_Init+0xa4>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <MX_GPIO_Init+0xa4>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_GPIO_Init+0xa4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0xa8>)
 800095c:	f001 fd2e 	bl	80023bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_GPIO_Init+0xa8>)
 8000978:	f001 fb74 	bl	8002064 <HAL_GPIO_Init>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fa42 	bl	8000e1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f84f 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f7ff ffa1 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800099e:	f7ff ff81 	bl	80008a4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009a2:	f000 f981 	bl	8000ca8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80009a6:	f7ff fe21 	bl	80005ec <MX_ADC1_Init>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) res_adc_dma , 8);
 80009aa:	2208      	movs	r2, #8
 80009ac:	491d      	ldr	r1, [pc, #116]	; (8000a24 <main+0x98>)
 80009ae:	481e      	ldr	r0, [pc, #120]	; (8000a28 <main+0x9c>)
 80009b0:	f000 faf8 	bl	8000fa4 <HAL_ADC_Start_DMA>
  	  snprintf(dma_res_buffer,300,"R1 => CH_1: %d, CH_2: %d, CH_3: %d, CH_4: %d\r\nR2 => CH_5: %d, CH_6: %d, CH_7: %d, CH_8: %d\r\n\r\n"
  			  , res_adc_dma[0], res_adc_dma[1], res_adc_dma[2], res_adc_dma[3], res_adc_dma[4], res_adc_dma[5], res_adc_dma[6], res_adc_dma[7]);
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <main+0x98>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <main+0x98>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <main+0x98>)
 80009c0:	6892      	ldr	r2, [r2, #8]
 80009c2:	4918      	ldr	r1, [pc, #96]	; (8000a24 <main+0x98>)
 80009c4:	68c9      	ldr	r1, [r1, #12]
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0x98>)
 80009c8:	6900      	ldr	r0, [r0, #16]
 80009ca:	4c16      	ldr	r4, [pc, #88]	; (8000a24 <main+0x98>)
 80009cc:	6964      	ldr	r4, [r4, #20]
 80009ce:	4d15      	ldr	r5, [pc, #84]	; (8000a24 <main+0x98>)
 80009d0:	69ad      	ldr	r5, [r5, #24]
 80009d2:	4e14      	ldr	r6, [pc, #80]	; (8000a24 <main+0x98>)
 80009d4:	69f6      	ldr	r6, [r6, #28]
  	  snprintf(dma_res_buffer,300,"R1 => CH_1: %d, CH_2: %d, CH_3: %d, CH_4: %d\r\nR2 => CH_5: %d, CH_6: %d, CH_7: %d, CH_8: %d\r\n\r\n"
 80009d6:	9606      	str	r6, [sp, #24]
 80009d8:	9505      	str	r5, [sp, #20]
 80009da:	9404      	str	r4, [sp, #16]
 80009dc:	9003      	str	r0, [sp, #12]
 80009de:	9102      	str	r1, [sp, #8]
 80009e0:	9201      	str	r2, [sp, #4]
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <main+0xa0>)
 80009e8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <main+0xa4>)
 80009ee:	f003 faf7 	bl	8003fe0 <sniprintf>
  	  while (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET) {}
 80009f2:	bf00      	nop
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <main+0xa8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	2b40      	cmp	r3, #64	; 0x40
 8000a00:	d1f8      	bne.n	80009f4 <main+0x68>
  	  HAL_UART_Transmit(&huart3, (uint8_t*) dma_res_buffer, strlen(dma_res_buffer), 1000);
 8000a02:	480b      	ldr	r0, [pc, #44]	; (8000a30 <main+0xa4>)
 8000a04:	f7ff fc1c 	bl	8000240 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a10:	4907      	ldr	r1, [pc, #28]	; (8000a30 <main+0xa4>)
 8000a12:	4808      	ldr	r0, [pc, #32]	; (8000a34 <main+0xa8>)
 8000a14:	f002 fe46 	bl	80036a4 <HAL_UART_Transmit>
  	  HAL_Delay(500);
 8000a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1c:	f000 fa5a 	bl	8000ed4 <HAL_Delay>
    {
 8000a20:	e7c3      	b.n	80009aa <main+0x1e>
 8000a22:	bf00      	nop
 8000a24:	20000120 	.word	0x20000120
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	08004968 	.word	0x08004968
 8000a30:	20000140 	.word	0x20000140
 8000a34:	20000270 	.word	0x20000270

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	; 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fafe 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <SystemClock_Config+0xd4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <SystemClock_Config+0xd8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aa4:	23d8      	movs	r3, #216	; 0xd8
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 fce9 	bl	8002490 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ac4:	f000 f84a 	bl	8000b5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ac8:	f001 fc92 	bl	80023f0 <HAL_PWREx_EnableOverDrive>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad2:	f000 f843 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2107      	movs	r1, #7
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 ff79 	bl	80029ec <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b00:	f000 f82c 	bl	8000b5c <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3750      	adds	r7, #80	; 0x50
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8000b22:	f001 fc4b 	bl	80023bc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f000 f9d4 	bl	8000ed4 <HAL_Delay>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b46:	f001 fc39 	bl	80023bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000b4a:	2064      	movs	r0, #100	; 0x64
 8000b4c:	f000 f9c2 	bl	8000ed4 <HAL_Delay>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40020400 	.word	0x40020400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f94a 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA2_Stream0_IRQHandler+0x10>)
 8000c0a:	f000 ffc1 	bl	8001b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000c0 	.word	0x200000c0

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f003 fa06 	bl	8004058 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20080000 	.word	0x20080000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000026c 	.word	0x2000026c
 8000c80:	20000448 	.word	0x20000448

08000c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART3_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART3_UART_Init+0x58>)
 8000cec:	f002 fc8c 	bl	8003608 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f7ff ff31 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000270 	.word	0x20000270
 8000d04:	40004800 	.word	0x40004800

08000d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ae      	sub	sp, #184	; 0xb8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2290      	movs	r2, #144	; 0x90
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 f98d 	bl	8004048 <memset>
  if(uartHandle->Instance==USART3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_UART_MspInit+0xb4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d13c      	bne.n	8000db2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 f836 	bl	8002db8 <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d52:	f7ff ff03 	bl	8000b5c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da0:	2307      	movs	r3, #7
 8000da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0xbc>)
 8000dae:	f001 f959 	bl	8002064 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	37b8      	adds	r7, #184	; 0xb8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dce:	490e      	ldr	r1, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd0:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de4:	4c0b      	ldr	r4, [pc, #44]	; (8000e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df2:	f7ff ff47 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f003 f935 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fdc7 	bl	800098c <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e0c:	08004a2c 	.word	0x08004a2c
  ldr r2, =_sbss
 8000e10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e14:	20000444 	.word	0x20000444

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>

08000e1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1e:	2003      	movs	r0, #3
 8000e20:	f000 fd66 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 f805 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2a:	f7ff fe9d 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fd81 	bl	800195a <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 fd49 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200002f8 	.word	0x200002f8

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200002f8 	.word	0x200002f8

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e031      	b.n	8000f96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fc0a 	bl	8000754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_ADC_Init+0x84>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fa74 	bl	8001458 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f023 0303 	bic.w	r3, r3, #3
 8000f7e:	f043 0201 	orr.w	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
 8000f86:	e001      	b.n	8000f8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	ffffeefd 	.word	0xffffeefd

08000fa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Start_DMA+0x1e>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e0d4      	b.n	800116c <HAL_ADC_Start_DMA+0x1c8>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d018      	beq.n	800100a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000fe8:	4b62      	ldr	r3, [pc, #392]	; (8001174 <HAL_ADC_Start_DMA+0x1d0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a62      	ldr	r2, [pc, #392]	; (8001178 <HAL_ADC_Start_DMA+0x1d4>)
 8000fee:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff2:	0c9a      	lsrs	r2, r3, #18
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3b01      	subs	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f9      	bne.n	8000ffe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b01      	cmp	r3, #1
 8001016:	f040 809c 	bne.w	8001152 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800101e:	4b57      	ldr	r3, [pc, #348]	; (800117c <HAL_ADC_Start_DMA+0x1d8>)
 8001020:	4013      	ands	r3, r2
 8001022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001034:	2b00      	cmp	r3, #0
 8001036:	d007      	beq.n	8001048 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001040:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001054:	d106      	bne.n	8001064 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f023 0206 	bic.w	r2, r3, #6
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	645a      	str	r2, [r3, #68]	; 0x44
 8001062:	e002      	b.n	800106a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <HAL_ADC_Start_DMA+0x1dc>)
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <HAL_ADC_Start_DMA+0x1e0>)
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	4a40      	ldr	r2, [pc, #256]	; (8001188 <HAL_ADC_Start_DMA+0x1e4>)
 8001088:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001092:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	334c      	adds	r3, #76	; 0x4c
 80010be:	4619      	mov	r1, r3
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f000 fd04 	bl	8001ad0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_ADC_Start_DMA+0x1e8>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10f      	bne.n	80010f4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d143      	bne.n	800116a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	e03a      	b.n	800116a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a25      	ldr	r2, [pc, #148]	; (8001190 <HAL_ADC_Start_DMA+0x1ec>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10e      	bne.n	800111c <HAL_ADC_Start_DMA+0x178>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_ADC_Start_DMA+0x1e8>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	2b00      	cmp	r3, #0
 8001126:	d120      	bne.n	800116a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_ADC_Start_DMA+0x1f0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d11b      	bne.n	800116a <HAL_ADC_Start_DMA+0x1c6>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	e00b      	b.n	800116a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f043 0210 	orr.w	r2, r3, #16
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000000 	.word	0x20000000
 8001178:	431bde83 	.word	0x431bde83
 800117c:	fffff8fe 	.word	0xfffff8fe
 8001180:	0800164d 	.word	0x0800164d
 8001184:	08001707 	.word	0x08001707
 8001188:	08001723 	.word	0x08001723
 800118c:	40012300 	.word	0x40012300
 8001190:	40012000 	.word	0x40012000
 8001194:	40012200 	.word	0x40012200

08001198 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e136      	b.n	8001436 <HAL_ADC_ConfigChannel+0x28a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d93a      	bls.n	800124e <HAL_ADC_ConfigChannel+0xa2>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011e0:	d035      	beq.n	800124e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68d9      	ldr	r1, [r3, #12]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	3b1e      	subs	r3, #30
 80011f8:	2207      	movs	r2, #7
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a8d      	ldr	r2, [pc, #564]	; (8001444 <HAL_ADC_ConfigChannel+0x298>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68d9      	ldr	r1, [r3, #12]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	061a      	lsls	r2, r3, #24
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001226:	e035      	b.n	8001294 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68d9      	ldr	r1, [r3, #12]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	4603      	mov	r3, r0
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4403      	add	r3, r0
 8001240:	3b1e      	subs	r3, #30
 8001242:	409a      	lsls	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800124c:	e022      	b.n	8001294 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6919      	ldr	r1, [r3, #16]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	2207      	movs	r2, #7
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43da      	mvns	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	400a      	ands	r2, r1
 8001270:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6919      	ldr	r1, [r3, #16]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	4603      	mov	r3, r0
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4403      	add	r3, r0
 800128a:	409a      	lsls	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b06      	cmp	r3, #6
 800129a:	d824      	bhi.n	80012e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	3b05      	subs	r3, #5
 80012ae:	221f      	movs	r2, #31
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43da      	mvns	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	400a      	ands	r2, r1
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
 80012e4:	e04c      	b.n	8001380 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d824      	bhi.n	8001338 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b23      	subs	r3, #35	; 0x23
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	400a      	ands	r2, r1
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	fa00 f203 	lsl.w	r2, r0, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
 8001336:	e023      	b.n	8001380 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b41      	subs	r3, #65	; 0x41
 800134a:	221f      	movs	r2, #31
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	fa00 f203 	lsl.w	r2, r0, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a30      	ldr	r2, [pc, #192]	; (8001448 <HAL_ADC_ConfigChannel+0x29c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10a      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1f4>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 800139a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800139e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <HAL_ADC_ConfigChannel+0x29c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10f      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a25      	ldr	r2, [pc, #148]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <HAL_ADC_ConfigChannel+0x29c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d12b      	bne.n	800142c <HAL_ADC_ConfigChannel+0x280>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <HAL_ADC_ConfigChannel+0x298>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_ADC_ConfigChannel+0x23a>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b11      	cmp	r3, #17
 80013e4:	d122      	bne.n	800142c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_ADC_ConfigChannel+0x2a0>)
 80013f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_ADC_ConfigChannel+0x298>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d111      	bne.n	800142c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_ADC_ConfigChannel+0x2a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_ADC_ConfigChannel+0x2a8>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9a      	lsrs	r2, r3, #18
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800141e:	e002      	b.n	8001426 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3b01      	subs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	10000012 	.word	0x10000012
 8001448:	40012000 	.word	0x40012000
 800144c:	40012300 	.word	0x40012300
 8001450:	20000000 	.word	0x20000000
 8001454:	431bde83 	.word	0x431bde83

08001458 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <ADC_Init+0x1ec>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a77      	ldr	r2, [pc, #476]	; (8001644 <ADC_Init+0x1ec>)
 8001466:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800146a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800146c:	4b75      	ldr	r3, [pc, #468]	; (8001644 <ADC_Init+0x1ec>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4973      	ldr	r1, [pc, #460]	; (8001644 <ADC_Init+0x1ec>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	021a      	lsls	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	4a58      	ldr	r2, [pc, #352]	; (8001648 <ADC_Init+0x1f0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d022      	beq.n	8001532 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6899      	ldr	r1, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800151c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6899      	ldr	r1, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e00f      	b.n	8001552 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001550:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0202 	bic.w	r2, r2, #2
 8001560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6899      	ldr	r1, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	005a      	lsls	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800158e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800159e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	3b01      	subs	r3, #1
 80015ac:	035a      	lsls	r2, r3, #13
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	e007      	b.n	80015c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	051a      	lsls	r2, r3, #20
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6899      	ldr	r1, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800160a:	025a      	lsls	r2, r3, #9
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	029a      	lsls	r2, r3, #10
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40012300 	.word	0x40012300
 8001648:	0f000001 	.word	0x0f000001

0800164c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001662:	2b00      	cmp	r3, #0
 8001664:	d13c      	bne.n	80016e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d12b      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001684:	2b00      	cmp	r3, #0
 8001686:	d127      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d119      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0220 	bic.w	r2, r2, #32
 80016b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fa2d 	bl	8000b38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016de:	e00e      	b.n	80016fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff fd53 	bl	8001198 <HAL_ADC_ErrorCallback>
}
 80016f2:	e004      	b.n	80016fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff f9fd 	bl	8000b14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f043 0204 	orr.w	r2, r3, #4
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fd28 	bl	8001198 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	4313      	orrs	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0000 	.word	0x05fa0000

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff fa9c 	bl	8000ebc <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fa83 	bl	8000ebc <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fa77 	bl	8001f6c <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa2e 	bl	8001f00 <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	223f      	movs	r2, #63	; 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	e010803f 	.word	0xe010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e048      	b.n	8001b88 <HAL_DMA_Start_IT+0xb8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d137      	bne.n	8001b7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9c0 	bl	8001ea4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b4e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e005      	b.n	8001b86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_DMA_IRQHandler+0x248>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a8e      	ldr	r2, [pc, #568]	; (8001ddc <HAL_DMA_IRQHandler+0x24c>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2208      	movs	r2, #8
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0204 	bic.w	r2, r2, #4
 8001be2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2208      	movs	r2, #8
 8001bea:	409a      	lsls	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	2201      	movs	r2, #1
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2204      	movs	r2, #4
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2204      	movs	r2, #4
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d043      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03c      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e01f      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e016      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2220      	movs	r2, #32
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 808f 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8087 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2220      	movs	r2, #32
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d136      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0216 	bic.w	r2, r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_IRQHandler+0x1da>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	223f      	movs	r2, #63	; 0x3f
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07e      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
        }
        return;
 8001da6:	e079      	b.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
 8001dd4:	e02c      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	e01e      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10f      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0210 	bic.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d032      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d022      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d307      	bcc.n	8001e78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x2cc>
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e000      	b.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e9c:	bf00      	nop
    }
  }
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d108      	bne.n	8001ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ee2:	e007      	b.n	8001ef4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3b10      	subs	r3, #16
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <DMA_CalcBaseAndBitshift+0x60>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <DMA_CalcBaseAndBitshift+0x64>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d908      	bls.n	8001f40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <DMA_CalcBaseAndBitshift+0x68>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	1d1a      	adds	r2, r3, #4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f3e:	e006      	b.n	8001f4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <DMA_CalcBaseAndBitshift+0x68>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	aaaaaaab 	.word	0xaaaaaaab
 8001f64:	080049e0 	.word	0x080049e0
 8001f68:	fffffc00 	.word	0xfffffc00

08001f6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d856      	bhi.n	800203a <DMA_CheckFifoParam+0xce>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <DMA_CheckFifoParam+0x28>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb7 	.word	0x08001fb7
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	0800203b 	.word	0x0800203b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d046      	beq.n	800203e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e043      	b.n	800203e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fbe:	d140      	bne.n	8002042 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc4:	e03d      	b.n	8002042 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fce:	d121      	bne.n	8002014 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d837      	bhi.n	8002046 <DMA_CheckFifoParam+0xda>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <DMA_CheckFifoParam+0x70>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff3 	.word	0x08001ff3
 8001fe4:	08001fed 	.word	0x08001fed
 8001fe8:	08002005 	.word	0x08002005
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e030      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002002:	e022      	b.n	800204a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002012:	e01c      	b.n	800204e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d903      	bls.n	8002022 <DMA_CheckFifoParam+0xb6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002020:	e018      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      break;
 8002026:	e015      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
      break;
 8002038:	e00b      	b.n	8002052 <DMA_CheckFifoParam+0xe6>
      break;
 800203a:	bf00      	nop
 800203c:	e00a      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e008      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e006      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e004      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e002      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;   
 800204e:	bf00      	nop
 8002050:	e000      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
    }
  } 
  
  return status; 
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	e175      	b.n	8002370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	f040 8164 	bne.w	800236a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d005      	beq.n	80020ba <HAL_GPIO_Init+0x56>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d130      	bne.n	800211c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 0201 	and.w	r2, r3, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b03      	cmp	r3, #3
 8002126:	d017      	beq.n	8002158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d123      	bne.n	80021ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	08da      	lsrs	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3208      	adds	r2, #8
 80021a6:	69b9      	ldr	r1, [r7, #24]
 80021a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80be 	beq.w	800236a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_GPIO_Init+0x324>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002206:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_GPIO_Init+0x328>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_GPIO_Init+0x32c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d037      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_GPIO_Init+0x334>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_GPIO_Init+0x338>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a54      	ldr	r2, [pc, #336]	; (80023a0 <HAL_GPIO_Init+0x33c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <HAL_GPIO_Init+0x340>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x22a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x344>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x226>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_GPIO_Init+0x348>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x222>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_GPIO_Init+0x34c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x21e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x21a>
 800227a:	2309      	movs	r3, #9
 800227c:	e012      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800227e:	230a      	movs	r3, #10
 8002280:	e010      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002282:	2308      	movs	r3, #8
 8002284:	e00e      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002286:	2307      	movs	r3, #7
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228a:	2306      	movs	r3, #6
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x240>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	; (800238c <HAL_GPIO_Init+0x328>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_GPIO_Init+0x354>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a29      	ldr	r2, [pc, #164]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae86 	bls.w	8002084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40021c00 	.word	0x40021c00
 80023b0:	40022000 	.word	0x40022000
 80023b4:	40022400 	.word	0x40022400
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
 80023c8:	4613      	mov	r3, r2
 80023ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023d8:	e003      	b.n	80023e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	041a      	lsls	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_PWREx_EnableOverDrive+0x98>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_PWREx_EnableOverDrive+0x98>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_PWREx_EnableOverDrive+0x98>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800241e:	f7fe fd4d 	bl	8000ebc <HAL_GetTick>
 8002422:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002424:	e009      	b.n	800243a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002426:	f7fe fd49 	bl	8000ebc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002434:	d901      	bls.n	800243a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e022      	b.n	8002480 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d1ee      	bne.n	8002426 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 800244e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002452:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7fe fd32 	bl	8000ebc <HAL_GetTick>
 8002458:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800245a:	e009      	b.n	8002470 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800245c:	f7fe fd2e 	bl	8000ebc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246a:	d901      	bls.n	8002470 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e007      	b.n	8002480 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800247c:	d1ee      	bne.n	800245c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000

08002490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e29b      	b.n	80029de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8087 	beq.w	80025c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b4:	4b96      	ldr	r3, [pc, #600]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d00c      	beq.n	80024da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c0:	4b93      	ldr	r3, [pc, #588]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d112      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62>
 80024cc:	4b90      	ldr	r3, [pc, #576]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d8:	d10b      	bne.n	80024f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024da:	4b8d      	ldr	r3, [pc, #564]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d06c      	beq.n	80025c0 <HAL_RCC_OscConfig+0x130>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d168      	bne.n	80025c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e275      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x7a>
 80024fc:	4b84      	ldr	r3, [pc, #528]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a83      	ldr	r2, [pc, #524]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e02e      	b.n	8002568 <HAL_RCC_OscConfig+0xd8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x9c>
 8002512:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7e      	ldr	r2, [pc, #504]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b7c      	ldr	r3, [pc, #496]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7b      	ldr	r2, [pc, #492]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e01d      	b.n	8002568 <HAL_RCC_OscConfig+0xd8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0xc0>
 8002536:	4b76      	ldr	r3, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b73      	ldr	r3, [pc, #460]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a72      	ldr	r2, [pc, #456]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0xd8>
 8002550:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6b      	ldr	r2, [pc, #428]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fca4 	bl	8000ebc <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fca0 	bl	8000ebc <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e229      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e014      	b.n	80025c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fc90 	bl	8000ebc <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fc8c 	bl	8000ebc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e215      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	4b57      	ldr	r3, [pc, #348]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x110>
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d069      	beq.n	80026a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ce:	4b50      	ldr	r3, [pc, #320]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d11c      	bne.n	8002620 <HAL_RCC_OscConfig+0x190>
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d116      	bne.n	8002620 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_RCC_OscConfig+0x17a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d001      	beq.n	800260a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1e9      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	493d      	ldr	r1, [pc, #244]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	e040      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d023      	beq.n	8002670 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fc42 	bl	8000ebc <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fc3e 	bl	8000ebc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1c7      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b30      	ldr	r3, [pc, #192]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4929      	ldr	r1, [pc, #164]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
 800266e:	e018      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fc1e 	bl	8000ebc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002684:	f7fe fc1a 	bl	8000ebc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1a3      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d038      	beq.n	8002720 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d019      	beq.n	80026ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe fbfb 	bl	8000ebc <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fe fbf7 	bl	8000ebc <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e180      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x23a>
 80026e8:	e01a      	b.n	8002720 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <HAL_RCC_OscConfig+0x280>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe fbe1 	bl	8000ebc <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fbdd 	bl	8000ebc <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d903      	bls.n	8002714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e166      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
 8002710:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ee      	bne.n	80026fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80a4 	beq.w	8002876 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10d      	bne.n	8002756 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a88      	ldr	r2, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002756:	4b83      	ldr	r3, [pc, #524]	; (8002964 <HAL_RCC_OscConfig+0x4d4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002762:	4b80      	ldr	r3, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x4d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7f      	ldr	r2, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x4d4>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276e:	f7fe fba5 	bl	8000ebc <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002776:	f7fe fba1 	bl	8000ebc <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b64      	cmp	r3, #100	; 0x64
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e12a      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x4d4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d106      	bne.n	80027aa <HAL_RCC_OscConfig+0x31a>
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a6f      	ldr	r2, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	e02d      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x33c>
 80027b2:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	e01c      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d10c      	bne.n	80027ee <HAL_RCC_OscConfig+0x35e>
 80027d4:	4b62      	ldr	r3, [pc, #392]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a5e      	ldr	r2, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e00b      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
 80027ee:	4b5c      	ldr	r3, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a5b      	ldr	r2, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b59      	ldr	r3, [pc, #356]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d015      	beq.n	800283a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe fb55 	bl	8000ebc <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	e00a      	b.n	800282c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f7fe fb51 	bl	8000ebc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4293      	cmp	r3, r2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e0d8      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0ee      	beq.n	8002816 <HAL_RCC_OscConfig+0x386>
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283a:	f7fe fb3f 	bl	8000ebc <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fb3b 	bl	8000ebc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0c2      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80ae 	beq.w	80029dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002880:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b08      	cmp	r3, #8
 800288a:	d06d      	beq.n	8002968 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d14b      	bne.n	800292c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a31      	ldr	r2, [pc, #196]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800289a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb0c 	bl	8000ebc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fb08 	bl	8000ebc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e091      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	491b      	ldr	r1, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fada 	bl	8000ebc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fad6 	bl	8000ebc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e05f      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x47c>
 800292a:	e057      	b.n	80029dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fac0 	bl	8000ebc <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fabc 	bl	8000ebc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e045      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_RCC_OscConfig+0x4d0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x4b0>
 800295e:	e03d      	b.n	80029dc <HAL_RCC_OscConfig+0x54c>
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_RCC_OscConfig+0x558>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d030      	beq.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d129      	bne.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d122      	bne.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800299e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d119      	bne.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	3b01      	subs	r3, #1
 80029b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10f      	bne.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0d0      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	4965      	ldr	r1, [pc, #404]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d040      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d115      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b41      	ldr	r3, [pc, #260]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e073      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e06b      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4936      	ldr	r1, [pc, #216]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe f9ec 	bl	8000ebc <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe f9e8 	bl	8000ebc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e053      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d210      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	4922      	ldr	r1, [pc, #136]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1d0>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f948 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	080049c8 	.word	0x080049c8
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b090      	sub	sp, #64	; 0x40
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80a1 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e09b      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfc:	e09b      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c02:	e098      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c0e:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d028      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	627a      	str	r2, [r7, #36]	; 0x24
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c30:	fb03 f201 	mul.w	r2, r3, r1
 8002c34:	2300      	movs	r3, #0
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002c3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c44:	460a      	mov	r2, r1
 8002c46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	2200      	movs	r2, #0
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	61fa      	str	r2, [r7, #28]
 8002c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c5e:	f7fd fb47 	bl	80002f0 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4613      	mov	r3, r2
 8002c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6a:	e053      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6c:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	2200      	movs	r2, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	617a      	str	r2, [r7, #20]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c7e:	f04f 0b00 	mov.w	fp, #0
 8002c82:	4652      	mov	r2, sl
 8002c84:	465b      	mov	r3, fp
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	0159      	lsls	r1, r3, #5
 8002c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c94:	0150      	lsls	r0, r2, #5
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cb6:	ebb2 0408 	subs.w	r4, r2, r8
 8002cba:	eb63 0509 	sbc.w	r5, r3, r9
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	00eb      	lsls	r3, r5, #3
 8002cc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ccc:	00e2      	lsls	r2, r4, #3
 8002cce:	4614      	mov	r4, r2
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	eb14 030a 	adds.w	r3, r4, sl
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	eb45 030b 	adc.w	r3, r5, fp
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cea:	4629      	mov	r1, r5
 8002cec:	028b      	lsls	r3, r1, #10
 8002cee:	4621      	mov	r1, r4
 8002cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	028a      	lsls	r2, r1, #10
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	2200      	movs	r2, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	60fa      	str	r2, [r7, #12]
 8002d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d08:	f7fd faf2 	bl	80002f0 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3740      	adds	r7, #64	; 0x40
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	017d7840 	.word	0x017d7840

08002d50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000000 	.word	0x20000000

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	080049d8 	.word	0x080049d8

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d94:	f7ff ffdc 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0b5b      	lsrs	r3, r3, #13
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	080049d8 	.word	0x080049d8

08002db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d012      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002de0:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	4a68      	ldr	r2, [pc, #416]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dea:	6093      	str	r3, [r2, #8]
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	4964      	ldr	r1, [pc, #400]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d017      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e12:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	4959      	ldr	r1, [pc, #356]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e30:	d101      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e32:	2301      	movs	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d017      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	494a      	ldr	r1, [pc, #296]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 808b 	beq.w	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	4b3a      	ldr	r3, [pc, #232]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	4a39      	ldr	r2, [pc, #228]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea8:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002eb4:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec0:	f7fd fffc 	bl	8000ebc <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec8:	f7fd fff8 	bl	8000ebc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e38f      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ee6:	4b28      	ldr	r3, [pc, #160]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d035      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d02e      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f26:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d114      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fd ffc0 	bl	8000ebc <HAL_GetTick>
 8002f3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fd ffbc 	bl	8000ebc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e351      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ee      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f6e:	d111      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f7e:	400b      	ands	r3, r1
 8002f80:	4901      	ldr	r1, [pc, #4]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
 8002f86:	e00b      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	0ffffcff 	.word	0x0ffffcff
 8002f94:	4bac      	ldr	r3, [pc, #688]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4aab      	ldr	r2, [pc, #684]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f9e:	6093      	str	r3, [r2, #8]
 8002fa0:	4ba9      	ldr	r3, [pc, #676]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	49a6      	ldr	r1, [pc, #664]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fbe:	4ba2      	ldr	r3, [pc, #648]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fc4:	4aa0      	ldr	r2, [pc, #640]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fce:	4b9e      	ldr	r3, [pc, #632]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	499b      	ldr	r1, [pc, #620]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffa:	4993      	ldr	r1, [pc, #588]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800300e:	4b8e      	ldr	r3, [pc, #568]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800301c:	498a      	ldr	r1, [pc, #552]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003030:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	4982      	ldr	r1, [pc, #520]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003052:	4b7d      	ldr	r3, [pc, #500]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	4979      	ldr	r1, [pc, #484]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003074:	4b74      	ldr	r3, [pc, #464]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4971      	ldr	r1, [pc, #452]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003096:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f023 020c 	bic.w	r2, r3, #12
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a4:	4968      	ldr	r1, [pc, #416]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b8:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4960      	ldr	r1, [pc, #384]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	4957      	ldr	r1, [pc, #348]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	494f      	ldr	r1, [pc, #316]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	4946      	ldr	r1, [pc, #280]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	493e      	ldr	r1, [pc, #248]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003170:	4935      	ldr	r1, [pc, #212]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003192:	492d      	ldr	r1, [pc, #180]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d011      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031a6:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	4924      	ldr	r1, [pc, #144]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c4:	d101      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f4:	4914      	ldr	r1, [pc, #80]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003218:	490b      	ldr	r1, [pc, #44]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323c:	4902      	ldr	r1, [pc, #8]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003244:	e002      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800325e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	4986      	ldr	r1, [pc, #536]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800327c:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003282:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	497d      	ldr	r1, [pc, #500]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d006      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80d6 	beq.w	8003454 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032a8:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a75      	ldr	r2, [pc, #468]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fd fe02 	bl	8000ebc <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032bc:	f7fd fdfe 	bl	8000ebc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e195      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d021      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003302:	0e1b      	lsrs	r3, r3, #24
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	019a      	lsls	r2, r3, #6
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	431a      	orrs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4958      	ldr	r1, [pc, #352]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02e      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d129      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003356:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003364:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	0f1b      	lsrs	r3, r3, #28
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	019a      	lsls	r2, r3, #6
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	493e      	ldr	r1, [pc, #248]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003398:	f023 021f 	bic.w	r2, r3, #31
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	3b01      	subs	r3, #1
 80033a2:	4938      	ldr	r1, [pc, #224]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d01d      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033c4:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ca:	0f1b      	lsrs	r3, r3, #28
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	019a      	lsls	r2, r3, #6
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	4926      	ldr	r1, [pc, #152]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d011      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	019a      	lsls	r2, r3, #6
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	041b      	lsls	r3, r3, #16
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	071b      	lsls	r3, r3, #28
 800341a:	491a      	ldr	r1, [pc, #104]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800342c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342e:	f7fd fd45 	bl	8000ebc <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003436:	f7fd fd41 	bl	8000ebc <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b64      	cmp	r3, #100	; 0x64
 8003442:	d901      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0d8      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b01      	cmp	r3, #1
 8003458:	f040 80ce 	bne.w	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fd fd28 	bl	8000ebc <HAL_GetTick>
 800346c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800346e:	e00b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003470:	f7fd fd24 	bl	8000ebc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d904      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0bb      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003488:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003494:	d0ec      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d12a      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034be:	4b51      	ldr	r3, [pc, #324]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034cc:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	0f1b      	lsrs	r3, r3, #28
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	019a      	lsls	r2, r3, #6
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	061b      	lsls	r3, r3, #24
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	4944      	ldr	r1, [pc, #272]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034fa:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003500:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	3b01      	subs	r3, #1
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	493d      	ldr	r1, [pc, #244]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d022      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d11d      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003538:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	0f1b      	lsrs	r3, r3, #28
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	019a      	lsls	r2, r3, #6
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	431a      	orrs	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	4929      	ldr	r1, [pc, #164]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d028      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	0e1b      	lsrs	r3, r3, #24
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	019a      	lsls	r2, r3, #6
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	071b      	lsls	r3, r3, #28
 80035a6:	4917      	ldr	r1, [pc, #92]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	4911      	ldr	r1, [pc, #68]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fd fc74 	bl	8000ebc <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035d8:	f7fd fc70 	bl	8000ebc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e007      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f6:	d1ef      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800

08003608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e040      	b.n	800369c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd fb6c 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8b0 	bl	80037ac <UART_SetConfig>
 800364c:	4603      	mov	r3, r0
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e022      	b.n	800369c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fb08 	bl	8003c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb8f 	bl	8003db8 <UART_CheckIdleState>
 800369a:	4603      	mov	r3, r0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d171      	bne.n	80037a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_UART_Transmit+0x24>
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e06a      	b.n	80037a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	; 0x21
 80036d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036da:	f7fd fbef 	bl	8000ebc <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d108      	bne.n	800370c <HAL_UART_Transmit+0x68>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e003      	b.n	8003714 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003714:	e02c      	b.n	8003770 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fb96 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e038      	b.n	80037a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	3302      	adds	r3, #2
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	e007      	b.n	800375e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	781a      	ldrb	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	3301      	adds	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1cc      	bne.n	8003716 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fb63 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e005      	b.n	80037a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4ba6      	ldr	r3, [pc, #664]	; (8003a70 <UART_SetConfig+0x2c4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6979      	ldr	r1, [r7, #20]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <UART_SetConfig+0x2c8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d120      	bne.n	800386a <UART_SetConfig+0xbe>
 8003828:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <UART_SetConfig+0x2cc>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b03      	cmp	r3, #3
 8003834:	d816      	bhi.n	8003864 <UART_SetConfig+0xb8>
 8003836:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x90>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	0800384d 	.word	0x0800384d
 8003840:	08003859 	.word	0x08003859
 8003844:	08003853 	.word	0x08003853
 8003848:	0800385f 	.word	0x0800385f
 800384c:	2301      	movs	r3, #1
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e150      	b.n	8003af4 <UART_SetConfig+0x348>
 8003852:	2302      	movs	r3, #2
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e14d      	b.n	8003af4 <UART_SetConfig+0x348>
 8003858:	2304      	movs	r3, #4
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e14a      	b.n	8003af4 <UART_SetConfig+0x348>
 800385e:	2308      	movs	r3, #8
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e147      	b.n	8003af4 <UART_SetConfig+0x348>
 8003864:	2310      	movs	r3, #16
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e144      	b.n	8003af4 <UART_SetConfig+0x348>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a83      	ldr	r2, [pc, #524]	; (8003a7c <UART_SetConfig+0x2d0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d132      	bne.n	80038da <UART_SetConfig+0x12e>
 8003874:	4b80      	ldr	r3, [pc, #512]	; (8003a78 <UART_SetConfig+0x2cc>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d828      	bhi.n	80038d4 <UART_SetConfig+0x128>
 8003882:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0xdc>)
 8003884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038d5 	.word	0x080038d5
 8003890:	080038d5 	.word	0x080038d5
 8003894:	080038d5 	.word	0x080038d5
 8003898:	080038c9 	.word	0x080038c9
 800389c:	080038d5 	.word	0x080038d5
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038d5 	.word	0x080038d5
 80038a8:	080038c3 	.word	0x080038c3
 80038ac:	080038d5 	.word	0x080038d5
 80038b0:	080038d5 	.word	0x080038d5
 80038b4:	080038d5 	.word	0x080038d5
 80038b8:	080038cf 	.word	0x080038cf
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e118      	b.n	8003af4 <UART_SetConfig+0x348>
 80038c2:	2302      	movs	r3, #2
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e115      	b.n	8003af4 <UART_SetConfig+0x348>
 80038c8:	2304      	movs	r3, #4
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e112      	b.n	8003af4 <UART_SetConfig+0x348>
 80038ce:	2308      	movs	r3, #8
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e10f      	b.n	8003af4 <UART_SetConfig+0x348>
 80038d4:	2310      	movs	r3, #16
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e10c      	b.n	8003af4 <UART_SetConfig+0x348>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <UART_SetConfig+0x2d4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d120      	bne.n	8003926 <UART_SetConfig+0x17a>
 80038e4:	4b64      	ldr	r3, [pc, #400]	; (8003a78 <UART_SetConfig+0x2cc>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038ee:	2b30      	cmp	r3, #48	; 0x30
 80038f0:	d013      	beq.n	800391a <UART_SetConfig+0x16e>
 80038f2:	2b30      	cmp	r3, #48	; 0x30
 80038f4:	d814      	bhi.n	8003920 <UART_SetConfig+0x174>
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d009      	beq.n	800390e <UART_SetConfig+0x162>
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d810      	bhi.n	8003920 <UART_SetConfig+0x174>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <UART_SetConfig+0x15c>
 8003902:	2b10      	cmp	r3, #16
 8003904:	d006      	beq.n	8003914 <UART_SetConfig+0x168>
 8003906:	e00b      	b.n	8003920 <UART_SetConfig+0x174>
 8003908:	2300      	movs	r3, #0
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e0f2      	b.n	8003af4 <UART_SetConfig+0x348>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e0ef      	b.n	8003af4 <UART_SetConfig+0x348>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e0ec      	b.n	8003af4 <UART_SetConfig+0x348>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e0e9      	b.n	8003af4 <UART_SetConfig+0x348>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0e6      	b.n	8003af4 <UART_SetConfig+0x348>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <UART_SetConfig+0x2d8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d120      	bne.n	8003972 <UART_SetConfig+0x1c6>
 8003930:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <UART_SetConfig+0x2cc>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800393a:	2bc0      	cmp	r3, #192	; 0xc0
 800393c:	d013      	beq.n	8003966 <UART_SetConfig+0x1ba>
 800393e:	2bc0      	cmp	r3, #192	; 0xc0
 8003940:	d814      	bhi.n	800396c <UART_SetConfig+0x1c0>
 8003942:	2b80      	cmp	r3, #128	; 0x80
 8003944:	d009      	beq.n	800395a <UART_SetConfig+0x1ae>
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d810      	bhi.n	800396c <UART_SetConfig+0x1c0>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <UART_SetConfig+0x1a8>
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d006      	beq.n	8003960 <UART_SetConfig+0x1b4>
 8003952:	e00b      	b.n	800396c <UART_SetConfig+0x1c0>
 8003954:	2300      	movs	r3, #0
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e0cc      	b.n	8003af4 <UART_SetConfig+0x348>
 800395a:	2302      	movs	r3, #2
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e0c9      	b.n	8003af4 <UART_SetConfig+0x348>
 8003960:	2304      	movs	r3, #4
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e0c6      	b.n	8003af4 <UART_SetConfig+0x348>
 8003966:	2308      	movs	r3, #8
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e0c3      	b.n	8003af4 <UART_SetConfig+0x348>
 800396c:	2310      	movs	r3, #16
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0c0      	b.n	8003af4 <UART_SetConfig+0x348>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a44      	ldr	r2, [pc, #272]	; (8003a88 <UART_SetConfig+0x2dc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d125      	bne.n	80039c8 <UART_SetConfig+0x21c>
 800397c:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <UART_SetConfig+0x2cc>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398a:	d017      	beq.n	80039bc <UART_SetConfig+0x210>
 800398c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003990:	d817      	bhi.n	80039c2 <UART_SetConfig+0x216>
 8003992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003996:	d00b      	beq.n	80039b0 <UART_SetConfig+0x204>
 8003998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399c:	d811      	bhi.n	80039c2 <UART_SetConfig+0x216>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <UART_SetConfig+0x1fe>
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a6:	d006      	beq.n	80039b6 <UART_SetConfig+0x20a>
 80039a8:	e00b      	b.n	80039c2 <UART_SetConfig+0x216>
 80039aa:	2300      	movs	r3, #0
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e0a1      	b.n	8003af4 <UART_SetConfig+0x348>
 80039b0:	2302      	movs	r3, #2
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e09e      	b.n	8003af4 <UART_SetConfig+0x348>
 80039b6:	2304      	movs	r3, #4
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e09b      	b.n	8003af4 <UART_SetConfig+0x348>
 80039bc:	2308      	movs	r3, #8
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e098      	b.n	8003af4 <UART_SetConfig+0x348>
 80039c2:	2310      	movs	r3, #16
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e095      	b.n	8003af4 <UART_SetConfig+0x348>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2f      	ldr	r2, [pc, #188]	; (8003a8c <UART_SetConfig+0x2e0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d125      	bne.n	8003a1e <UART_SetConfig+0x272>
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <UART_SetConfig+0x2cc>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039e0:	d017      	beq.n	8003a12 <UART_SetConfig+0x266>
 80039e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039e6:	d817      	bhi.n	8003a18 <UART_SetConfig+0x26c>
 80039e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ec:	d00b      	beq.n	8003a06 <UART_SetConfig+0x25a>
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f2:	d811      	bhi.n	8003a18 <UART_SetConfig+0x26c>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <UART_SetConfig+0x254>
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d006      	beq.n	8003a0c <UART_SetConfig+0x260>
 80039fe:	e00b      	b.n	8003a18 <UART_SetConfig+0x26c>
 8003a00:	2301      	movs	r3, #1
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e076      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a06:	2302      	movs	r3, #2
 8003a08:	77fb      	strb	r3, [r7, #31]
 8003a0a:	e073      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e070      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a12:	2308      	movs	r3, #8
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e06d      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e06a      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <UART_SetConfig+0x2e4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d138      	bne.n	8003a9a <UART_SetConfig+0x2ee>
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <UART_SetConfig+0x2cc>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a36:	d017      	beq.n	8003a68 <UART_SetConfig+0x2bc>
 8003a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a3c:	d82a      	bhi.n	8003a94 <UART_SetConfig+0x2e8>
 8003a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a42:	d00b      	beq.n	8003a5c <UART_SetConfig+0x2b0>
 8003a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a48:	d824      	bhi.n	8003a94 <UART_SetConfig+0x2e8>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <UART_SetConfig+0x2aa>
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	d006      	beq.n	8003a62 <UART_SetConfig+0x2b6>
 8003a54:	e01e      	b.n	8003a94 <UART_SetConfig+0x2e8>
 8003a56:	2300      	movs	r3, #0
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e04b      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e048      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a62:	2304      	movs	r3, #4
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e045      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a68:	2308      	movs	r3, #8
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e042      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a6e:	bf00      	nop
 8003a70:	efff69f3 	.word	0xefff69f3
 8003a74:	40011000 	.word	0x40011000
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	40004800 	.word	0x40004800
 8003a84:	40004c00 	.word	0x40004c00
 8003a88:	40005000 	.word	0x40005000
 8003a8c:	40011400 	.word	0x40011400
 8003a90:	40007800 	.word	0x40007800
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e02c      	b.n	8003af4 <UART_SetConfig+0x348>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <UART_SetConfig+0x4bc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d125      	bne.n	8003af0 <UART_SetConfig+0x344>
 8003aa4:	4b71      	ldr	r3, [pc, #452]	; (8003c6c <UART_SetConfig+0x4c0>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ab2:	d017      	beq.n	8003ae4 <UART_SetConfig+0x338>
 8003ab4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ab8:	d817      	bhi.n	8003aea <UART_SetConfig+0x33e>
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abe:	d00b      	beq.n	8003ad8 <UART_SetConfig+0x32c>
 8003ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac4:	d811      	bhi.n	8003aea <UART_SetConfig+0x33e>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <UART_SetConfig+0x326>
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ace:	d006      	beq.n	8003ade <UART_SetConfig+0x332>
 8003ad0:	e00b      	b.n	8003aea <UART_SetConfig+0x33e>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e00d      	b.n	8003af4 <UART_SetConfig+0x348>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e00a      	b.n	8003af4 <UART_SetConfig+0x348>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e007      	b.n	8003af4 <UART_SetConfig+0x348>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e004      	b.n	8003af4 <UART_SetConfig+0x348>
 8003aea:	2310      	movs	r3, #16
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e001      	b.n	8003af4 <UART_SetConfig+0x348>
 8003af0:	2310      	movs	r3, #16
 8003af2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	d15b      	bne.n	8003bb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003afe:	7ffb      	ldrb	r3, [r7, #31]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d828      	bhi.n	8003b56 <UART_SetConfig+0x3aa>
 8003b04:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0x360>)
 8003b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0a:	bf00      	nop
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b41 	.word	0x08003b41
 8003b18:	08003b57 	.word	0x08003b57
 8003b1c:	08003b47 	.word	0x08003b47
 8003b20:	08003b57 	.word	0x08003b57
 8003b24:	08003b57 	.word	0x08003b57
 8003b28:	08003b57 	.word	0x08003b57
 8003b2c:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7ff f91a 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003b34:	61b8      	str	r0, [r7, #24]
        break;
 8003b36:	e013      	b.n	8003b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b38:	f7ff f92a 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	61b8      	str	r0, [r7, #24]
        break;
 8003b3e:	e00f      	b.n	8003b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b4b      	ldr	r3, [pc, #300]	; (8003c70 <UART_SetConfig+0x4c4>)
 8003b42:	61bb      	str	r3, [r7, #24]
        break;
 8003b44:	e00c      	b.n	8003b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7ff f83d 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003b4a:	61b8      	str	r0, [r7, #24]
        break;
 8003b4c:	e008      	b.n	8003b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	61bb      	str	r3, [r7, #24]
        break;
 8003b54:	e004      	b.n	8003b60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d074      	beq.n	8003c50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	005a      	lsls	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	d916      	bls.n	8003bb0 <UART_SetConfig+0x404>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	d212      	bcs.n	8003bb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f023 030f 	bic.w	r3, r3, #15
 8003b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	89fa      	ldrh	r2, [r7, #14]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	e04f      	b.n	8003c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	77bb      	strb	r3, [r7, #30]
 8003bb4:	e04c      	b.n	8003c50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d828      	bhi.n	8003c0e <UART_SetConfig+0x462>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x418>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bff 	.word	0x08003bff
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003c0f 	.word	0x08003c0f
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7ff f8be 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8003bec:	61b8      	str	r0, [r7, #24]
        break;
 8003bee:	e013      	b.n	8003c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7ff f8ce 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8003bf4:	61b8      	str	r0, [r7, #24]
        break;
 8003bf6:	e00f      	b.n	8003c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <UART_SetConfig+0x4c4>)
 8003bfa:	61bb      	str	r3, [r7, #24]
        break;
 8003bfc:	e00c      	b.n	8003c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7fe ffe1 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003c02:	61b8      	str	r0, [r7, #24]
        break;
 8003c04:	e008      	b.n	8003c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e004      	b.n	8003c18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	77bb      	strb	r3, [r7, #30]
        break;
 8003c16:	bf00      	nop
    }

    if (pclk != 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085a      	lsrs	r2, r3, #1
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b0f      	cmp	r3, #15
 8003c36:	d909      	bls.n	8003c4c <UART_SetConfig+0x4a0>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d205      	bcs.n	8003c4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e001      	b.n	8003c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40007c00 	.word	0x40007c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400

08003c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d10a      	bne.n	8003d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc8:	f7fd f878 	bl	8000ebc <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d10e      	bne.n	8003dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f831 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e027      	b.n	8003e4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d10e      	bne.n	8003e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f81b 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e011      	b.n	8003e4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b09c      	sub	sp, #112	; 0x70
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	e0a7      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	f000 80a3 	beq.w	8003fb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fd f825 	bl	8000ebc <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13f      	bne.n	8003f04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e98:	667b      	str	r3, [r7, #100]	; 0x64
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e6      	bne.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3308      	adds	r3, #8
 8003ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e5      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e068      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d050      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f20:	d148      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e6      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f7e:	623a      	str	r2, [r7, #32]
 8003f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	69f9      	ldr	r1, [r7, #28]
 8003f84:	6a3a      	ldr	r2, [r7, #32]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e010      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	f43f af48 	beq.w	8003e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3770      	adds	r7, #112	; 0x70
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <sniprintf>:
 8003fe0:	b40c      	push	{r2, r3}
 8003fe2:	b530      	push	{r4, r5, lr}
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <sniprintf+0x64>)
 8003fe6:	1e0c      	subs	r4, r1, #0
 8003fe8:	681d      	ldr	r5, [r3, #0]
 8003fea:	b09d      	sub	sp, #116	; 0x74
 8003fec:	da08      	bge.n	8004000 <sniprintf+0x20>
 8003fee:	238b      	movs	r3, #139	; 0x8b
 8003ff0:	602b      	str	r3, [r5, #0]
 8003ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff6:	b01d      	add	sp, #116	; 0x74
 8003ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ffc:	b002      	add	sp, #8
 8003ffe:	4770      	bx	lr
 8004000:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004008:	bf14      	ite	ne
 800400a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800400e:	4623      	moveq	r3, r4
 8004010:	9304      	str	r3, [sp, #16]
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004018:	9002      	str	r0, [sp, #8]
 800401a:	9006      	str	r0, [sp, #24]
 800401c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004020:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004022:	ab21      	add	r3, sp, #132	; 0x84
 8004024:	a902      	add	r1, sp, #8
 8004026:	4628      	mov	r0, r5
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	f000 f993 	bl	8004354 <_svfiprintf_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	bfbc      	itt	lt
 8004032:	238b      	movlt	r3, #139	; 0x8b
 8004034:	602b      	strlt	r3, [r5, #0]
 8004036:	2c00      	cmp	r4, #0
 8004038:	d0dd      	beq.n	8003ff6 <sniprintf+0x16>
 800403a:	9b02      	ldr	r3, [sp, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e7d9      	b.n	8003ff6 <sniprintf+0x16>
 8004042:	bf00      	nop
 8004044:	20000058 	.word	0x20000058

08004048 <memset>:
 8004048:	4402      	add	r2, r0
 800404a:	4603      	mov	r3, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	f803 1b01 	strb.w	r1, [r3], #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <__errno>:
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <__errno+0x8>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000058 	.word	0x20000058

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	4d0d      	ldr	r5, [pc, #52]	; (800409c <__libc_init_array+0x38>)
 8004068:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <__libc_init_array+0x3c>)
 800406a:	1b64      	subs	r4, r4, r5
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	2600      	movs	r6, #0
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	4d0b      	ldr	r5, [pc, #44]	; (80040a4 <__libc_init_array+0x40>)
 8004076:	4c0c      	ldr	r4, [pc, #48]	; (80040a8 <__libc_init_array+0x44>)
 8004078:	f000 fc6a 	bl	8004950 <_init>
 800407c:	1b64      	subs	r4, r4, r5
 800407e:	10a4      	asrs	r4, r4, #2
 8004080:	2600      	movs	r6, #0
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	08004a24 	.word	0x08004a24
 80040a0:	08004a24 	.word	0x08004a24
 80040a4:	08004a24 	.word	0x08004a24
 80040a8:	08004a28 	.word	0x08004a28

080040ac <__retarget_lock_acquire_recursive>:
 80040ac:	4770      	bx	lr

080040ae <__retarget_lock_release_recursive>:
 80040ae:	4770      	bx	lr

080040b0 <_free_r>:
 80040b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d044      	beq.n	8004140 <_free_r+0x90>
 80040b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ba:	9001      	str	r0, [sp, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f1a1 0404 	sub.w	r4, r1, #4
 80040c2:	bfb8      	it	lt
 80040c4:	18e4      	addlt	r4, r4, r3
 80040c6:	f000 f8df 	bl	8004288 <__malloc_lock>
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <_free_r+0x94>)
 80040cc:	9801      	ldr	r0, [sp, #4]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	b933      	cbnz	r3, 80040e0 <_free_r+0x30>
 80040d2:	6063      	str	r3, [r4, #4]
 80040d4:	6014      	str	r4, [r2, #0]
 80040d6:	b003      	add	sp, #12
 80040d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040dc:	f000 b8da 	b.w	8004294 <__malloc_unlock>
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d908      	bls.n	80040f6 <_free_r+0x46>
 80040e4:	6825      	ldr	r5, [r4, #0]
 80040e6:	1961      	adds	r1, r4, r5
 80040e8:	428b      	cmp	r3, r1
 80040ea:	bf01      	itttt	eq
 80040ec:	6819      	ldreq	r1, [r3, #0]
 80040ee:	685b      	ldreq	r3, [r3, #4]
 80040f0:	1949      	addeq	r1, r1, r5
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	e7ed      	b.n	80040d2 <_free_r+0x22>
 80040f6:	461a      	mov	r2, r3
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b10b      	cbz	r3, 8004100 <_free_r+0x50>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d9fa      	bls.n	80040f6 <_free_r+0x46>
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	1855      	adds	r5, r2, r1
 8004104:	42a5      	cmp	r5, r4
 8004106:	d10b      	bne.n	8004120 <_free_r+0x70>
 8004108:	6824      	ldr	r4, [r4, #0]
 800410a:	4421      	add	r1, r4
 800410c:	1854      	adds	r4, r2, r1
 800410e:	42a3      	cmp	r3, r4
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	d1e0      	bne.n	80040d6 <_free_r+0x26>
 8004114:	681c      	ldr	r4, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	6053      	str	r3, [r2, #4]
 800411a:	440c      	add	r4, r1
 800411c:	6014      	str	r4, [r2, #0]
 800411e:	e7da      	b.n	80040d6 <_free_r+0x26>
 8004120:	d902      	bls.n	8004128 <_free_r+0x78>
 8004122:	230c      	movs	r3, #12
 8004124:	6003      	str	r3, [r0, #0]
 8004126:	e7d6      	b.n	80040d6 <_free_r+0x26>
 8004128:	6825      	ldr	r5, [r4, #0]
 800412a:	1961      	adds	r1, r4, r5
 800412c:	428b      	cmp	r3, r1
 800412e:	bf04      	itt	eq
 8004130:	6819      	ldreq	r1, [r3, #0]
 8004132:	685b      	ldreq	r3, [r3, #4]
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	bf04      	itt	eq
 8004138:	1949      	addeq	r1, r1, r5
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	6054      	str	r4, [r2, #4]
 800413e:	e7ca      	b.n	80040d6 <_free_r+0x26>
 8004140:	b003      	add	sp, #12
 8004142:	bd30      	pop	{r4, r5, pc}
 8004144:	2000043c 	.word	0x2000043c

08004148 <sbrk_aligned>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4e0e      	ldr	r6, [pc, #56]	; (8004184 <sbrk_aligned+0x3c>)
 800414c:	460c      	mov	r4, r1
 800414e:	6831      	ldr	r1, [r6, #0]
 8004150:	4605      	mov	r5, r0
 8004152:	b911      	cbnz	r1, 800415a <sbrk_aligned+0x12>
 8004154:	f000 fba6 	bl	80048a4 <_sbrk_r>
 8004158:	6030      	str	r0, [r6, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 fba1 	bl	80048a4 <_sbrk_r>
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d00a      	beq.n	800417c <sbrk_aligned+0x34>
 8004166:	1cc4      	adds	r4, r0, #3
 8004168:	f024 0403 	bic.w	r4, r4, #3
 800416c:	42a0      	cmp	r0, r4
 800416e:	d007      	beq.n	8004180 <sbrk_aligned+0x38>
 8004170:	1a21      	subs	r1, r4, r0
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fb96 	bl	80048a4 <_sbrk_r>
 8004178:	3001      	adds	r0, #1
 800417a:	d101      	bne.n	8004180 <sbrk_aligned+0x38>
 800417c:	f04f 34ff 	mov.w	r4, #4294967295
 8004180:	4620      	mov	r0, r4
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	20000440 	.word	0x20000440

08004188 <_malloc_r>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	1ccd      	adds	r5, r1, #3
 800418e:	f025 0503 	bic.w	r5, r5, #3
 8004192:	3508      	adds	r5, #8
 8004194:	2d0c      	cmp	r5, #12
 8004196:	bf38      	it	cc
 8004198:	250c      	movcc	r5, #12
 800419a:	2d00      	cmp	r5, #0
 800419c:	4607      	mov	r7, r0
 800419e:	db01      	blt.n	80041a4 <_malloc_r+0x1c>
 80041a0:	42a9      	cmp	r1, r5
 80041a2:	d905      	bls.n	80041b0 <_malloc_r+0x28>
 80041a4:	230c      	movs	r3, #12
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	2600      	movs	r6, #0
 80041aa:	4630      	mov	r0, r6
 80041ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004284 <_malloc_r+0xfc>
 80041b4:	f000 f868 	bl	8004288 <__malloc_lock>
 80041b8:	f8d8 3000 	ldr.w	r3, [r8]
 80041bc:	461c      	mov	r4, r3
 80041be:	bb5c      	cbnz	r4, 8004218 <_malloc_r+0x90>
 80041c0:	4629      	mov	r1, r5
 80041c2:	4638      	mov	r0, r7
 80041c4:	f7ff ffc0 	bl	8004148 <sbrk_aligned>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	4604      	mov	r4, r0
 80041cc:	d155      	bne.n	800427a <_malloc_r+0xf2>
 80041ce:	f8d8 4000 	ldr.w	r4, [r8]
 80041d2:	4626      	mov	r6, r4
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	d145      	bne.n	8004264 <_malloc_r+0xdc>
 80041d8:	2c00      	cmp	r4, #0
 80041da:	d048      	beq.n	800426e <_malloc_r+0xe6>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	4631      	mov	r1, r6
 80041e0:	4638      	mov	r0, r7
 80041e2:	eb04 0903 	add.w	r9, r4, r3
 80041e6:	f000 fb5d 	bl	80048a4 <_sbrk_r>
 80041ea:	4581      	cmp	r9, r0
 80041ec:	d13f      	bne.n	800426e <_malloc_r+0xe6>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	1a6d      	subs	r5, r5, r1
 80041f2:	4629      	mov	r1, r5
 80041f4:	4638      	mov	r0, r7
 80041f6:	f7ff ffa7 	bl	8004148 <sbrk_aligned>
 80041fa:	3001      	adds	r0, #1
 80041fc:	d037      	beq.n	800426e <_malloc_r+0xe6>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	442b      	add	r3, r5
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	f8d8 3000 	ldr.w	r3, [r8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d038      	beq.n	800427e <_malloc_r+0xf6>
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	42a2      	cmp	r2, r4
 8004210:	d12b      	bne.n	800426a <_malloc_r+0xe2>
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	e00f      	b.n	8004238 <_malloc_r+0xb0>
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	1b52      	subs	r2, r2, r5
 800421c:	d41f      	bmi.n	800425e <_malloc_r+0xd6>
 800421e:	2a0b      	cmp	r2, #11
 8004220:	d917      	bls.n	8004252 <_malloc_r+0xca>
 8004222:	1961      	adds	r1, r4, r5
 8004224:	42a3      	cmp	r3, r4
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	bf18      	it	ne
 800422a:	6059      	strne	r1, [r3, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	bf08      	it	eq
 8004230:	f8c8 1000 	streq.w	r1, [r8]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4638      	mov	r0, r7
 800423a:	f104 060b 	add.w	r6, r4, #11
 800423e:	f000 f829 	bl	8004294 <__malloc_unlock>
 8004242:	f026 0607 	bic.w	r6, r6, #7
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	1af2      	subs	r2, r6, r3
 800424a:	d0ae      	beq.n	80041aa <_malloc_r+0x22>
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	50a3      	str	r3, [r4, r2]
 8004250:	e7ab      	b.n	80041aa <_malloc_r+0x22>
 8004252:	42a3      	cmp	r3, r4
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	d1dd      	bne.n	8004214 <_malloc_r+0x8c>
 8004258:	f8c8 2000 	str.w	r2, [r8]
 800425c:	e7ec      	b.n	8004238 <_malloc_r+0xb0>
 800425e:	4623      	mov	r3, r4
 8004260:	6864      	ldr	r4, [r4, #4]
 8004262:	e7ac      	b.n	80041be <_malloc_r+0x36>
 8004264:	4634      	mov	r4, r6
 8004266:	6876      	ldr	r6, [r6, #4]
 8004268:	e7b4      	b.n	80041d4 <_malloc_r+0x4c>
 800426a:	4613      	mov	r3, r2
 800426c:	e7cc      	b.n	8004208 <_malloc_r+0x80>
 800426e:	230c      	movs	r3, #12
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4638      	mov	r0, r7
 8004274:	f000 f80e 	bl	8004294 <__malloc_unlock>
 8004278:	e797      	b.n	80041aa <_malloc_r+0x22>
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	e7dc      	b.n	8004238 <_malloc_r+0xb0>
 800427e:	605b      	str	r3, [r3, #4]
 8004280:	deff      	udf	#255	; 0xff
 8004282:	bf00      	nop
 8004284:	2000043c 	.word	0x2000043c

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f7ff bf0f 	b.w	80040ac <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	20000438 	.word	0x20000438

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f7ff bf0a 	b.w	80040ae <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	20000438 	.word	0x20000438

080042a0 <__ssputs_r>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	688e      	ldr	r6, [r1, #8]
 80042a6:	461f      	mov	r7, r3
 80042a8:	42be      	cmp	r6, r7
 80042aa:	680b      	ldr	r3, [r1, #0]
 80042ac:	4682      	mov	sl, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4690      	mov	r8, r2
 80042b2:	d82c      	bhi.n	800430e <__ssputs_r+0x6e>
 80042b4:	898a      	ldrh	r2, [r1, #12]
 80042b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042ba:	d026      	beq.n	800430a <__ssputs_r+0x6a>
 80042bc:	6965      	ldr	r5, [r4, #20]
 80042be:	6909      	ldr	r1, [r1, #16]
 80042c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c4:	eba3 0901 	sub.w	r9, r3, r1
 80042c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042cc:	1c7b      	adds	r3, r7, #1
 80042ce:	444b      	add	r3, r9
 80042d0:	106d      	asrs	r5, r5, #1
 80042d2:	429d      	cmp	r5, r3
 80042d4:	bf38      	it	cc
 80042d6:	461d      	movcc	r5, r3
 80042d8:	0553      	lsls	r3, r2, #21
 80042da:	d527      	bpl.n	800432c <__ssputs_r+0x8c>
 80042dc:	4629      	mov	r1, r5
 80042de:	f7ff ff53 	bl	8004188 <_malloc_r>
 80042e2:	4606      	mov	r6, r0
 80042e4:	b360      	cbz	r0, 8004340 <__ssputs_r+0xa0>
 80042e6:	6921      	ldr	r1, [r4, #16]
 80042e8:	464a      	mov	r2, r9
 80042ea:	f000 faeb 	bl	80048c4 <memcpy>
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	6126      	str	r6, [r4, #16]
 80042fc:	6165      	str	r5, [r4, #20]
 80042fe:	444e      	add	r6, r9
 8004300:	eba5 0509 	sub.w	r5, r5, r9
 8004304:	6026      	str	r6, [r4, #0]
 8004306:	60a5      	str	r5, [r4, #8]
 8004308:	463e      	mov	r6, r7
 800430a:	42be      	cmp	r6, r7
 800430c:	d900      	bls.n	8004310 <__ssputs_r+0x70>
 800430e:	463e      	mov	r6, r7
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	4632      	mov	r2, r6
 8004314:	4641      	mov	r1, r8
 8004316:	f000 faab 	bl	8004870 <memmove>
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	4433      	add	r3, r6
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	2000      	movs	r0, #0
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	462a      	mov	r2, r5
 800432e:	f000 fad7 	bl	80048e0 <_realloc_r>
 8004332:	4606      	mov	r6, r0
 8004334:	2800      	cmp	r0, #0
 8004336:	d1e0      	bne.n	80042fa <__ssputs_r+0x5a>
 8004338:	6921      	ldr	r1, [r4, #16]
 800433a:	4650      	mov	r0, sl
 800433c:	f7ff feb8 	bl	80040b0 <_free_r>
 8004340:	230c      	movs	r3, #12
 8004342:	f8ca 3000 	str.w	r3, [sl]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e7e9      	b.n	8004328 <__ssputs_r+0x88>

08004354 <_svfiprintf_r>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	4698      	mov	r8, r3
 800435a:	898b      	ldrh	r3, [r1, #12]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	b09d      	sub	sp, #116	; 0x74
 8004360:	4607      	mov	r7, r0
 8004362:	460d      	mov	r5, r1
 8004364:	4614      	mov	r4, r2
 8004366:	d50e      	bpl.n	8004386 <_svfiprintf_r+0x32>
 8004368:	690b      	ldr	r3, [r1, #16]
 800436a:	b963      	cbnz	r3, 8004386 <_svfiprintf_r+0x32>
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	f7ff ff0b 	bl	8004188 <_malloc_r>
 8004372:	6028      	str	r0, [r5, #0]
 8004374:	6128      	str	r0, [r5, #16]
 8004376:	b920      	cbnz	r0, 8004382 <_svfiprintf_r+0x2e>
 8004378:	230c      	movs	r3, #12
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e0d0      	b.n	8004524 <_svfiprintf_r+0x1d0>
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	616b      	str	r3, [r5, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	9309      	str	r3, [sp, #36]	; 0x24
 800438a:	2320      	movs	r3, #32
 800438c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004390:	f8cd 800c 	str.w	r8, [sp, #12]
 8004394:	2330      	movs	r3, #48	; 0x30
 8004396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800453c <_svfiprintf_r+0x1e8>
 800439a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800439e:	f04f 0901 	mov.w	r9, #1
 80043a2:	4623      	mov	r3, r4
 80043a4:	469a      	mov	sl, r3
 80043a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043aa:	b10a      	cbz	r2, 80043b0 <_svfiprintf_r+0x5c>
 80043ac:	2a25      	cmp	r2, #37	; 0x25
 80043ae:	d1f9      	bne.n	80043a4 <_svfiprintf_r+0x50>
 80043b0:	ebba 0b04 	subs.w	fp, sl, r4
 80043b4:	d00b      	beq.n	80043ce <_svfiprintf_r+0x7a>
 80043b6:	465b      	mov	r3, fp
 80043b8:	4622      	mov	r2, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ff6f 	bl	80042a0 <__ssputs_r>
 80043c2:	3001      	adds	r0, #1
 80043c4:	f000 80a9 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ca:	445a      	add	r2, fp
 80043cc:	9209      	str	r2, [sp, #36]	; 0x24
 80043ce:	f89a 3000 	ldrb.w	r3, [sl]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80a1 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043d8:	2300      	movs	r3, #0
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e2:	f10a 0a01 	add.w	sl, sl, #1
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	9307      	str	r3, [sp, #28]
 80043ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ee:	931a      	str	r3, [sp, #104]	; 0x68
 80043f0:	4654      	mov	r4, sl
 80043f2:	2205      	movs	r2, #5
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	4850      	ldr	r0, [pc, #320]	; (800453c <_svfiprintf_r+0x1e8>)
 80043fa:	f7fb ff29 	bl	8000250 <memchr>
 80043fe:	9a04      	ldr	r2, [sp, #16]
 8004400:	b9d8      	cbnz	r0, 800443a <_svfiprintf_r+0xe6>
 8004402:	06d0      	lsls	r0, r2, #27
 8004404:	bf44      	itt	mi
 8004406:	2320      	movmi	r3, #32
 8004408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800440c:	0711      	lsls	r1, r2, #28
 800440e:	bf44      	itt	mi
 8004410:	232b      	movmi	r3, #43	; 0x2b
 8004412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b2a      	cmp	r3, #42	; 0x2a
 800441c:	d015      	beq.n	800444a <_svfiprintf_r+0xf6>
 800441e:	9a07      	ldr	r2, [sp, #28]
 8004420:	4654      	mov	r4, sl
 8004422:	2000      	movs	r0, #0
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4621      	mov	r1, r4
 800442a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442e:	3b30      	subs	r3, #48	; 0x30
 8004430:	2b09      	cmp	r3, #9
 8004432:	d94d      	bls.n	80044d0 <_svfiprintf_r+0x17c>
 8004434:	b1b0      	cbz	r0, 8004464 <_svfiprintf_r+0x110>
 8004436:	9207      	str	r2, [sp, #28]
 8004438:	e014      	b.n	8004464 <_svfiprintf_r+0x110>
 800443a:	eba0 0308 	sub.w	r3, r0, r8
 800443e:	fa09 f303 	lsl.w	r3, r9, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	46a2      	mov	sl, r4
 8004448:	e7d2      	b.n	80043f0 <_svfiprintf_r+0x9c>
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	1d19      	adds	r1, r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	9103      	str	r1, [sp, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfbb      	ittet	lt
 8004456:	425b      	neglt	r3, r3
 8004458:	f042 0202 	orrlt.w	r2, r2, #2
 800445c:	9307      	strge	r3, [sp, #28]
 800445e:	9307      	strlt	r3, [sp, #28]
 8004460:	bfb8      	it	lt
 8004462:	9204      	strlt	r2, [sp, #16]
 8004464:	7823      	ldrb	r3, [r4, #0]
 8004466:	2b2e      	cmp	r3, #46	; 0x2e
 8004468:	d10c      	bne.n	8004484 <_svfiprintf_r+0x130>
 800446a:	7863      	ldrb	r3, [r4, #1]
 800446c:	2b2a      	cmp	r3, #42	; 0x2a
 800446e:	d134      	bne.n	80044da <_svfiprintf_r+0x186>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	9203      	str	r2, [sp, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfb8      	it	lt
 800447c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004480:	3402      	adds	r4, #2
 8004482:	9305      	str	r3, [sp, #20]
 8004484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800454c <_svfiprintf_r+0x1f8>
 8004488:	7821      	ldrb	r1, [r4, #0]
 800448a:	2203      	movs	r2, #3
 800448c:	4650      	mov	r0, sl
 800448e:	f7fb fedf 	bl	8000250 <memchr>
 8004492:	b138      	cbz	r0, 80044a4 <_svfiprintf_r+0x150>
 8004494:	9b04      	ldr	r3, [sp, #16]
 8004496:	eba0 000a 	sub.w	r0, r0, sl
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	4082      	lsls	r2, r0
 800449e:	4313      	orrs	r3, r2
 80044a0:	3401      	adds	r4, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	4825      	ldr	r0, [pc, #148]	; (8004540 <_svfiprintf_r+0x1ec>)
 80044aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ae:	2206      	movs	r2, #6
 80044b0:	f7fb fece 	bl	8000250 <memchr>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d038      	beq.n	800452a <_svfiprintf_r+0x1d6>
 80044b8:	4b22      	ldr	r3, [pc, #136]	; (8004544 <_svfiprintf_r+0x1f0>)
 80044ba:	bb1b      	cbnz	r3, 8004504 <_svfiprintf_r+0x1b0>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	3307      	adds	r3, #7
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	4433      	add	r3, r6
 80044cc:	9309      	str	r3, [sp, #36]	; 0x24
 80044ce:	e768      	b.n	80043a2 <_svfiprintf_r+0x4e>
 80044d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d4:	460c      	mov	r4, r1
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7a6      	b.n	8004428 <_svfiprintf_r+0xd4>
 80044da:	2300      	movs	r3, #0
 80044dc:	3401      	adds	r4, #1
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4620      	mov	r0, r4
 80044e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ec:	3a30      	subs	r2, #48	; 0x30
 80044ee:	2a09      	cmp	r2, #9
 80044f0:	d903      	bls.n	80044fa <_svfiprintf_r+0x1a6>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0c6      	beq.n	8004484 <_svfiprintf_r+0x130>
 80044f6:	9105      	str	r1, [sp, #20]
 80044f8:	e7c4      	b.n	8004484 <_svfiprintf_r+0x130>
 80044fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fe:	4604      	mov	r4, r0
 8004500:	2301      	movs	r3, #1
 8004502:	e7f0      	b.n	80044e6 <_svfiprintf_r+0x192>
 8004504:	ab03      	add	r3, sp, #12
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	462a      	mov	r2, r5
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <_svfiprintf_r+0x1f4>)
 800450c:	a904      	add	r1, sp, #16
 800450e:	4638      	mov	r0, r7
 8004510:	f3af 8000 	nop.w
 8004514:	1c42      	adds	r2, r0, #1
 8004516:	4606      	mov	r6, r0
 8004518:	d1d6      	bne.n	80044c8 <_svfiprintf_r+0x174>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	065b      	lsls	r3, r3, #25
 800451e:	f53f af2d 	bmi.w	800437c <_svfiprintf_r+0x28>
 8004522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004524:	b01d      	add	sp, #116	; 0x74
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	ab03      	add	r3, sp, #12
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	462a      	mov	r2, r5
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <_svfiprintf_r+0x1f4>)
 8004532:	a904      	add	r1, sp, #16
 8004534:	4638      	mov	r0, r7
 8004536:	f000 f879 	bl	800462c <_printf_i>
 800453a:	e7eb      	b.n	8004514 <_svfiprintf_r+0x1c0>
 800453c:	080049e8 	.word	0x080049e8
 8004540:	080049f2 	.word	0x080049f2
 8004544:	00000000 	.word	0x00000000
 8004548:	080042a1 	.word	0x080042a1
 800454c:	080049ee 	.word	0x080049ee

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4699      	mov	r9, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004560:	4293      	cmp	r3, r2
 8004562:	bfb8      	it	lt
 8004564:	4613      	movlt	r3, r2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800456c:	4607      	mov	r7, r0
 800456e:	460c      	mov	r4, r1
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc26      	bgt.n	80045e6 <_printf_common+0x96>
 8004598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800459c:	1e13      	subs	r3, r2, #0
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42b      	bmi.n	8004600 <_printf_common+0xb0>
 80045a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ac:	4649      	mov	r1, r9
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d01e      	beq.n	80045f4 <_printf_common+0xa4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf02      	ittt	eq
 80045c2:	68e5      	ldreq	r5, [r4, #12]
 80045c4:	6833      	ldreq	r3, [r6, #0]
 80045c6:	1aed      	subeq	r5, r5, r3
 80045c8:	68a3      	ldr	r3, [r4, #8]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	2600      	movs	r6, #0
 80045dc:	341a      	adds	r4, #26
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d11a      	bne.n	8004618 <_printf_common+0xc8>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e008      	b.n	80045f8 <_printf_common+0xa8>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4649      	mov	r1, r9
 80045ec:	4638      	mov	r0, r7
 80045ee:	47c0      	blx	r8
 80045f0:	3001      	adds	r0, #1
 80045f2:	d103      	bne.n	80045fc <_printf_common+0xac>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7c6      	b.n	800458e <_printf_common+0x3e>
 8004600:	18e1      	adds	r1, r4, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	2030      	movs	r0, #48	; 0x30
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460a:	4422      	add	r2, r4
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004614:	3302      	adds	r3, #2
 8004616:	e7c7      	b.n	80045a8 <_printf_common+0x58>
 8004618:	2301      	movs	r3, #1
 800461a:	4622      	mov	r2, r4
 800461c:	4649      	mov	r1, r9
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d0e6      	beq.n	80045f4 <_printf_common+0xa4>
 8004626:	3601      	adds	r6, #1
 8004628:	e7d9      	b.n	80045de <_printf_common+0x8e>
	...

0800462c <_printf_i>:
 800462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	7e0f      	ldrb	r7, [r1, #24]
 8004632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004634:	2f78      	cmp	r7, #120	; 0x78
 8004636:	4691      	mov	r9, r2
 8004638:	4680      	mov	r8, r0
 800463a:	460c      	mov	r4, r1
 800463c:	469a      	mov	sl, r3
 800463e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004642:	d807      	bhi.n	8004654 <_printf_i+0x28>
 8004644:	2f62      	cmp	r7, #98	; 0x62
 8004646:	d80a      	bhi.n	800465e <_printf_i+0x32>
 8004648:	2f00      	cmp	r7, #0
 800464a:	f000 80d4 	beq.w	80047f6 <_printf_i+0x1ca>
 800464e:	2f58      	cmp	r7, #88	; 0x58
 8004650:	f000 80c0 	beq.w	80047d4 <_printf_i+0x1a8>
 8004654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800465c:	e03a      	b.n	80046d4 <_printf_i+0xa8>
 800465e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004662:	2b15      	cmp	r3, #21
 8004664:	d8f6      	bhi.n	8004654 <_printf_i+0x28>
 8004666:	a101      	add	r1, pc, #4	; (adr r1, 800466c <_printf_i+0x40>)
 8004668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046d9 	.word	0x080046d9
 8004674:	08004655 	.word	0x08004655
 8004678:	08004655 	.word	0x08004655
 800467c:	08004655 	.word	0x08004655
 8004680:	08004655 	.word	0x08004655
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004655 	.word	0x08004655
 800468c:	08004655 	.word	0x08004655
 8004690:	08004655 	.word	0x08004655
 8004694:	08004655 	.word	0x08004655
 8004698:	080047dd 	.word	0x080047dd
 800469c:	08004705 	.word	0x08004705
 80046a0:	08004797 	.word	0x08004797
 80046a4:	08004655 	.word	0x08004655
 80046a8:	08004655 	.word	0x08004655
 80046ac:	080047ff 	.word	0x080047ff
 80046b0:	08004655 	.word	0x08004655
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004655 	.word	0x08004655
 80046bc:	08004655 	.word	0x08004655
 80046c0:	0800479f 	.word	0x0800479f
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d4:	2301      	movs	r3, #1
 80046d6:	e09f      	b.n	8004818 <_printf_i+0x1ec>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	0607      	lsls	r7, r0, #24
 80046de:	f103 0104 	add.w	r1, r3, #4
 80046e2:	6029      	str	r1, [r5, #0]
 80046e4:	d501      	bpl.n	80046ea <_printf_i+0xbe>
 80046e6:	681e      	ldr	r6, [r3, #0]
 80046e8:	e003      	b.n	80046f2 <_printf_i+0xc6>
 80046ea:	0646      	lsls	r6, r0, #25
 80046ec:	d5fb      	bpl.n	80046e6 <_printf_i+0xba>
 80046ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	da03      	bge.n	80046fe <_printf_i+0xd2>
 80046f6:	232d      	movs	r3, #45	; 0x2d
 80046f8:	4276      	negs	r6, r6
 80046fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fe:	485a      	ldr	r0, [pc, #360]	; (8004868 <_printf_i+0x23c>)
 8004700:	230a      	movs	r3, #10
 8004702:	e012      	b.n	800472a <_printf_i+0xfe>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	1d19      	adds	r1, r3, #4
 800470a:	6029      	str	r1, [r5, #0]
 800470c:	0605      	lsls	r5, r0, #24
 800470e:	d501      	bpl.n	8004714 <_printf_i+0xe8>
 8004710:	681e      	ldr	r6, [r3, #0]
 8004712:	e002      	b.n	800471a <_printf_i+0xee>
 8004714:	0641      	lsls	r1, r0, #25
 8004716:	d5fb      	bpl.n	8004710 <_printf_i+0xe4>
 8004718:	881e      	ldrh	r6, [r3, #0]
 800471a:	4853      	ldr	r0, [pc, #332]	; (8004868 <_printf_i+0x23c>)
 800471c:	2f6f      	cmp	r7, #111	; 0x6f
 800471e:	bf0c      	ite	eq
 8004720:	2308      	moveq	r3, #8
 8004722:	230a      	movne	r3, #10
 8004724:	2100      	movs	r1, #0
 8004726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800472a:	6865      	ldr	r5, [r4, #4]
 800472c:	60a5      	str	r5, [r4, #8]
 800472e:	2d00      	cmp	r5, #0
 8004730:	bfa2      	ittt	ge
 8004732:	6821      	ldrge	r1, [r4, #0]
 8004734:	f021 0104 	bicge.w	r1, r1, #4
 8004738:	6021      	strge	r1, [r4, #0]
 800473a:	b90e      	cbnz	r6, 8004740 <_printf_i+0x114>
 800473c:	2d00      	cmp	r5, #0
 800473e:	d04b      	beq.n	80047d8 <_printf_i+0x1ac>
 8004740:	4615      	mov	r5, r2
 8004742:	fbb6 f1f3 	udiv	r1, r6, r3
 8004746:	fb03 6711 	mls	r7, r3, r1, r6
 800474a:	5dc7      	ldrb	r7, [r0, r7]
 800474c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004750:	4637      	mov	r7, r6
 8004752:	42bb      	cmp	r3, r7
 8004754:	460e      	mov	r6, r1
 8004756:	d9f4      	bls.n	8004742 <_printf_i+0x116>
 8004758:	2b08      	cmp	r3, #8
 800475a:	d10b      	bne.n	8004774 <_printf_i+0x148>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	07de      	lsls	r6, r3, #31
 8004760:	d508      	bpl.n	8004774 <_printf_i+0x148>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	6861      	ldr	r1, [r4, #4]
 8004766:	4299      	cmp	r1, r3
 8004768:	bfde      	ittt	le
 800476a:	2330      	movle	r3, #48	; 0x30
 800476c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004774:	1b52      	subs	r2, r2, r5
 8004776:	6122      	str	r2, [r4, #16]
 8004778:	f8cd a000 	str.w	sl, [sp]
 800477c:	464b      	mov	r3, r9
 800477e:	aa03      	add	r2, sp, #12
 8004780:	4621      	mov	r1, r4
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fee4 	bl	8004550 <_printf_common>
 8004788:	3001      	adds	r0, #1
 800478a:	d14a      	bne.n	8004822 <_printf_i+0x1f6>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	b004      	add	sp, #16
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f043 0320 	orr.w	r3, r3, #32
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	4833      	ldr	r0, [pc, #204]	; (800486c <_printf_i+0x240>)
 80047a0:	2778      	movs	r7, #120	; 0x78
 80047a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	6829      	ldr	r1, [r5, #0]
 80047aa:	061f      	lsls	r7, r3, #24
 80047ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b0:	d402      	bmi.n	80047b8 <_printf_i+0x18c>
 80047b2:	065f      	lsls	r7, r3, #25
 80047b4:	bf48      	it	mi
 80047b6:	b2b6      	uxthmi	r6, r6
 80047b8:	07df      	lsls	r7, r3, #31
 80047ba:	bf48      	it	mi
 80047bc:	f043 0320 	orrmi.w	r3, r3, #32
 80047c0:	6029      	str	r1, [r5, #0]
 80047c2:	bf48      	it	mi
 80047c4:	6023      	strmi	r3, [r4, #0]
 80047c6:	b91e      	cbnz	r6, 80047d0 <_printf_i+0x1a4>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	2310      	movs	r3, #16
 80047d2:	e7a7      	b.n	8004724 <_printf_i+0xf8>
 80047d4:	4824      	ldr	r0, [pc, #144]	; (8004868 <_printf_i+0x23c>)
 80047d6:	e7e4      	b.n	80047a2 <_printf_i+0x176>
 80047d8:	4615      	mov	r5, r2
 80047da:	e7bd      	b.n	8004758 <_printf_i+0x12c>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	6826      	ldr	r6, [r4, #0]
 80047e0:	6961      	ldr	r1, [r4, #20]
 80047e2:	1d18      	adds	r0, r3, #4
 80047e4:	6028      	str	r0, [r5, #0]
 80047e6:	0635      	lsls	r5, r6, #24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0x1c4>
 80047ec:	6019      	str	r1, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0x1ca>
 80047f0:	0670      	lsls	r0, r6, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0x1c0>
 80047f4:	8019      	strh	r1, [r3, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	4615      	mov	r5, r2
 80047fc:	e7bc      	b.n	8004778 <_printf_i+0x14c>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	2100      	movs	r1, #0
 800480a:	4628      	mov	r0, r5
 800480c:	f7fb fd20 	bl	8000250 <memchr>
 8004810:	b108      	cbz	r0, 8004816 <_printf_i+0x1ea>
 8004812:	1b40      	subs	r0, r0, r5
 8004814:	6060      	str	r0, [r4, #4]
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	2300      	movs	r3, #0
 800481c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004820:	e7aa      	b.n	8004778 <_printf_i+0x14c>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	462a      	mov	r2, r5
 8004826:	4649      	mov	r1, r9
 8004828:	4640      	mov	r0, r8
 800482a:	47d0      	blx	sl
 800482c:	3001      	adds	r0, #1
 800482e:	d0ad      	beq.n	800478c <_printf_i+0x160>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	079b      	lsls	r3, r3, #30
 8004834:	d413      	bmi.n	800485e <_printf_i+0x232>
 8004836:	68e0      	ldr	r0, [r4, #12]
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	4298      	cmp	r0, r3
 800483c:	bfb8      	it	lt
 800483e:	4618      	movlt	r0, r3
 8004840:	e7a6      	b.n	8004790 <_printf_i+0x164>
 8004842:	2301      	movs	r3, #1
 8004844:	4632      	mov	r2, r6
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	47d0      	blx	sl
 800484c:	3001      	adds	r0, #1
 800484e:	d09d      	beq.n	800478c <_printf_i+0x160>
 8004850:	3501      	adds	r5, #1
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	9903      	ldr	r1, [sp, #12]
 8004856:	1a5b      	subs	r3, r3, r1
 8004858:	42ab      	cmp	r3, r5
 800485a:	dcf2      	bgt.n	8004842 <_printf_i+0x216>
 800485c:	e7eb      	b.n	8004836 <_printf_i+0x20a>
 800485e:	2500      	movs	r5, #0
 8004860:	f104 0619 	add.w	r6, r4, #25
 8004864:	e7f5      	b.n	8004852 <_printf_i+0x226>
 8004866:	bf00      	nop
 8004868:	080049f9 	.word	0x080049f9
 800486c:	08004a0a 	.word	0x08004a0a

08004870 <memmove>:
 8004870:	4288      	cmp	r0, r1
 8004872:	b510      	push	{r4, lr}
 8004874:	eb01 0402 	add.w	r4, r1, r2
 8004878:	d902      	bls.n	8004880 <memmove+0x10>
 800487a:	4284      	cmp	r4, r0
 800487c:	4623      	mov	r3, r4
 800487e:	d807      	bhi.n	8004890 <memmove+0x20>
 8004880:	1e43      	subs	r3, r0, #1
 8004882:	42a1      	cmp	r1, r4
 8004884:	d008      	beq.n	8004898 <memmove+0x28>
 8004886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800488a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800488e:	e7f8      	b.n	8004882 <memmove+0x12>
 8004890:	4402      	add	r2, r0
 8004892:	4601      	mov	r1, r0
 8004894:	428a      	cmp	r2, r1
 8004896:	d100      	bne.n	800489a <memmove+0x2a>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800489e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048a2:	e7f7      	b.n	8004894 <memmove+0x24>

080048a4 <_sbrk_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_sbrk_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc f9b2 	bl	8000c18 <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_sbrk_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_sbrk_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000434 	.word	0x20000434

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048da:	4291      	cmp	r1, r2
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <_realloc_r>:
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	4680      	mov	r8, r0
 80048e6:	4614      	mov	r4, r2
 80048e8:	460e      	mov	r6, r1
 80048ea:	b921      	cbnz	r1, 80048f6 <_realloc_r+0x16>
 80048ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4611      	mov	r1, r2
 80048f2:	f7ff bc49 	b.w	8004188 <_malloc_r>
 80048f6:	b92a      	cbnz	r2, 8004904 <_realloc_r+0x24>
 80048f8:	f7ff fbda 	bl	80040b0 <_free_r>
 80048fc:	4625      	mov	r5, r4
 80048fe:	4628      	mov	r0, r5
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	f000 f81b 	bl	800493e <_malloc_usable_size_r>
 8004908:	4284      	cmp	r4, r0
 800490a:	4607      	mov	r7, r0
 800490c:	d802      	bhi.n	8004914 <_realloc_r+0x34>
 800490e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004912:	d812      	bhi.n	800493a <_realloc_r+0x5a>
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fc36 	bl	8004188 <_malloc_r>
 800491c:	4605      	mov	r5, r0
 800491e:	2800      	cmp	r0, #0
 8004920:	d0ed      	beq.n	80048fe <_realloc_r+0x1e>
 8004922:	42bc      	cmp	r4, r7
 8004924:	4622      	mov	r2, r4
 8004926:	4631      	mov	r1, r6
 8004928:	bf28      	it	cs
 800492a:	463a      	movcs	r2, r7
 800492c:	f7ff ffca 	bl	80048c4 <memcpy>
 8004930:	4631      	mov	r1, r6
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff fbbc 	bl	80040b0 <_free_r>
 8004938:	e7e1      	b.n	80048fe <_realloc_r+0x1e>
 800493a:	4635      	mov	r5, r6
 800493c:	e7df      	b.n	80048fe <_realloc_r+0x1e>

0800493e <_malloc_usable_size_r>:
 800493e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004942:	1f18      	subs	r0, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfbc      	itt	lt
 8004948:	580b      	ldrlt	r3, [r1, r0]
 800494a:	18c0      	addlt	r0, r0, r3
 800494c:	4770      	bx	lr
	...

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
